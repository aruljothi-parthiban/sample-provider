openapi: 3.0.1
info:
  title: Commerce Webservices
  description: These services manage all of the common commerce functionality, and
    also include customizations from installed AddOns. The implementing extension
    is called ctccommercewebservices.
  license:
    name: Use of this file is subject to the terms of your agreement with SAP SE or
      its affiliates respecting the use of the SAP product for which this file relates.
  version: "2.0"
servers:
- url: //api.c0onq03u1z-canadiant2-d3-public.model-t.cc.commerce.ondemand.com/rest/v2
security:
- oauth2_Password:
  - basic
- oauth2_client_credentials:
  - extended
tags:
- name: Address
  description: Address Controller
- name: Base Sites
  description: Base Sites Controller
- name: Base Stores
  description: Base Stores Controller
- name: CTCNarvar
  description: Ctc Narvar Controller
- name: CartData
  description: Ctc Cart Data Controller
- name: Carts
  description: Ctc Carts Controller
- name: Consents
  description: Consents Controller
- name: Consignment Tracking
  description: Consignment Tracking Controller
- name: Countries
  description: Countries Controller
- name: CtcCatalogs
  description: Ctc Catalogs Controller
- name: CtcFeeMessages
  description: Ctc Fee Message Controller
- name: CtcGlobalValues
  description: Ctc Global Data Controller
- name: CtcInstore
  description: Ctc Instore Controller
- name: CtcPayment
  description: Ctfs Payment Controller
- name: CtcProducts
  description: Ctc Products Controller
- name: CtcReservation
  description: Ctc Reservation Controller
- name: CtcServiceCentre
  description: Ctc Service Centre Controller
- name: CtcShareCart
  description: Ctc Shared Cart Controller
- name: CtcSharedCartTemplate
  description: Ctc Shared Cart Template Controller
- name: CtcStores
  description: Ctc Stores Controller
- name: CtcStoresAdmin
  description: Ctc Stores Admin Controller
- name: CtcUserProfile
  description: Ctc User Profile Controller
- name: Customer Coupons
  description: Customer Coupons Controller
- name: Customer Groups
  description: Customer Groups Controller
- name: Export
  description: Export Controller
- name: Extended Carts
  description: Extended Carts Controller
- name: Feeds
  description: Feeds Controller
- name: Forgotten Passwords
  description: Forgotten Passwords Controller
- name: IVR
  description: Ctc Ivr Controller
- name: Login Notification
  description: Login Notification Controller
- name: Merchant Callback
  description: Merchant Callback Controller
- name: Message Center
  description: Message Center CS Controller
- name: Migration
  description: Ctc Impex Migration Controller
- name: Miscs
  description: Miscs Controller
- name: Notification Preference
  description: Notification Preference Controller
- name: Orders
  description: Ctc Orders Controller
- name: POS
  description: Ctc Pos Order Controller
- name: Payment Details
  description: Payment Details Controller
- name: Payment Modes
  description: Payment Modes Controller
- name: Price
  description: Ctc Price Controller
- name: Product Interests
  description: Product Interests Controller
- name: Promotions
  description: Promotions Controller
- name: Return Requests
  description: Order Returns Controller
- name: Save Cart
  description: Save Cart Controller
- name: Share Cart
  description: Ctc Instore Shared Cart Template Controller
- name: Site Messages
  description: Site Message Controller
- name: Triangle Select
  description: Ctc Triangle Select Controller
- name: User Roles
  description: Ctc Users Controller
- name: UserAccount
  description: Ctc User Account Controller
- name: Users
  description: Users Controller
- name: Vouchers
  description: Vouchers Controller
- name: Wishlist
  description: Ctc Wishlist Controller
- name: cancellationReasons
  description: Ctc Cancel Reasons Controller
- name: ctc-authorization-controller
  description: Ctc Authorization Controller
- name: ctc-release-version-controller
  description: Ctc Release Version Controller
- name: ctc-sle-configuration-controller
  description: Ctc Sle Configuration Controller
- name: order-forms-controller
  description: Order Forms Controller
- name: saveforlater
  description: Ctc Save For Later Controller
- name: vPos receipts operations
  description: Ctc Vpos Receipts Controller
paths:
  /basesites:
    get:
      tags:
      - Base Sites
      summary: Get all base sites.
      description: Get all base sites with corresponding base stores details in FULL
        mode.
      operationId: getBaseSites
      parameters:
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/BaseSiteList'
            application/json:
              schema:
                $ref: '#/components/schemas/BaseSiteList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /properties/globalValues:
    get:
      tags:
      - CtcGlobalValues
      summary: Ctc Get Global Values
      description: Gets list of global values which are public
      operationId: getGlobalValues
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CtcGlobalValues'
            application/json:
              schema:
                $ref: '#/components/schemas/CtcGlobalValues'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /user/profile/savePaymentInfo:
    post:
      tags:
      - CtcUserProfile
      summary: Save Instant triangle master card
      description: Save Instant triangle master card in GIGYA via CDS
      operationId: Save Payment Info
      requestBody:
        description: ' Request body contains user triangle master card details'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CtcTriangleMasterCard'
        required: true
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: ctcTriangleMasterCardWsDTO
  /{baseSiteId}/admin/stores/{storeNumber}/curbsideEligibility:
    get:
      tags:
      - CtcStoresAdmin
      summary: Get curbside eligibility for store.
      description: Get curbside eligibility for store.
      operationId: isCurbsideOn
      parameters:
      - name: baseSiteId
        in: path
        description: Base Site ID
        required: true
        schema:
          type: string
      - name: storeNumber
        in: path
        description: storeNumber
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                type: boolean
            application/json:
              schema:
                type: boolean
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/admin/stores/{storeNumber}/onlineOrdering:
    get:
      tags:
      - CtcStoresAdmin
      summary: Get online ordering feature.
      description: Get online ordering feature for a CTC store.
      operationId: getOnlineOrdering
      parameters:
      - name: baseSiteId
        in: path
        description: Base Site ID
        required: true
        schema:
          type: string
      - name: storeNumber
        in: path
        description: storeNumber
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/OnlineOrderingData'
            application/json:
              schema:
                $ref: '#/components/schemas/OnlineOrderingData'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    put:
      tags:
      - CtcStoresAdmin
      summary: Update online ordering feature.
      description: Updates online ordering feature for a CTC store.
      operationId: updateOnlineOrdering
      parameters:
      - name: baseSiteId
        in: path
        description: Base Site ID
        required: true
        schema:
          type: string
      - name: storeNumber
        in: path
        description: storeNumber
        required: true
        schema:
          type: string
      requestBody:
        description: requestData
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnlineOrderingRequest'
        required: true
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: requestData
  /{baseSiteId}/admin/stores/{storeNumber}/orderHolding:
    put:
      tags:
      - CtcStoresAdmin
      summary: Update Order Holding configuration.
      description: Updates Order Holding configuration for a CTC store.
      operationId: updateOrderHoldingConfiguration
      parameters:
      - name: baseSiteId
        in: path
        description: Base Site ID
        required: true
        schema:
          type: string
      - name: storeNumber
        in: path
        description: storeNumber
        required: true
        schema:
          type: string
      requestBody:
        description: requestData
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderHoldingRequest'
        required: true
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: requestData
  /{baseSiteId}/admin/stores/{storeNumber}/orderHolding/options:
    get:
      tags:
      - CtcStoresAdmin
      summary: Get available Order Holding configurations.
      description: Gets available Order Holding configurations.
      operationId: getOrderHoldingOptions
      parameters:
      - name: baseSiteId
        in: path
        description: Base Site ID
        required: true
        schema:
          type: string
      - name: storeNumber
        in: path
        description: storeNumber
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CtcOrderHoldingConfigurationData'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CtcOrderHoldingConfigurationData'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/admin/stores/{storeNumber}/sle:
    put:
      tags:
      - CtcStoresAdmin
      summary: Update SLE configuration.
      description: Updates SLE configuration for a CTC store.
      operationId: updateSleConfiguration
      parameters:
      - name: baseSiteId
        in: path
        description: Base Site ID
        required: true
        schema:
          type: string
      - name: storeNumber
        in: path
        description: storeNumber
        required: true
        schema:
          type: string
      requestBody:
        description: requestData
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SleRequest'
        required: true
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: requestData
  /{baseSiteId}/admin/stores/{storeNumber}/sle/options:
    get:
      tags:
      - CtcStoresAdmin
      summary: Get available SLE configurations.
      description: Gets available SLE configurations.
      operationId: getSleOptions_1
      parameters:
      - name: baseSiteId
        in: path
        description: Base Site ID
        required: true
        schema:
          type: string
      - name: storeNumber
        in: path
        description: storeNumber
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CtcSleConfigurationData'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CtcSleConfigurationData'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/admin/stores/{storeNumber}/storeFlexibilityConfig:
    get:
      tags:
      - CtcStoresAdmin
      summary: Get available store flexibility configurations.
      description: Gets available Store Flexibility configurations.
      operationId: getStoreFlexibilityConfigParameters
      parameters:
      - name: baseSiteId
        in: path
        description: Base Site ID
        required: true
        schema:
          type: string
      - name: storeNumber
        in: path
        description: storeNumber
        required: true
        schema:
          type: string
      - name: type
        in: query
        description: type
        required: true
        schema:
          type: string
          enum:
          - SLE
          - ONLINE_ORDERING
          - FEE
          - THRESHOLD
          - PICK_UP_CHANNEL
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/StoreFlexibilityConfigResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/StoreFlexibilityConfigResponse'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    put:
      tags:
      - CtcStoresAdmin
      summary: Update store flexibility config.
      description: Updates store flexibility config.
      operationId: updateStoreFlexibilityConfig
      parameters:
      - name: baseSiteId
        in: path
        description: Base Site ID
        required: true
        schema:
          type: string
      - name: storeNumber
        in: path
        description: storeNumber
        required: true
        schema:
          type: string
      requestBody:
        description: request
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/StoreFlexibilityConfigRequest'
        required: true
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: request
  /{baseSiteId}/authorizationserver/oauth/logout:
    get:
      tags:
      - ctc-authorization-controller
      summary: logout
      operationId: logoutUsingGET
      parameters:
      - name: baseSiteId
        in: path
        description: Base Site ID
        required: true
        schema:
          type: string
      - name: post_logout_redirect_uri
        in: query
        description: post_logout_redirect_uri
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/RedirectView'
            application/json:
              schema:
                $ref: '#/components/schemas/RedirectView'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/autoservice/template/share:
    post:
      tags:
      - CtcServiceCentre
      summary: Shares products to the specified email/phone as an e-Commerce shopping
        cart
      description: Returns share card valid duration
      operationId: shareCart
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      requestBody:
        description: request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentShareCartRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/DocumentShareCartResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentShareCartResponse'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: request
  /{baseSiteId}/basestores/{baseStoreUid}:
    get:
      tags:
      - Base Stores
      summary: Get a base store.
      description: Returns details of a specific base store based on its identifier.
        The response contains detailed base store information.
      operationId: getBaseStore
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: baseStoreUid
        in: path
        description: Base store name
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/BaseStore'
            application/json:
              schema:
                $ref: '#/components/schemas/BaseStore'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/cancellationReasons:
    get:
      tags:
      - cancellationReasons
      summary: getCancellationReasons
      operationId: getCancellationReasonsUsingGET
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: lang
        in: query
        description: lang
        schema:
          type: string
          default: en
      - name: reasonType
        in: query
        description: reasonType
        schema:
          type: string
          default: GM
          enum:
          - GM
          - TIRES
          - STORE_GM
          - STORE_TIRES
          - CUSTOMER
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CtcCancelReason'
            application/json:
              schema:
                $ref: '#/components/schemas/CtcCancelReason'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/cardtypes:
    get:
      tags:
      - Miscs
      summary: Get a list of supported payment card types.
      description: Lists supported payment card types.
      operationId: getCardTypes
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CardTypeList'
            application/json:
              schema:
                $ref: '#/components/schemas/CardTypeList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/cartData/mini:
    get:
      tags:
      - CartData
      summary: getMiniCartData
      operationId: getMiniCartDataUsingGET
      parameters:
      - name: baseSiteId
        in: path
        description: Base Site ID
        required: true
        schema:
          type: string
      - name: guid
        in: query
        description: guid
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CtcMiniCartData'
            application/json:
              schema:
                $ref: '#/components/schemas/CtcMiniCartData'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/catalogs:
    get:
      tags:
      - CtcCatalogs
      summary: Get a list of catalogs
      description: Returns all catalogs with versions defined for the base store.
      operationId: getCatalogs
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CatalogList'
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/catalogs/new/{catalogId}/{catalogVersionId}:
    get:
      tags:
      - CtcCatalogs
      summary: Get information about catalog version for mega navigation
      description: Returns information about the catalog version that exists for the
        current base store.
      operationId: getMegaNavCatalogVersion
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: catalogId
        in: path
        description: Catalog identifier
        required: true
        schema:
          type: string
      - name: catalogVersionId
        in: path
        description: Catalog version identifier
        required: true
        schema:
          type: string
      - name: filterForSiteMap
        in: query
        description: filterForSiteMap
        schema:
          type: boolean
          default: false
      - name: level
        in: query
        description: level
        schema:
          type: integer
          format: int32
          default: 3
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CtcMegaNavCatalogVersionData'
            application/json:
              schema:
                $ref: '#/components/schemas/CtcMegaNavCatalogVersionData'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/catalogs/{catalogId}:
    get:
      tags:
      - CtcCatalogs
      summary: Get a catalog
      description: Returns information about a catalog based on its ID, along with
        the versions defined for the current base store.
      operationId: getCatalog
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: catalogId
        in: path
        description: Catalog identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Catalog'
            application/json:
              schema:
                $ref: '#/components/schemas/Catalog'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/catalogs/{catalogId}/{catalogVersionId}:
    get:
      tags:
      - CtcCatalogs
      summary: Get information about catalog version
      description: Returns information about the catalog version that exists for the
        current base store.
      operationId: getCatalogVersion
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: catalogId
        in: path
        description: Catalog identifier
        required: true
        schema:
          type: string
      - name: catalogVersionId
        in: path
        description: Catalog version identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: filterForSiteMap
        in: query
        description: filterForSiteMap
        schema:
          type: boolean
          default: false
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CatalogVersion'
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogVersion'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/catalogs/{catalogId}/{catalogVersionId}/categories/{categoryId}:
    get:
      tags:
      - CtcCatalogs
      summary: Get information about catagory in a catalog version
      description: Returns information about a specified category that exists in a
        catalog version available for the current base store.
      operationId: getCategories
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: catalogId
        in: path
        description: Catalog identifier
        required: true
        schema:
          type: string
      - name: catalogVersionId
        in: path
        description: Catalog version identifier
        required: true
        schema:
          type: string
      - name: categoryId
        in: path
        description: Category identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: filterForMegaNav
        in: query
        description: filterForMegaNav
        schema:
          type: boolean
          default: true
      - name: level
        in: query
        description: 'Level up to which subCategory to display , values = [0-4] '
        allowEmptyValue: false
        schema:
          type: integer
          format: int32
          default: 4
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CtcCategoryHierarchy'
            application/json:
              schema:
                $ref: '#/components/schemas/CtcCategoryHierarchy'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/countries:
    get:
      tags:
      - Countries
      summary: Get a list of countries.
      description: If the value of type equals to shipping, then return shipping countries.
        If the value of type equals to billing, then return billing countries. If
        the value of type is not given, return all countries. The list is sorted alphabetically.
      operationId: getCountries
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: type
        in: query
        description: The type of countries.
        allowEmptyValue: false
        schema:
          type: string
          enum:
          - SHIPPING
          - BILLING
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CountryList'
            application/json:
              schema:
                $ref: '#/components/schemas/CountryList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/countries/{countyIsoCode}/regions:
    get:
      tags:
      - Countries
      summary: Fetch the list of regions for the provided country.
      description: Lists all regions.
      operationId: getCountryRegions
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: countyIsoCode
        in: path
        description: An ISO code for a country
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/RegionList'
            application/json:
              schema:
                $ref: '#/components/schemas/RegionList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/currencies:
    get:
      tags:
      - Miscs
      summary: Get a list of available currencies.
      description: Lists all available currencies (all usable currencies for the current
        store). If the list of currencies for a base store is empty, a list of all
        currencies available in the system is returned.
      operationId: getCurrencies
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CurrencyList'
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/customergroups:
    get:
      tags:
      - Customer Groups
      summary: Get all subgroups of a customergroup.
      description: |-
        Returns all customer groups that are direct subgroups of a customergroup.

        To try out the methods of the Customer Groups controller, you must authorize a user who belongs to the “customermanagergroup”.
      operationId: getCustomerGroups
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: currentPage
        in: query
        description: Current page number (starts with 0).
        allowEmptyValue: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: BASIC
      - name: pageSize
        in: query
        description: Number of customer group returned in one page.
        allowEmptyValue: false
        schema:
          type: integer
          format: int32
          default: 20
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/UserGroupList'
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroupList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    post:
      tags:
      - Customer Groups
      summary: Creates a new customer group.
      description: |-
        Creates a new customer group that is a direct subgroup of a customergroup.

        To try out the methods of the Customer Groups controller, you must authorize a user who belongs to the “customermanagergroup”.
      operationId: createCustomerGroup
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      requestBody:
        description: User group object with id and name.
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/UserGroup'
          application/json:
            schema:
              $ref: '#/components/schemas/UserGroup'
        required: true
      responses:
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: userGroup
  /{baseSiteId}/customergroups/{groupId}:
    get:
      tags:
      - Customer Groups
      summary: Get a specific customer group.
      description: |-
        Returns a customer group with a specific groupId.

        To try out the methods of the Customer Groups controller, you must authorize a user who belongs to the “customermanagergroup”.
      operationId: getCustomerGroup
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: BASIC
      - name: groupId
        in: path
        description: Group identifier.
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/UserGroup'
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/customergroups/{groupId}/members:
    put:
      tags:
      - Customer Groups
      summary: Sets members for a user group.
      description: |-
        Sets members for a user group. The list of existing members is overwritten with a new one.

        To try out the methods of the Customer Groups controller, you must authorize a user who belongs to the “customermanagergroup”.
      operationId: replaceUsersForCustomerGroup
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: groupId
        in: path
        description: Group identifier.
        required: true
        schema:
          type: string
      requestBody:
        description: List of users to set for customer group.
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/MemberList'
          application/json:
            schema:
              $ref: '#/components/schemas/MemberList'
        required: true
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: members
    patch:
      tags:
      - Customer Groups
      summary: Assigns user(s) to a customer group.
      description: |-
        Assigns user(s) to a customer group.

        To try out the methods of the Customer Groups controller, you must authorize a user who belongs to the “customermanagergroup”.
      operationId: updateCustomerGroupWithUsers
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: groupId
        in: path
        description: Group identifier.
        required: true
        schema:
          type: string
      requestBody:
        description: List of users to assign to customer group.
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/MemberList'
          application/json:
            schema:
              $ref: '#/components/schemas/MemberList'
        required: true
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: members
  /{baseSiteId}/customergroups/{groupId}/members/{userId}:
    delete:
      tags:
      - Customer Groups
      summary: Deletes a user from a customer group.
      description: |-
        Deletes user from a customer group.

        To try out the methods of the Customer Groups controller, you must authorize a user who belongs to the “customermanagergroup”.
      operationId: removeUsersFromCustomerGroup
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: groupId
        in: path
        description: Group identifier.
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: User identifier.
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/deliverycountries:
    get:
      tags:
      - Miscs
      summary: Get a list of shipping countries.
      description: Lists all supported delivery countries for the current store. The
        list is sorted alphabetically.
      operationId: getDeliveryCountries
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CountryList'
            application/json:
              schema:
                $ref: '#/components/schemas/CountryList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: true
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/export/products:
    get:
      tags:
      - Export
      summary: Get a list of product exports.
      description: Used for product export. Depending on the timestamp parameter,
        it can return all products or only products modified after the given time.
      operationId: getExportedProducts
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: catalog
        in: query
        description: The catalog to retrieve products from. The catalog must be provided
          along with the version.
        allowEmptyValue: false
        schema:
          type: string
      - name: currentPage
        in: query
        description: The current result page requested.
        allowEmptyValue: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: pageSize
        in: query
        description: The number of results returned per page.
        allowEmptyValue: false
        schema:
          type: integer
          format: int32
          default: 20
      - name: timestamp
        in: query
        description: When this parameter is set, only products modified after the
          given time will be returned. This parameter should be in ISO-8601 format
          (for example, 2018-01-09T16:28:45+0000).
        allowEmptyValue: false
        schema:
          type: string
      - name: version
        in: query
        description: The catalog version. The catalog version must be provided along
          with the catalog.
        allowEmptyValue: false
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ProductList'
            application/json:
              schema:
                $ref: '#/components/schemas/ProductList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/feeds/orders/statusfeed:
    get:
      tags:
      - Feeds
      summary: Get a list of orders with status updates.
      description: Returns the orders that have changed status. Returns only the elements
        from the current baseSite that have been updated after the provided timestamp.
      operationId: getOrderStatusFeed
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: timestamp
        in: query
        description: Only items newer than the given parameter are retrieved. This
          parameter should be in ISO-8601 format (for example, 2018-01-09T16:28:45+0000).
        required: true
        allowEmptyValue: false
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/OrderStatusUpdateElementList'
            application/json:
              schema:
                $ref: '#/components/schemas/OrderStatusUpdateElementList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/feemessages:
    post:
      tags:
      - CtcFeeMessages
      summary: Get the fee message based on the list of category and province.
      operationId: getFeeMessagesAndTitle
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: storeId
        in: query
        description: Fee message with given Province ID.
        required: true
        allowEmptyValue: false
        schema:
          type: string
      requestBody:
        description: 'Request body parameter that contains list of category code '
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CtcFeeMessageCatListRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CtcFeeMessageList'
            application/json:
              schema:
                $ref: '#/components/schemas/CtcFeeMessageList'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: categoryRequest
  /{baseSiteId}/feemessages/new:
    post:
      tags:
      - CtcFeeMessages
      summary: Get the fee message based on the list of category and province
      operationId: getFeeMessagesAndTitle_1
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: storeId
        in: query
        description: Fee message with given province id
        required: true
        allowEmptyValue: false
        schema:
          type: string
      requestBody:
        description: Request body parameter that contains list of category code
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CtcFeeMessageCatListRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CtcFeeMessageListData'
            application/json:
              schema:
                $ref: '#/components/schemas/CtcFeeMessageListData'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: categoryRequest
  /{baseSiteId}/forgottenpasswordtokens:
    post:
      tags:
      - Forgotten Passwords
      summary: Generates a token to restore a customer's forgotten password.
      description: Generates a token to restore a customer's forgotten password.
      operationId: doRestorePassword
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: userId
        in: query
        description: Customer's user id. Customer user id is case insensitive.
        required: true
        allowEmptyValue: false
        schema:
          type: string
      responses:
        201:
          description: Created
          content: {}
        202:
          description: Accepted
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/instore/cart/{cartId}/adjustPrices:
    post:
      tags:
      - Share Cart
      summary: Price Adjustment Shared Cart.
      description: Price Adjustment Shared Cart.
      operationId: recalculateSharedCart
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: cartId
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      requestBody:
        description: request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MerchandiseSharedCartRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/SharedCartResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SharedCartResponse'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: request
  /{baseSiteId}/instore/cart/{cartId}/import:
    get:
      tags:
      - Share Cart
      summary: Import shared cart.
      description: Import shared cart.
      operationId: importSharedCart
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: cartId
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/SharedCartResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SharedCartResponse'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/instore/order/{orderCode}/extendPickup:
    put:
      tags:
      - CtcInstore
      summary: extendPickup
      operationId: extendPickupUsingPUT
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: orderCode
        in: path
        description: orderCode
        required: true
        schema:
          type: string
      requestBody:
        description: extendPickupRequestWsDTO
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExtendPickupRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/OrderExtendPickupResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/OrderExtendPickupResponse'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: extendPickupRequestWsDTO
  /{baseSiteId}/instore/share/labour:
    post:
      tags:
      - Share Cart
      summary: Share a labour cart.
      description: Share a labour cart.
      operationId: shareLabourCart
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      requestBody:
        description: request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabourSharedCartRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: request
  /{baseSiteId}/instore/share/merchandise:
    post:
      tags:
      - Share Cart
      summary: Share a merchandise cart.
      description: Share a merchandise cart.
      operationId: shareMerchandiseCart
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      requestBody:
        description: request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MerchandiseSharedCartRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: request
  /{baseSiteId}/integration/merchant_callback:
    post:
      tags:
      - Merchant Callback
      summary: Verify the decision of the Merchant
      description: "Verifies the decision of the merchant. \n\nNote, the “Try it out”\
        \ button is not enabled for this method (always returns an error) because\
        \ the Merchant Callback Controller handles parameters differently, depending\
        \ on which payment provider is used. For more information about this controller,\
        \ please refer to the “acceleratorocc AddOn” documentation on help.hybris.com."
      operationId: doHandleMerchantCallback
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/integration/users/{userId}/carts/{cartId}/payment/sop/response:
    post:
      tags:
      - Merchant Callback
      summary: Verify the decision of the Merchant for a cart
      description: "Verifies the decision of the merchant for a specified cart, and\
        \ stores information of the PaymentSubscriptionResult for the cart. \n\nNote,\
        \ the “Try it out” button is not enabled for this method (always returns an\
        \ error) because the Merchant Callback Controller handles parameters differently,\
        \ depending on which payment provider is used. For more information about\
        \ this controller, please refer to the “acceleratorocc AddOn” documentation\
        \ on help.hybris.com."
      operationId: doHandleCartMerchantCallback
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/ivr/order:
    post:
      tags:
      - IVR
      summary: getIvrOrder
      operationId: getIvrOrderUsingPOST
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      requestBody:
        description: ctcIvrOrderRequest
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                type: object
            application/json:
              schema:
                type: object
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: ctcIvrOrderRequest
  /{baseSiteId}/languages:
    get:
      tags:
      - Miscs
      summary: Get a list of available languages.
      description: Lists all available languages (all languages used for a particular
        store). If the list of languages for a base store is empty, a list of all
        languages available in the system will be returned.
      operationId: getLanguages
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/LanguageList'
            application/json:
              schema:
                $ref: '#/components/schemas/LanguageList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/messagecenter/im/conversations:
    post:
      tags:
      - Message Center
      summary: Sends messages
      description: Sends messages in a conversation and returns the conversation data.
      operationId: sendMessageUsingPOST
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      requestBody:
        description: the list of messages
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/conversationMessageList'
        required: true
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/conversation'
            application/json:
              schema:
                $ref: '#/components/schemas/conversation'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: conversationMessageList
  /{baseSiteId}/messagecenter/im/conversations/agentconversations:
    get:
      tags:
      - Message Center
      summary: Gets unassigned or open conversations for current CSA
      description: Returns unassigned or open conversation list for current CSA.
      operationId: getConversationsForAgentUsingGET
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: status
        in: query
        description: the conversation status
        required: true
        allowEmptyValue: false
        schema:
          type: string
          enum:
          - open
          - unassigned
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/conversationList'
            application/json:
              schema:
                $ref: '#/components/schemas/conversationList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/messagecenter/im/conversations/customerconversations:
    get:
      tags:
      - Message Center
      summary: Gets conversations of current customer
      description: Returns the conversation list of current customer.
      operationId: getConversationsForCustomerUsingGET
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/conversationList'
            application/json:
              schema:
                $ref: '#/components/schemas/conversationList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/messagecenter/im/conversations/{conversationId}/close:
    patch:
      tags:
      - Message Center
      summary: Closes an open conversation
      description: Closes an open conversation and returns the conversation data.
      operationId: closeConversationUsingPATCH
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: conversationId
        in: path
        description: the uid of conversation
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/conversation'
            application/json:
              schema:
                $ref: '#/components/schemas/conversation'
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/messagecenter/im/conversations/{conversationId}/messages:
    get:
      tags:
      - Message Center
      summary: Gets conversation messages for current customer or current CSA
      description: Returns all messages of a specific conversation.
      operationId: getMessagesForConversationUsingGET
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: conversationId
        in: path
        description: the uid of conversation
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/conversationMessageList'
            application/json:
              schema:
                $ref: '#/components/schemas/conversationMessageList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/messagecenter/im/conversations/{conversationId}/pick:
    patch:
      tags:
      - Message Center
      summary: Picks an unassigned conversation
      description: Picks an unassigned conversation and returns the conversation data.
      operationId: pickConversationUsingPATCH
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: conversationId
        in: path
        description: the uid of conversation
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/conversation'
            application/json:
              schema:
                $ref: '#/components/schemas/conversation'
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/migration/migrateImpex:
    get:
      tags:
      - Migration
      summary: performImpexMigration
      operationId: performImpexMigrationUsingGET
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        202:
          description: Accepted
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/migration/repairImpex:
    get:
      tags:
      - Migration
      summary: repairImpexMigration
      operationId: repairImpexMigrationUsingGET
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        202:
          description: Accepted
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/narvar/shipment:
    post:
      tags:
      - CTCNarvar
      summary: updateNarvarOrder
      operationId: updateNarvarOrderUsingPOST
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      requestBody:
        description: ctcNarvarRequest
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: ctcNarvarRequest
  /{baseSiteId}/orderforms:
    get:
      tags:
      - order-forms-controller
      summary: getOrderFormsForCurrentUser
      operationId: getOrderFormsForCurrentUserUsingGET
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: fields
        schema:
          type: string
          default: DEFAULT
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/OrderFormList'
            application/json:
              schema:
                $ref: '#/components/schemas/OrderFormList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    post:
      tags:
      - order-forms-controller
      summary: createOrderForm
      operationId: createOrderFormUsingPOST
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      requestBody:
        description: orderFormWsDTO
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/OrderForm'
          application/json:
            schema:
              $ref: '#/components/schemas/OrderForm'
        required: true
      responses:
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: orderFormWsDTO
  /{baseSiteId}/orderforms/{orderFormCode}:
    get:
      tags:
      - order-forms-controller
      summary: getOrderFormForCode
      operationId: getOrderFormForCodeUsingGET
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: fields
        schema:
          type: string
          default: DEFAULT
      - name: orderFormCode
        in: path
        description: orderFormCode
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/OrderForm'
            application/json:
              schema:
                $ref: '#/components/schemas/OrderForm'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    put:
      tags:
      - order-forms-controller
      summary: updateOrderForm
      operationId: updateOrderFormUsingPUT
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: fields
        schema:
          type: string
          default: DEFAULT
      - name: orderFormCode
        in: path
        description: orderFormCode
        required: true
        schema:
          type: string
      requestBody:
        description: orderFormWsDTO
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderForm'
        required: true
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/OrderForm'
            application/json:
              schema:
                $ref: '#/components/schemas/OrderForm'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: orderFormWsDTO
    delete:
      tags:
      - order-forms-controller
      summary: deleteOrderForm
      operationId: deleteOrderFormUsingDELETE
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: orderFormCode
        in: path
        description: orderFormCode
        required: true
        schema:
          type: string
      responses:
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/orderforms/{orderFormCode}/cart:
    post:
      tags:
      - order-forms-controller
      summary: orderForm
      operationId: orderFormUsingPOST
      parameters:
      - name: baseSiteId
        in: path
        description: baseSiteId
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: fields
        schema:
          type: string
          default: DEFAULT
      - name: orderFormCode
        in: path
        description: orderFormCode
        required: true
        schema:
          type: string
      responses:
        201:
          description: Created
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/orders/{code}:
    get:
      tags:
      - Orders
      summary: Get a order.
      description: Returns details of a specific order based on the order GUID (Globally
        Unique Identifier) or the order CODE. The response contains detailed order
        information.
      operationId: getOrder
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: code
        in: path
        description: Order GUID (Globally Unique Identifier) or order CODE
        required: true
        schema:
          type: string
      - name: emailId
        in: query
        description: Request query paramater to include the collector email.
        allowEmptyValue: false
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/orders/{code}/addLoyaltyNumber:
    patch:
      tags:
      - Orders
      summary: Update loyalty Card number in orderModel.
      description: Update loyalty Card number in orderModel.
      operationId: Add Loyalty Card Number in orderModel
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: code
        in: path
        description: Order Code
        required: true
        schema:
          type: string
      - name: loyaltyNumber
        in: query
        description: Loyalty Number
        required: true
        allowEmptyValue: false
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/orders/{code}/guid:
    get:
      tags:
      - Orders
      summary: Get order guid
      description: Get order guid
      operationId: getOrderGuid
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: code
        in: path
        description: Order code
        required: true
        schema:
          type: string
      - name: email
        in: query
        description: Customer email
        required: true
        allowEmptyValue: false
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/paymentmodes:
    get:
      tags:
      - Payment Modes
      summary: Gets all available payment modes.
      description: Gets all payment modes defined for the base store.
      operationId: getPaymentModes
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/PaymentModeList'
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentModeList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/pos/orders/complete/{orderNumber}:
    post:
      tags:
      - POS
      summary: Pos order complete.
      description: Perform POS completion call. Change order status to READY_FOR_PICKUP.
      operationId: completeOrder
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: orderNumber
        in: path
        description: orderNumber
        required: true
        schema:
          type: string
      requestBody:
        description: completeOrderParameter
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CtcPosCompleteParameter'
        required: true
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CtcPosCompleteOrder'
            application/json:
              schema:
                $ref: '#/components/schemas/CtcPosCompleteOrder'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: completeOrderParameter
  /{baseSiteId}/pos/orders/consignments/{repairOrderNumber}:
    get:
      tags:
      - POS
      summary: POS Get ETires consignment.
      description: Gets order information.
      operationId: getETiresConsignment
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: code
        in: query
        description: 13 digits of order code
        schema:
          type: string
      - name: language
        in: query
        description: Language ('E' or 'F')
        schema:
          type: string
      - name: location
        in: query
        description: 5 digits of location
        schema:
          type: string
      - name: operatorId
        in: query
        description: 10 signs of operator ID
        schema:
          type: string
      - name: repairOrderNumber
        in: path
        description: repairOrderNumber
        required: true
        schema:
          type: string
      - name: terminalId
        in: query
        description: 4 digits of terminal ID
        schema:
          type: string
      - name: timestamp
        in: query
        description: Timestamp in 'YYYY-MM-DDhh:mm:ss' format
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CtcPosOrder'
            application/json:
              schema:
                $ref: '#/components/schemas/CtcPosOrder'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/pos/orders/deliveryFees/{orderNumber}:
    get:
      tags:
      - POS
      summary: getDeliveryFees
      operationId: getDeliveryFeesUsingGET
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: code
        in: query
        description: 13 digits of order code
        schema:
          type: string
      - name: language
        in: query
        description: Language ('E' or 'F')
        schema:
          type: string
      - name: location
        in: query
        description: 5 digits of location
        schema:
          type: string
      - name: operatorId
        in: query
        description: 10 signs of operator ID
        schema:
          type: string
      - name: orderNumber
        in: path
        description: orderNumber
        required: true
        schema:
          type: string
      - name: originalPosTransactionId
        in: query
        schema:
          type: string
      - name: terminalId
        in: query
        description: 4 digits of terminal ID
        schema:
          type: string
      - name: timestamp
        in: query
        description: Timestamp in 'YYYY-MM-DDhh:mm:ss' format
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CtcGenericPosOrder'
            application/json:
              schema:
                $ref: '#/components/schemas/CtcGenericPosOrder'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/pos/orders/returnNew/{orderNumber}:
    post:
      tags:
      - POS
      summary: Pos order return.
      description: Perform POS refund call.
      operationId: returnOrder
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: orderNumber
        in: path
        description: orderNumber
        required: true
        schema:
          type: string
      requestBody:
        description: returnOrderParameter
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CtcPosOrderAwareParameter'
        required: true
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CtcGenericPosOrder'
            application/json:
              schema:
                $ref: '#/components/schemas/CtcGenericPosOrder'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: returnOrderParameter
  /{baseSiteId}/pos/orders/voidreturn/{voidTransactionId}:
    post:
      tags:
      - POS
      summary: Pos Void Return.
      description: Perform POS Void Return call.
      operationId: voidreturn
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: voidTransactionId
        in: path
        description: voidTransactionId
        required: true
        schema:
          type: string
      requestBody:
        description: voidReturnOrderParameterWsDTO
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CtcVoidReturnOrderParameter'
        required: true
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CtcGenericPosResult'
            application/json:
              schema:
                $ref: '#/components/schemas/CtcGenericPosResult'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: voidReturnOrderParameterWsDTO
  /{baseSiteId}/pos/orders/{orderID}/products/{itemNumber}/linestatus:
    get:
      tags:
      - POS
      summary: Order Line Status
      description: Perform Order Line Status call.
      operationId: linestatus
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: itemNumber
        in: path
        description: itemNumber
        required: true
        schema:
          type: string
      - name: language
        in: query
        schema:
          type: string
      - name: location
        in: query
        description: location
        schema:
          type: string
      - name: location
        in: query
        schema:
          type: string
      - name: operatorId
        in: query
        schema:
          type: string
      - name: orderID
        in: path
        description: orderID
        required: true
        schema:
          type: string
      - name: terminalId
        in: query
        schema:
          type: string
      - name: timestamp
        in: query
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CtcPosOrderEntry'
            application/json:
              schema:
                $ref: '#/components/schemas/CtcPosOrderEntry'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/pos/orders/{orderNumber}:
    get:
      tags:
      - POS
      summary: Get Pos order details.
      description: Get order information by order code and additional request parameters.
      operationId: getPosOrder
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: code
        in: query
        description: 13 digits of order code
        schema:
          type: string
      - name: language
        in: query
        description: Language ('E' or 'F')
        schema:
          type: string
      - name: location
        in: query
        description: 5 digits of location
        schema:
          type: string
      - name: operatorId
        in: query
        description: 10 signs of operator ID
        schema:
          type: string
      - name: orderNumber
        in: path
        description: Order number
        required: true
        schema:
          type: string
      - name: terminalId
        in: query
        description: 4 digits of terminal ID
        schema:
          type: string
      - name: timestamp
        in: query
        description: Timestamp in 'YYYY-MM-DDhh:mm:ss' format
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CtcPosOrder'
            application/json:
              schema:
                $ref: '#/components/schemas/CtcPosOrder'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/pos/orders/{orderNumber}/consignments/complete/{repairOrderNumber}:
    post:
      tags:
      - POS
      summary: completeOrder
      operationId: completeOrderUsingPOST
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: orderNumber
        in: path
        description: orderNumber
        required: true
        schema:
          type: string
      - name: repairOrderNumber
        in: path
        description: repairOrderNumber
        required: true
        schema:
          type: string
      requestBody:
        description: cmpOrderParameter
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteOrderConsignmentParameter'
        required: true
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CtcPosCompleteOrder'
            application/json:
              schema:
                $ref: '#/components/schemas/CtcPosCompleteOrder'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: cmpOrderParameter
  /{baseSiteId}/price/thresholdValues:
    get:
      tags:
      - Price
      summary: Get a list of threshold values.
      description: Lists all price badge specific threshold values
      operationId: getThresholdValues
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CtcThresholdValues'
            application/json:
              schema:
                $ref: '#/components/schemas/CtcThresholdValues'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/products/expressupdate:
    get:
      tags:
      - CtcProducts
      summary: Get products added to the express update feed.
      description: Returns products added to the express update feed. Returns only
        elements updated after the provided timestamp. The queue is cleared using
        a defined cronjob.
      operationId: getExpressUpdateProducts
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: catalog
        in: query
        description: 'Only products from this catalog are returned. Format: catalogId:catalogVersion'
        allowEmptyValue: false
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: timestamp
        in: query
        description: Only items newer than the given parameter are retrieved from
          the queue. This parameter should be in ISO-8601 format.
        required: true
        allowEmptyValue: false
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ProductExpressUpdateElementList'
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExpressUpdateElementList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/products/productsList/base:
    post:
      tags:
      - CtcProducts
      summary: getBaseProductListDetails
      operationId: getBaseProductListDetailsUsingPOST
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      requestBody:
        description: productsRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CtcProductsRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CtcBaseProductListDto'
            application/json:
              schema:
                $ref: '#/components/schemas/CtcBaseProductListDto'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: productsRequest
  /{baseSiteId}/products/productsList/variant:
    post:
      tags:
      - CtcProducts
      summary: getVariantProductListDetails
      operationId: getVariantProductListDetailsUsingPOST
      parameters: 
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      requestBody:
        description: productsRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CtcProductsRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CtcVariantProductListDto'
            application/json:
              schema:
                $ref: '#/components/schemas/CtcVariantProductListDto'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: productsRequest
  /{baseSiteId}/products/search:
    get:
      tags:
      - CtcProducts
      summary: Get a list of products and additional data
      description: Returns a list of products and additional data, such as available
        facets, available sorting, and pagination options. It can also include spelling
        suggestions. To make spelling suggestions work, you need to make sure that
        "enableSpellCheck" on the SearchQuery is set to "true" (by default, it should
        already be set to "true"). You also need to have indexed properties configured
        to be used for spellchecking.
      operationId: getProducts
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: currentPage
        in: query
        description: The current result page requested.
        allowEmptyValue: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: pageSize
        in: query
        description: The number of results returned per page.
        allowEmptyValue: false
        schema:
          type: integer
          format: int32
          default: 20
      - name: query
        in: query
        description: 'Serialized query, free text search, facets. The format of a
          serialized query: freeTextSearch:sort:facetKey1:facetValue1:facetKey2:facetValue2'
        allowEmptyValue: false
        schema:
          type: string
      - name: searchQueryContext
        in: query
        description: The context to be used in the search query.
        allowEmptyValue: false
        schema:
          type: string
      - name: sort
        in: query
        description: Sorting method applied to the return results.
        allowEmptyValue: false
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ProductSearchPage'
            application/json:
              schema:
                $ref: '#/components/schemas/ProductSearchPage'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    head:
      tags:
      - CtcProducts
      summary: Get a header with total number of products.
      description: In the response header, the "x-total-count" indicates the total
        number of products satisfying a query.
      operationId: countProducts
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: query
        in: query
        description: 'Serialized query, free text search, facets. The format of a
          serialized query: freeTextSearch:sort:facetKey1:facetValue1:facetKey2:facetValue2'
        allowEmptyValue: false
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/products/suggestions:
    get:
      tags:
      - CtcProducts
      summary: Get a list of available suggestions
      description: Returns a list of all available suggestions related to a given
        term and limits the results to a specific value of the max parameter.
      operationId: getSuggestions
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: max
        in: query
        description: Specifies the limit of results.
        allowEmptyValue: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: term
        in: query
        description: Specified term
        required: true
        allowEmptyValue: false
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/SuggestionList'
            application/json:
              schema:
                $ref: '#/components/schemas/SuggestionList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/products/{productCode}:
    get:
      tags:
      - CtcProducts
      summary: Get product details
      description: Returns details of a single product according to a product code
      operationId: getProduct
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: baseStoreId
        in: query
        description: Request query paramater to include the Base Store Id
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: productCode
        in: path
        description: Product identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ctcProduct'
            application/json:
              schema:
                $ref: '#/components/schemas/ctcProduct'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/products/{productCode}/base:
    get:
      tags:
      - CtcProducts
      summary: getBaseProductDetails
      operationId: getBaseProductDetailsUsingGET
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: productCode
        in: path
        description: productCode
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CtcBaseProductDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/CtcBaseProductDetails'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/products/{productCode}/estimatedDeliveryDate:
    get:
      tags:
      - CtcProducts
      summary: Get estimated delivery date range for provided product and quantity
      description: Returns estimated delivery date range for provided product and
        quantity
      operationId: getProductDeliveryDate
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: destinationPostalCode
        in: query
        description: Destination postal code
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: productCode
        in: path
        description: Product identifier
        required: true
        schema:
          type: string
      - name: quantity
        in: query
        description: Quantity selected
        allowEmptyValue: false
        schema:
          type: integer
          format: int32
          default: 1
      - name: storeName
        in: query
        description: Store name
        required: true
        allowEmptyValue: false
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CtcDeliveryDateRange'
            application/json:
              schema:
                $ref: '#/components/schemas/CtcDeliveryDateRange'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/products/{productCode}/references:
    get:
      tags:
      - CtcProducts
      summary: Get a product reference
      description: Returns references for a product with a given product code. Reference
        type specifies which references to return.
      operationId: getProductReferences
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: pageSize
        in: query
        description: Maximum size of returned results.
        allowEmptyValue: false
        schema:
          type: integer
          format: int32
          default: 2147483647
      - name: productCode
        in: path
        description: Product identifier
        required: true
        schema:
          type: string
      - name: referenceType
        in: query
        description: Comma-separated list of reference types according to enum ProductReferenceTypeEnum.
          If not specified, all types of product references will be used.
        allowEmptyValue: false
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ProductReferenceList'
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReferenceList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/products/{productCode}/reviews:
    get:
      tags:
      - CtcProducts
      summary: Get reviews for a product
      description: Returns the reviews for a product with a given product code.
      operationId: getProductReviews
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: maxCount
        in: query
        description: Maximum count of reviews
        allowEmptyValue: false
        schema:
          type: integer
          format: int32
      - name: productCode
        in: path
        description: Product identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ReviewList'
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    post:
      tags:
      - CtcProducts
      summary: Creates a new customer review as an anonymous user.
      description: Creates a new customer review as an anonymous user.
      operationId: createProductReview
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: productCode
        in: path
        description: Product identifier
        required: true
        schema:
          type: string
      requestBody:
        description: 'Object contains review details like : rating, alias, headline,
          comment'
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Review'
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
        required: true
      responses:
        201:
          description: Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Review'
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: review
  /{baseSiteId}/products/{productCode}/shippingFee:
    get:
      tags:
      - CtcProducts
      summary: Get shipping fee for provided product and quantity
      description: Returns shipping fee for provided product and quantity
      operationId: getProductShippingFee
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: bulkZoneId
        in: query
        description: Bulk Zone Id
        allowEmptyValue: false
        schema:
          type: string
      - name: parcelZoneId
        in: query
        description: Parcel Zone Id
        allowEmptyValue: false
        schema:
          type: string
      - name: productCode
        in: path
        description: Product identifier
        required: true
        schema:
          type: string
      - name: quantity
        in: query
        description: Quantity selected
        allowEmptyValue: false
        schema:
          type: integer
          format: int32
          default: 1
      - name: storeDistance
        in: query
        description: Store Distance for provided postalCode & store
        allowEmptyValue: false
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CtcProductShippingFee'
            application/json:
              schema:
                $ref: '#/components/schemas/CtcProductShippingFee'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/products/{productCode}/shippingFeeFromCarrier:
    get:
      tags:
      - CtcProducts
      summary: Get shipping fee for provided product and quantity from carrier
      description: Returns shipping fee for provided product and quantity
      operationId: getProductShippingFeeFromCarrier
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: destinationPostalCode
        in: query
        description: Destination postal code
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: productCode
        in: path
        description: Product identifier
        required: true
        schema:
          type: string
      - name: quantity
        in: query
        description: Quantity selected
        required: true
        allowEmptyValue: false
        schema:
          type: integer
          format: int32
          default: 1
      - name: storeName
        in: query
        description: Store name
        required: true
        allowEmptyValue: false
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CtcProductShippingFee'
            application/json:
              schema:
                $ref: '#/components/schemas/CtcProductShippingFee'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/products/{productCode}/stock:
    get:
      tags:
      - CtcProducts
      summary: Get a product's stock level.
      description: 'Returns a product''s stock levels sorted by distance from the
        specified location, which is provided using the free-text "location" parameter,
        or by using the longitude and latitude parameters. The following two sets
        of parameters are available: location (required), currentPage (optional),
        pageSize (optional); or longitude (required), latitude (required), currentPage
        (optional), pageSize(optional).'
      operationId: getLocationProductStock
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: currentPage
        in: query
        description: The current result page requested.
        allowEmptyValue: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: latitude
        in: query
        description: Latitude location parameter.
        allowEmptyValue: false
        schema:
          type: number
          format: double
      - name: location
        in: query
        description: Free-text location
        allowEmptyValue: false
        schema:
          type: string
      - name: longitude
        in: query
        description: Longitude location parameter.
        allowEmptyValue: false
        schema:
          type: number
          format: double
      - name: pageSize
        in: query
        description: The number of results returned per page.
        allowEmptyValue: false
        schema:
          type: integer
          format: int32
          default: 20
      - name: productCode
        in: path
        description: Product identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/StoreFinderStockSearchPage'
            application/json:
              schema:
                $ref: '#/components/schemas/StoreFinderStockSearchPage'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    head:
      tags:
      - CtcProducts
      summary: Get header with a total number of product's stock levels.
      description: 'In the response header, the "x-total-count" indicates the total
        number of a product''s stock levels. The following two sets of parameters
        are available: location (required); or longitude (required), and latitude
        (required).'
      operationId: countProductStockByLocation
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: latitude
        in: query
        description: Latitude location parameter.
        allowEmptyValue: false
        schema:
          type: number
          format: double
      - name: location
        in: query
        description: Free-text location
        allowEmptyValue: false
        schema:
          type: string
      - name: longitude
        in: query
        description: Longitude location parameter.
        allowEmptyValue: false
        schema:
          type: number
          format: double
      - name: productCode
        in: path
        description: Product identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/products/{productCode}/stock/{storeName}:
    get:
      tags:
      - CtcProducts
      summary: Get a product's stock level for a store
      description: Returns a product's stock level for a particular store (in other
        words, for a particular point of sale).
      operationId: getStoreProductStock
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: productCode
        in: path
        description: Product identifier
        required: true
        schema:
          type: string
      - name: storeName
        in: path
        description: Store identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Stock'
            application/json:
              schema:
                $ref: '#/components/schemas/Stock'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/products/{productCode}/variant:
    get:
      tags:
      - CtcProducts
      summary: getVariantProductDetails
      operationId: getVariantProductDetailsUsingGET
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: productCode
        in: path
        description: productCode
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CtcVariantProductDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/CtcVariantProductDetails'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/promotions:
    get:
      tags:
      - Promotions
      summary: Get a list of promotions.
      description: Returns promotions defined for a current base site. Requests pertaining
        to promotions have been developed for the previous version of promotions and
        vouchers and therefore some of them are currently not compatible with the
        new promotion engine.
      operationId: getPromotions
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: BASIC
      - name: promotionGroup
        in: query
        description: Only promotions from this group are returned
        allowEmptyValue: false
        schema:
          type: string
      - name: type
        in: query
        description: 'Defines what type of promotions should be returned. Values supported
          for that parameter are: <ul><li>all: All available promotions are returned</li><li>product:
          Only product promotions are returned</li><li>order: Only order promotions
          are returned</li></ul>'
        required: true
        allowEmptyValue: false
        schema:
          type: string
          enum:
          - all
          - product
          - order
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/PromotionList'
            application/json:
              schema:
                $ref: '#/components/schemas/PromotionList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/promotions/{code}:
    get:
      tags:
      - Promotions
      summary: Get a promotion based on code
      description: Returns details of a single promotion specified by a promotion
        code. Requests pertaining to promotions have been developed for the previous
        version of promotions and vouchers and therefore some of them are currently
        not compatible with the new promotion engine.
      operationId: getPromotion
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: code
        in: path
        description: Promotion identifier (code)
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: BASIC
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Promotion'
            application/json:
              schema:
                $ref: '#/components/schemas/Promotion'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/receipts/status/sync:
    post:
      tags:
      - vPos receipts operations
      summary: Syncs statuses of vPos receipts
      description: Syncs statuses of vPos receipts
      operationId: syncReceiptsStatusUsingPOST
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      requestBody:
        description: DTO that contains consigments code for which receipts should
          be synced and receipt type
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CtcSyncReceiptState'
        required: false
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                type: array
                items:
                  type: string
            application/json:
              schema:
                type: array
                items:
                  type: string
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: ctcSyncReceiptStateWsDto
  /{baseSiteId}/resetpassword:
    post:
      tags:
      - Forgotten Passwords
      summary: Reset password after customer's clicked forgotten password link.
      description: Reset password after customer's clicked forgotten password link.
      operationId: doResetPassword
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      requestBody:
        description: Request body parameter that contains details such as token and
          new password
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/ResetPassword'
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPassword'
        required: true
      responses:
        201:
          description: Created
          content: {}
        202:
          description: Accepted
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: resetPassword
  /{baseSiteId}/sle/options:
    get:
      tags:
      - ctc-sle-configuration-controller
      summary: Get enabled global SLE configurations.
      description: Gets enabled global SLE configurations.
      operationId: getSleOptions
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CtcSleConfigurationData'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CtcSleConfigurationData'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/stores:
    get:
      tags:
      - CtcStores
      summary: Get a list of store locations
      description: new Lists all store locations that are near the location specified
        in a query or based on latitude and longitude.
      operationId: getStoreLocations
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: currentPage
        in: query
        description: The current result page requested.
        allowEmptyValue: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: fields
        in: query
        description: Response configuration. This is the list of fields that should
          be returned in the response body.
        allowEmptyValue: false
        schema:
          type: string
          default: DEFAULT
          enum:
          - BASIC
          - DEFAULT
          - FULL
      - name: filterCriteria
        in: query
        description: 'Array of store services that each store must possess in order
          to be returned in the search results. Currently possible enum values for
          CTR are: CTR_STORE, CTR_PITSTOP, CTR_PROPANEFILL_OR_SWAP, CTR_GASBAR, CTR_DIESEL,
          CTR_CARWASH.'
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: latitude
        in: query
        description: Coordinate that specifies the north-south position of a point
          on the Earth's surface.
        allowEmptyValue: false
        schema:
          type: number
          format: double
      - name: longitude
        in: query
        description: Coordinate that specifies the east-west position of a point on
          the Earth's surface.
        allowEmptyValue: false
        schema:
          type: number
          format: double
      - name: maxResults
        in: query
        description: The number of Stores requested to return.If the number is zero
          or less than, then it will show default store i.e 48.Maximum 48 stores can
          be shown.You can set maximum stores value to be shown in HAC
        allowEmptyValue: false
        schema:
          type: integer
          format: int32
          default: 25
      - name: radius
        in: query
        description: 'Radius in meters. Max value: 40075000.0 (Earth''s perimeter).'
        allowEmptyValue: false
        schema:
          type: number
          format: double
          default: 0.0
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/StoreFinderSearchPage'
            application/json:
              schema:
                $ref: '#/components/schemas/StoreFinderSearchPage'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    head:
      tags:
      - CtcStores
      summary: Get a header with the number of store locations.
      description: In the response header, the "x-total-count" indicates the number
        of all store locations that are near the location specified in a query, or
        based on latitude and longitude.
      operationId: countStoreLocations
      parameters:
      - name: accuracy
        in: query
        description: Accuracy in meters.
        allowEmptyValue: false
        schema:
          type: number
          format: double
          default: 0.0
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: latitude
        in: query
        description: Coordinate that specifies the north-south position of a point
          on the Earth's surface.
        allowEmptyValue: false
        schema:
          type: number
          format: double
      - name: longitude
        in: query
        description: Coordinate that specifies the east-west position of a point on
          the Earth's surface.
        allowEmptyValue: false
        schema:
          type: number
          format: double
      - name: query
        in: query
        description: Location in natural language i.e. city or country.
        allowEmptyValue: false
        schema:
          type: string
      - name: radius
        in: query
        description: 'Radius in meters. Max value: 40075000.0 (Earth''s perimeter).'
        allowEmptyValue: false
        schema:
          type: number
          format: double
          default: 100000.0
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/stores/country/{countryIso}:
    get:
      tags:
      - CtcStores
      summary: Get a list of store locations for a given country
      description: Lists all store locations that are in the specified country.
      operationId: getStoresByCountry
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: countryIso
        in: path
        description: Country ISO code
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/PointOfServiceList'
            application/json:
              schema:
                $ref: '#/components/schemas/PointOfServiceList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/stores/country/{countryIso}/region/{regionIso}:
    get:
      tags:
      - CtcStores
      summary: Get a list of store locations for a given country and region
      description: Lists all store locations that are in the specified country and
        region.
      operationId: getStoresByCountryAndRegion
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: countryIso
        in: path
        description: Country ISO code
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: regionIso
        in: path
        description: Region ISO code
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ctcStoreList'
            application/json:
              schema:
                $ref: '#/components/schemas/ctcStoreList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/stores/eta:
    post:
      tags:
      - CtcStores
      summary: getStoresCtcEta
      operationId: getStoresCtcEtaUsingPOST
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      requestBody:
        description: 'Request body parameter that contains list of StoresMinMaxEta '
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CtcStoresMinMaxEtaRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CtcStoresMinMaxEtaResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/CtcStoresMinMaxEtaResponse'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: storesMinMaxEtaRequestWsDto
  /{baseSiteId}/stores/inStoreCartEta/{store}:
    get:
      tags:
      - CtcStores
      summary: getInStoreCtcEta
      operationId: getInStoreCtcEtaUsingGET
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: maxEta
        in: query
        description: maxEta
        required: true
        allowEmptyValue: false
        schema:
          type: integer
          format: int32
      - name: minEta
        in: query
        description: minEta
        required: true
        allowEmptyValue: false
        schema:
          type: integer
          format: int32
      - name: source
        in: header
        description: source
        schema:
          type: string
          default: CDS
          enum:
          - CDS
          - SFS
      - name: store
        in: path
        description: Store id
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CtcEtaDateMap'
            application/json:
              schema:
                $ref: '#/components/schemas/CtcEtaDateMap'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/stores/locatorFilters:
    get:
      tags:
      - CtcStores
      summary: Get a list of store locator Filters
      description: Lists all store Locators which are available in ctc store
      operationId: locatorFilters
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/StoreLocatorFilterList'
            application/json:
              schema:
                $ref: '#/components/schemas/StoreLocatorFilterList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/stores/storescounts:
    get:
      tags:
      - CtcStores
      summary: Gets a store location count per country and regions
      description: Returns store counts in countries and regions
      operationId: getLocationCounts
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/StoreCountList'
            application/json:
              schema:
                $ref: '#/components/schemas/StoreCountList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/stores/{storeId}:
    get:
      tags:
      - CtcStores
      summary: Get a store details
      description: Returns store details based on storeId
      operationId: getStoreLocation
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: storeId
        in: path
        description: Store identifier (currently store name)
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ctcStore'
            application/json:
              schema:
                $ref: '#/components/schemas/ctcStore'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/stores/{storeId}/distanceEligibility:
    get:
      tags:
      - CtcStores
      summary: Get distance eligibility for express delivery.
      description: Checks the express delivery eligibility for a store concerning
        a distance from a provided postal code to this store.
      operationId: getDistanceEligibilityForEd
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier.
        required: true
        schema:
          type: string
      - name: storeDistance
        in: query
        description: Store Distance for provided postalCode & store
        allowEmptyValue: false
        schema:
          type: integer
          format: int32
      - name: storeId
        in: path
        description: Store identifier (currently store name)
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CtcEdEligibility'
            application/json:
              schema:
                $ref: '#/components/schemas/CtcEdEligibility'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/titles:
    get:
      tags:
      - Miscs
      summary: Get a list of all localized titles.
      description: Lists all localized titles.
      operationId: getTitles
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/TitleList'
            application/json:
              schema:
                $ref: '#/components/schemas/TitleList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users:
    post:
      tags:
      - Users
      summary: ' Registers a customer'
      description: 'Registers a customer. Requires the following parameters: login,
        password, firstName, lastName, titleCode.'
      operationId: createUser
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      requestBody:
        description: User's object.
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/UserSignUp'
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignUp'
        required: true
      responses:
        201:
          description: Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: user
  /{baseSiteId}/users/{userId}:
    get:
      tags:
      - Users
      summary: Get customer profile
      description: Returns customer profile.
      operationId: getUser
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    put:
      tags:
      - Users
      summary: Updates customer profile
      description: Updates customer profile. Attributes not provided in the request
        body will be defined again (set to null or default).
      operationId: replaceUser
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      requestBody:
        description: User's object
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: user
    delete:
      tags:
      - Users
      summary: Delete customer profile.
      description: Removes customer profile.
      operationId: removeUser
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    patch:
      tags:
      - Users
      summary: Updates customer profile
      description: Updates customer profile. Only attributes provided in the request
        body will be changed.
      operationId: updateUser
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      requestBody:
        description: User's object.
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: user
  /{baseSiteId}/users/{userId}/addresses:
    get:
      tags:
      - Address
      summary: Get customer's addresses
      description: Returns customer's addresses.
      operationId: getAddresses
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/AddressList'
            application/json:
              schema:
                $ref: '#/components/schemas/AddressList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    post:
      tags:
      - Address
      summary: Creates a new address.
      description: Creates a new address.
      operationId: createAddress
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      requestBody:
        description: Address object.
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Address'
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
        required: true
      responses:
        201:
          description: Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Address'
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: address
  /{baseSiteId}/users/{userId}/addresses/verification:
    post:
      tags:
      - Address
      summary: Verifies address.
      description: Verifies address.
      operationId: validateAddress
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      requestBody:
        description: Address object.
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Address'
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
        required: true
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/AddressValidation'
            application/json:
              schema:
                $ref: '#/components/schemas/AddressValidation'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: address
  /{baseSiteId}/users/{userId}/addresses/{addressId}:
    get:
      tags:
      - Address
      summary: Get info about address
      description: Returns detailed information about address with a given id.
      operationId: getAddress
      parameters:
      - name: addressId
        in: path
        description: Address identifier.
        required: true
        schema:
          type: string
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Address'
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    put:
      tags:
      - Address
      summary: Updates the address
      description: Updates the address. Attributes not provided in the request will
        be defined again (set to null or default).
      operationId: replaceAddress
      parameters:
      - name: addressId
        in: path
        description: Address identifier.
        required: true
        schema:
          type: string
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      requestBody:
        description: Address object.
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Address'
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
        required: true
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: address
    delete:
      tags:
      - Address
      summary: Delete customer's address.
      description: Removes customer's address.
      operationId: removeAddress
      parameters:
      - name: addressId
        in: path
        description: Address identifier.
        required: true
        schema:
          type: string
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    patch:
      tags:
      - Address
      summary: Updates the address
      description: Updates the address. Only attributes provided in the request body
        will be changed.
      operationId: updateAddress
      parameters:
      - name: addressId
        in: path
        description: Address identifier.
        required: true
        schema:
          type: string
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      requestBody:
        description: Address object
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Address'
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
        required: true
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: address
  /{baseSiteId}/users/{userId}/carts:
    get:
      tags:
      - Carts
      summary: Get all customer carts.
      description: Lists all customer carts.
      operationId: getCarts
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: currentPage
        in: query
        description: Optional pagination parameter in case of savedCartsOnly == true.
          Default value 0.
        allowEmptyValue: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: fields
        in: query
        description: Response configuration. This is the list of fields that should
          be returned in the response body.
        allowEmptyValue: false
        schema:
          type: string
          default: DEFAULT
          enum:
          - BASIC
          - DEFAULT
          - FULL
      - name: pageSize
        in: query
        description: Optional {@link PaginationData} parameter in case of savedCartsOnly
          == true. Default value 20.
        allowEmptyValue: false
        schema:
          type: integer
          format: int32
          default: 20
      - name: savedCartsOnly
        in: query
        description: Optional parameter. If the parameter is provided and its value
          is true, only saved carts are returned.
        allowEmptyValue: false
        schema:
          type: boolean
          default: false
      - name: sort
        in: query
        description: Optional sort criterion in case of savedCartsOnly == true. No
          default value.
        allowEmptyValue: false
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CartList'
            application/json:
              schema:
                $ref: '#/components/schemas/CartList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    post:
      tags:
      - Carts
      summary: Creates or restore a cart for a user.
      description: Creates a new cart or restores an anonymous cart as a user's cart
        (if an old Cart Id is given in the request).
      operationId: createCart
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: entriesSelected
        in: query
        description: Entries selected to be merged in the anonymous cart
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      - name: fields
        in: query
        description: Response configuration. This is the list of fields that should
          be returned in the response body.
        allowEmptyValue: false
        schema:
          type: string
          default: DEFAULT
          enum:
          - BASIC
          - DEFAULT
          - FULL
      - name: oldCartId
        in: query
        description: Anonymous cart GUID.
        allowEmptyValue: false
        schema:
          type: string
      - name: toMergeCartGuid
        in: query
        description: The GUID of the user's cart that will be merged with the anonymous
          cart.
        allowEmptyValue: false
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        201:
          description: Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Cart'
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/carts/{cartId}:
    get:
      tags:
      - Carts
      summary: Get a cart with a given identifier.
      description: Returns the cart with a given identifier.
      operationId: getCart
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: Response configuration. This is the list of fields that should
          be returned in the response body.
        allowEmptyValue: false
        schema:
          type: string
          default: DEFAULT
          enum:
          - BASIC
          - DEFAULT
          - FULL
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Cart'
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    delete:
      tags:
      - Carts
      summary: Deletes a cart with a given cart id.
      description: Deletes a cart with a given cart id.
      operationId: removeCart
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/carts/{cartId}/addresses/delivery:
    put:
      tags:
      - Carts
      summary: Sets a delivery address for the cart.
      description: Sets a delivery address for the cart. The address country must
        be placed among the delivery countries of the current base store.
      operationId: replaceCartDeliveryAddress
      parameters:
      - name: addressId
        in: query
        description: Address identifier
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    post:
      tags:
      - Carts
      summary: Creates a delivery address for the cart.
      description: Creates an address and assigns it to the cart as the delivery address.
      operationId: createCartDeliveryAddress
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: Response configuration. This is the list of fields that should
          be returned in the response body.
        allowEmptyValue: false
        schema:
          type: string
          default: DEFAULT
          enum:
          - BASIC
          - DEFAULT
          - FULL
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          Request body parameter that contains details such as the customer's first name (firstName), the customer's last name (lastName), the customer's title (titleCode), the customer's phone (phone), the country (country.isocode), the first part of the address (line1), the second part of the address (line2), the town (town), the postal code (postalCode), and the region (region.isocode).

          The DTO is in XML or .json format.
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Address'
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
        required: true
      responses:
        201:
          description: Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Address'
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: address
    delete:
      tags:
      - Carts
      summary: Deletes the delivery address from the cart.
      description: Deletes the delivery address from the cart.
      operationId: removeCartDeliveryAddress
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/carts/{cartId}/addresses/deliveryPostalCode/{postalCode}:
    post:
      tags:
      - Carts
      summary: Updates postalcode on cart and recalculates deliveryCost.
      description: Updates postalcode on cart and recalculates deliveryCost.
      operationId: Update PostalCode
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: postalCode
        in: path
        description: The postalCode
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          Request body parameter that contains BulkZoneid, ParcelZoneid, and storeDistance.

          The DTO is in XML or .json format.
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/CtcStoreZone'
          application/json:
            schema:
              $ref: '#/components/schemas/CtcStoreZone'
        required: true
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: storeZone
  /{baseSiteId}/users/{userId}/carts/{cartId}/cartsMerges:
    get:
      tags:
      - Carts
      summary: Get all merge carts.
      description: By passing the anonymous guid and the authenticated cart guid,
        it will bring a list with the two carts.
      operationId: getMergeCarts
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: oldCartId
        in: query
        description: Anonymous cart GUID.
        allowEmptyValue: false
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CartList'
            application/json:
              schema:
                $ref: '#/components/schemas/CartList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/carts/{cartId}/clonesavedcart:
    post:
      tags:
      - Save Cart
      summary: Explicitly clones a cart.
      description: Explicitly clones a cart.
      operationId: doCartClone
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: description
        in: query
        description: The description that should be applied to the cloned cart.
        allowEmptyValue: false
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: name
        in: query
        description: The name that should be applied to the cloned cart.
        allowEmptyValue: false
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/SaveCartResult'
            application/json:
              schema:
                $ref: '#/components/schemas/SaveCartResult'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/carts/{cartId}/consolidate:
    get:
      tags:
      - Extended Carts
      summary: Get consolidated pickup options.
      description: |-
        Returns a list of stores that have all the pick-up items in stock.

        Note, if there are no stores that have all the pick up items in stock, or all items are already set to the same pick up location, the response returns an empty list.
      operationId: getConsolidatedPickupLocations
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/PointOfServiceList'
            application/json:
              schema:
                $ref: '#/components/schemas/PointOfServiceList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    post:
      tags:
      - Extended Carts
      summary: Handles the consolidating pickup locations.
      description: |-
        Specifies one store location where all items will be picked up.

        Note, if any of the items are not available at the specified location, these items are removed from the cart.
      operationId: createConsolidatedPickupLocation
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: storeName
        in: query
        description: The name of the store where items will be picked up
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CartModificationList'
            application/json:
              schema:
                $ref: '#/components/schemas/CartModificationList'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/carts/{cartId}/ctcstore/{storeName}:
    put:
      tags:
      - Carts
      summary: Updates ctcstore on cart.
      description: Updates ctcstore on cart.
      operationId: UpdateCtcStore
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: baseStoreId
        in: query
        description: Request query paramater to include the Base Store Id.
        allowEmptyValue: false
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: storeName
        in: path
        description: ' CtcStore Name'
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/carts/{cartId}/delete/entries:
    delete:
      tags:
      - Carts
      summary: Deletes multiple cart entry.
      description: Deletes cart entry.
      operationId: removeMultipleCartEntry
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      requestBody:
        description: 'Request body parameter that contains list of products code '
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CtcCartEntryRequest'
        required: true
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: ctcCartEntryRequest
  /{baseSiteId}/users/{userId}/carts/{cartId}/deliveryOption/{whiteGloveServiceType}:
    post:
      tags:
      - Carts
      summary: Updates deliveryOption on cart and recalculates deliveryCost.
      description: Updates deliveryOption on cart and recalculates deliveryCost.
      operationId: Update deliveryOption
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      - name: whiteGloveServiceType
        in: path
        description: The whiteGloveServiceType
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/carts/{cartId}/deliverymode:
    get:
      tags:
      - Carts
      summary: Get the delivery mode selected for the cart.
      description: Returns the delivery mode selected for the cart.
      operationId: getCartDeliveryMode
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: Response configuration. This is the list of fields that should
          be returned in the response body.
        allowEmptyValue: false
        schema:
          type: string
          default: DEFAULT
          enum:
          - BASIC
          - DEFAULT
          - FULL
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/DeliveryMode'
            application/json:
              schema:
                $ref: '#/components/schemas/DeliveryMode'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    put:
      tags:
      - Carts
      summary: Sets the delivery mode for a cart.
      description: Sets the delivery mode with a given identifier for the cart.
      operationId: replaceCartDeliveryMode
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: deliveryModeId
        in: query
        description: Delivery mode identifier (code)
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    delete:
      tags:
      - Carts
      summary: Deletes the delivery mode from the cart.
      description: Deletes the delivery mode from the cart.
      operationId: removeCartDeliveryMode
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/carts/{cartId}/deliverymodes:
    get:
      tags:
      - Carts
      summary: Get all delivery modes for the current store and delivery address.
      description: Returns all delivery modes supported for the current base store
        and cart delivery address. A delivery address must be set for the cart, otherwise
        an empty list will be returned.
      operationId: getCartDeliveryModes
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: Response configuration. This is the list of fields that should
          be returned in the response body.
        allowEmptyValue: false
        schema:
          type: string
          default: DEFAULT
          enum:
          - BASIC
          - DEFAULT
          - FULL
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/DeliveryModeList'
            application/json:
              schema:
                $ref: '#/components/schemas/DeliveryModeList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/carts/{cartId}/dropOffInstructions:
    post:
      tags:
      - Carts
      summary: set drop off instructions to the cart
      description: set drop off instructions to the cart
      operationId: addCartDropOffInstructions
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: Response configuration. This is the list of fields that should
          be returned in the response body.
        allowEmptyValue: false
        schema:
          type: string
          default: DEFAULT
          enum:
          - BASIC
          - DEFAULT
          - FULL
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      requestBody:
        description: Request body parameter that contains details such as the isSignatureRequired
          and instructions
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/CtcDropOffInstructions'
          application/json:
            schema:
              $ref: '#/components/schemas/CtcDropOffInstructions'
        required: true
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Cart'
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: ctcDropOffInstructionsWsDTO
  /{baseSiteId}/users/{userId}/carts/{cartId}/email:
    put:
      tags:
      - Carts
      summary: Assigns an email to the cart.
      description: Assigns an email to the cart. This step is required to make a guest
        checkout.
      operationId: replaceCartGuestUser
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: email
        in: query
        description: Email of the guest user. It will be used during the checkout
          process.
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/carts/{cartId}/emailAndPhoneNo:
    post:
      tags:
      - Carts
      summary: Assigns an email & phone  to the cart.
      description: Assigns an email & phone no to the cart. This step is required
        to make a guest checkout.
      operationId: updateContactInformation
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: email
        in: query
        description: Email of the guest user. It will be used during the checkout
          process.
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: phone
        in: query
        description: phoneNo of the guest user. It will be used during the checkout
          process.
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/carts/{cartId}/entries:
    get:
      tags:
      - Carts
      summary: Get cart entries.
      description: Returns cart entries.
      operationId: getCartEntries
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: Response configuration. This is the list of fields that should
          be returned in the response body.
        allowEmptyValue: false
        schema:
          type: string
          default: DEFAULT
          enum:
          - BASIC
          - DEFAULT
          - FULL
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/OrderEntryList'
            application/json:
              schema:
                $ref: '#/components/schemas/OrderEntryList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    post:
      tags:
      - Carts
      summary: Adds a product to the cart.
      description: Adds a product to the cart.
      operationId: createCartEntry
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: baseStoreId
        in: query
        description: Request query parameter to include the Base Store Id.
        allowEmptyValue: false
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: Response configuration. This is the list of fields that should
          be returned in the response body.
        allowEmptyValue: false
        schema:
          type: string
          default: DEFAULT
          enum:
          - BASIC
          - DEFAULT
          - FULL
      - name: isGrouped
        in: query
        description: isGrouped
        allowEmptyValue: false
        schema:
          type: boolean
          default: false
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          Request body parameter that contains list of entries that needs to add with details such as the product code (product.code), the quantity of product (quantity), and the pickup store name (deliveryPointOfService.name).

          The DTO is in XML or .json format.
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/OrderEntryList'
          application/json:
            schema:
              $ref: '#/components/schemas/OrderEntryList'
        required: true
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CartModificationList'
            application/json:
              schema:
                $ref: '#/components/schemas/CartModificationList'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: entries
  /{baseSiteId}/users/{userId}/carts/{cartId}/entries/updateEntries:
    patch:
      tags:
      - Carts
      summary: Set quantity and store details of multiple cart Entries
      description: Updates the quantity and delivery mode of multiple cart entries
        and the details of the store where the cart entry will be picked up
      operationId: updateCartMultipleEntry
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: baseStoreId
        in: query
        description: Request query parameter to include the Base Store Id
        allowEmptyValue: false
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: Response configuration. This is the list of fields that should
          be returned in the response body
        allowEmptyValue: false
        schema:
          type: string
          default: DEFAULT
          enum:
          - BASIC
          - DEFAULT
          - FULL
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          Request body parameter that contains details such as the quantity of product (quantity), and the pickup store name (deliveryPointOfService.name), the delivery Mode

          The DTO is in XML or .json format
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/OrderEntryList'
          application/json:
            schema:
              $ref: '#/components/schemas/OrderEntryList'
        required: true
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CartModificationList'
            application/json:
              schema:
                $ref: '#/components/schemas/CartModificationList'
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: entries
  /{baseSiteId}/users/{userId}/carts/{cartId}/entries/{entryNumber}:
    get:
      tags:
      - Carts
      summary: Get the details of the cart entries.
      description: Returns the details of the cart entries.
      operationId: getCartEntry
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: entryNumber
        in: path
        description: The entry number. Each entry in a cart has an entry number. Cart
          entries are numbered in ascending order, starting with zero (0).
        required: true
        schema:
          type: integer
          format: int64
      - name: fields
        in: query
        description: Response configuration. This is the list of fields that should
          be returned in the response body.
        allowEmptyValue: false
        schema:
          type: string
          default: DEFAULT
          enum:
          - BASIC
          - DEFAULT
          - FULL
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/OrderEntry'
            application/json:
              schema:
                $ref: '#/components/schemas/OrderEntry'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    put:
      tags:
      - Carts
      summary: Set quantity and store details of a cart entry.
      description: Updates the quantity of a single cart entry and the details of
        the store where the cart entry will be picked up. Attributes not provided
        in request will be defined again (set to null or default)
      operationId: replaceCartEntry
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: entryNumber
        in: path
        description: The entry number. Each entry in a cart has an entry number. Cart
          entries are numbered in ascending order, starting with zero (0).
        required: true
        schema:
          type: integer
          format: int64
      - name: fields
        in: query
        description: Response configuration. This is the list of fields that should
          be returned in the response body.
        allowEmptyValue: false
        schema:
          type: string
          default: DEFAULT
          enum:
          - BASIC
          - DEFAULT
          - FULL
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          Request body parameter that contains details such as the quantity of product (quantity), and the pickup store name (deliveryPointOfService.name)

          The DTO is in XML or .json format.
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/OrderEntry'
          application/json:
            schema:
              $ref: '#/components/schemas/OrderEntry'
        required: true
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CartModification'
            application/json:
              schema:
                $ref: '#/components/schemas/CartModification'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: entry
    delete:
      tags:
      - Carts
      summary: Deletes cart entry.
      description: Deletes cart entry.
      operationId: removeCartEntry
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: entryNumber
        in: path
        description: The entry number. Each entry in a cart has an entry number. Cart
          entries are numbered in ascending order, starting with zero (0).
        required: true
        schema:
          type: integer
          format: int64
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    patch:
      tags:
      - Carts
      summary: Update quantity and delivery mode details of a cart entry
      description: Updates the quantity and delivery mode of a single cart entry and
        the details of the store where the cart entry will be picked up
      operationId: updateCartEntry
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: entryNumber
        in: path
        description: The entry number. Each entry in a cart has an entry number. Cart
          entries are numbered in ascending order, starting with zero (0)
        required: true
        schema:
          type: integer
          format: int64
      - name: fields
        in: query
        description: Response configuration. This is the list of fields that should
          be returned in the response body
        allowEmptyValue: false
        schema:
          type: string
          default: DEFAULT
          enum:
          - BASIC
          - DEFAULT
          - FULL
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          Request body parameter that contains details such as the quantity of product (quantity), and the pickup store name (deliveryPointOfService.name), the delivery Mode

          The DTO is in XML or .json format
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/OrderEntry'
          application/json:
            schema:
              $ref: '#/components/schemas/OrderEntry'
        required: true
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CartModification'
            application/json:
              schema:
                $ref: '#/components/schemas/CartModification'
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: entry
  /{baseSiteId}/users/{userId}/carts/{cartId}/entries/{pentryNumber}/{sentryNumber}:
    delete:
      tags:
      - Carts
      summary: Deletes base product and service add-on cart entry.
      description: Deletes base product and service add-on cart entry.
      operationId: removeCartEntries
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: pentryNumber
        in: path
        description: The base product entry number. Each entry in a cart has an entry
          number. Cart entries are numbered in ascending order, starting with zero
          (0).
        required: true
        schema:
          type: integer
          format: int64
      - name: sentryNumber
        in: path
        description: The service add-on entry number. Each entry in a cart has an
          entry number. Cart entries are numbered in ascending order, starting with
          zero (0).
        required: true
        schema:
          type: integer
          format: int64
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/carts/{cartId}/flagForDeletion:
    patch:
      tags:
      - Save Cart
      summary: Flag a cart for deletion.
      description: Flags a cart for deletion (the cart doesn't have corresponding
        save cart attributes anymore). The cart is not actually deleted from the database.
        But with the removal of the saved cart attributes, this cart will be taken
        care of by the cart removal job just like any other cart.
      operationId: doUpdateFlagForDeletion
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/SaveCartResult'
            application/json:
              schema:
                $ref: '#/components/schemas/SaveCartResult'
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/carts/{cartId}/oneTimeCart/deliverymode/{deliveryModeCode}:
    put:
      tags:
      - Carts
      summary: Sets the delivery mode for the OTC.
      description: Sets the delivery mode with a given identifier for the OTC.
      operationId: setOTCDeliveryMode
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: deliveryModeCode
        in: path
        description: Delivery mode identifier (code)
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/carts/{cartId}/payment/sop/request:
    get:
      tags:
      - Extended Carts
      summary: Get information needed for create subscription
      description: Returns the necessary information for creating a subscription that
        contacts the payment provider directly. This information contains the payment
        provider URL and a list of parameters that are needed to create the subscription.
      operationId: getSopPaymentRequestDetails
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: extendedMerchantCallback
        in: query
        description: Define which url should be returned
        allowEmptyValue: false
        schema:
          type: boolean
          default: false
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: responseUrl
        in: query
        description: 'The URL that the payment provider uses to return payment information.
          Possible values for responseUrl include the following: “orderPage_cancelResponseURL”,
          “orderPage_declineResponseURL”, and “orderPage_receiptResponseURL”.'
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/PaymentRequest'
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentRequest'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/carts/{cartId}/payment/sop/response:
    get:
      tags:
      - Extended Carts
      summary: Get information about create subscription request results
      description: |-
        Returns information related to creating subscription request results. If there is no response from the payment provider, a "202 Accepted" status is returned. If the subscription is created successfully, the payment details are returned. Otherwise, an error response is returned.

        Note, the “Try it out” button is not enabled for this method (always returns an error) because the Extended Carts Controller handles parameters differently, depending on which payment provider is used. For more information about this controller, please refer to the “acceleratorocc AddOn” documentation on help.hybris.com.
      operationId: getSopPaymentResponse
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/PaymentDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentDetails'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    post:
      tags:
      - Extended Carts
      summary: Handles response from payment provider and create payment details
      description: |-
        Handles the response from the payment provider and creates payment details.

        Note, the “Try it out” button is not enabled for this method (always returns an error) because the Extended Carts Controller handles parameters differently, depending on which payment provider is used. For more information about this controller, please refer to the “acceleratorocc AddOn” documentation on help.hybris.com.
      operationId: doHandleSopPaymentResponse
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/PaymentDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentDetails'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    delete:
      tags:
      - Extended Carts
      summary: Deletes payment provider response related to cart.
      description: Deletes the payment provider response related to the specified
        cart.
      operationId: removeSopPaymentResponse
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/carts/{cartId}/paymentdetails:
    put:
      tags:
      - Carts
      summary: Sets credit card payment details for the cart.
      description: Sets credit card payment details for the cart.
      operationId: replaceCartPaymentDetails
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: paymentDetailsId
        in: query
        description: Payment details identifier.
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    post:
      tags:
      - Carts
      summary: Defines and assigns details of a new credit card payment to the cart.
      description: Defines the details of a new credit card, and assigns this payment
        option to the cart.
      operationId: createCartPaymentDetails
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: Response configuration. This is the list of fields that should
          be returned in the response body.
        allowEmptyValue: false
        schema:
          type: string
          default: DEFAULT
          enum:
          - BASIC
          - DEFAULT
          - FULL
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          Request body parameter that contains details such as the name on the card (accountHolderName), the card number (cardNumber), the card type (cardType.code), the month of the expiry date (expiryMonth), the year of the expiry date (expiryYear), whether the payment details should be saved (saved), whether the payment details should be set as default (defaultPaymentInfo), and the billing address (billingAddress.firstName, billingAddress.lastName, billingAddress.titleCode, billingAddress.country.isocode,newCreditCard billingAddress.line1, billingAddress.line2, billingAddress.town, billingAddress.postalCode, billingAddress.region.isocode)

          The DTO is in XML or .json format.
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/PaymentDetails'
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentDetails'
        required: true
      responses:
        201:
          description: Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/PaymentDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentDetails'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: paymentDetails
  /{baseSiteId}/users/{userId}/carts/{cartId}/payments/initpayment:
    post:
      tags:
      - CtcPayment
      summary: initpayment
      operationId: initpaymentUsingPOST
      parameters:
      - name: baseSiteId
        in: path
        description: Request Path paramater to include the Base Site Id.
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: User Id
        required: true
        schema:
          type: string
      - name: cardId
        in: path
        description: Card ID
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      requestBody:
        description: Request body of the initpayment
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitializePaymentRequest'
        required: false
      responses:
        201:
          description: Created
          content: {}
        202:
          description: Accepted
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/InitializePaymentResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/InitializePaymentResponse'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: request
  /{baseSiteId}/users/{userId}/carts/{cartId}/promotions:
    get:
      tags:
      - Carts
      summary: Get information about promotions applied on cart.
      description: Returns information about the promotions applied on the cart. Requests
        pertaining to promotions have been developed for the previous version of promotions
        and vouchers, and as a result, some of them are currently not compatible with
        the new promotions engine.
      operationId: getCartPromotions
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: Response configuration. This is the list of fields that should
          be returned in the response body.
        allowEmptyValue: false
        schema:
          type: string
          default: DEFAULT
          enum:
          - BASIC
          - DEFAULT
          - FULL
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/PromotionResultList'
            application/json:
              schema:
                $ref: '#/components/schemas/PromotionResultList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    post:
      tags:
      - Carts
      summary: Enables promotions based on the promotionsId of the cart.
      description: Enables a promotion for the order based on the promotionId defined
        for the cart. Requests pertaining to promotions have been developed for the
        previous version of promotions and vouchers, and as a result, some of them
        are currently not compatible with the new promotions engine.
      operationId: doApplyCartPromotion
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: promotionId
        in: query
        description: Promotion identifier (code)
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/carts/{cartId}/promotions/{promotionId}:
    get:
      tags:
      - Carts
      summary: Get information about promotion applied on cart.
      description: Returns information about a promotion (with a specific promotionId),
        that has been applied on the cart. Requests pertaining to promotions have
        been developed for the previous version of promotions and vouchers, and as
        a result, some of them are currently not compatible with the new promotions
        engine.
      operationId: getCartPromotion
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: Response configuration. This is the list of fields that should
          be returned in the response body.
        allowEmptyValue: false
        schema:
          type: string
          default: DEFAULT
          enum:
          - BASIC
          - DEFAULT
          - FULL
      - name: promotionId
        in: path
        description: Promotion identifier (code)
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/PromotionResultList'
            application/json:
              schema:
                $ref: '#/components/schemas/PromotionResultList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    delete:
      tags:
      - Carts
      summary: Disables the promotion based on the promotionsId of the cart.
      description: Disables the promotion for the order based on the promotionId defined
        for the cart. Requests pertaining to promotions have been developed for the
        previous version of promotions and vouchers, and as a result, some of them
        are currently not compatible with the new promotions engine.
      operationId: removeCartPromotion
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: promotionId
        in: path
        description: Promotion identifier (code)
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/carts/{cartId}/redeemCTMoney:
    post:
      tags:
      - Carts
      summary: To redeem ctmoney and recalculate totals.
      description: To redeem ctmoney and recalculate totals.
      operationId: Redeem CTMoney
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: Response configuration. This is the list of fields that should
          be returned in the response body.
        allowEmptyValue: false
        schema:
          type: string
          default: DEFAULT
          enum:
          - BASIC
          - DEFAULT
          - FULL
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      requestBody:
        description: Request body parameter that contains amount to be redeemed
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CTMoneyDetails'
        required: true
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Cart'
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: ctMoneyWsDTO
  /{baseSiteId}/users/{userId}/carts/{cartId}/reserveInventory:
    post:
      tags:
      - CtcReservation
      summary: Reserve inventory from cart
      description: Returns reservation response from SDC
      operationId: reserveInventory
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: cartId
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: userId
        in: path
        description: userId
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CtcReservationResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/CtcReservationResponse'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/carts/{cartId}/restoresavedcart:
    patch:
      tags:
      - Save Cart
      summary: Restore a saved cart.
      description: Restore a saved cart.
      operationId: doUpdateSavedCart
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/SaveCartResult'
            application/json:
              schema:
                $ref: '#/components/schemas/SaveCartResult'
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/carts/{cartId}/save:
    patch:
      tags:
      - Save Cart
      summary: Explicitly saves a cart.
      description: Explicitly saves a cart.
      operationId: doSaveCart
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: saveCartDescription
        in: query
        description: The description that should be applied to the saved cart.
        allowEmptyValue: false
        schema:
          type: string
      - name: saveCartName
        in: query
        description: The name that should be applied to the saved cart.
        allowEmptyValue: false
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/SaveCartResult'
            application/json:
              schema:
                $ref: '#/components/schemas/SaveCartResult'
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/carts/{cartId}/savedcart:
    get:
      tags:
      - Save Cart
      summary: Get a saved cart.
      description: Returns a saved cart for an authenticated user. The cart is identified
        using the "cartId" parameter.
      operationId: getSavedCart
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/SaveCartResult'
            application/json:
              schema:
                $ref: '#/components/schemas/SaveCartResult'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/carts/{cartId}/selectedPickupLocation:
    post:
      tags:
      - Carts
      summary: Add selectedPickupLocation details.
      description: Returns OK
      operationId: addSelectedPickupLocation
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      requestBody:
        description: 'Request body parameter that contains list of products code '
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CtcPickupLocationRequest'
        required: true
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: pickupLocationRequestWsDTO
  /{baseSiteId}/users/{userId}/carts/{cartId}/serviceBookingDetails:
    post:
      tags:
      - Carts
      summary: Update serviceBooking information VIN and AppointmentRequested
      description: Update serviceBooking information VIN and AppointmentRequested
      operationId: Update serviceBooking information
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: isAppointmentRequested
        in: query
        description: Has Appointment Requested.
        allowEmptyValue: false
        schema:
          type: boolean
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      - name: vehicleIdentificationNumber
        in: query
        description: Vehicle Identification Number
        allowEmptyValue: false
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/carts/{cartId}/share:
    post:
      tags:
      - CtcShareCart
      summary: Create and send a web shared cart
      description: Create and send a web shared cart and sends notifications to user.
      operationId: shareCart_1
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      requestBody:
        description: Request body parameter that contains sender, emails or phones
          and language.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebSharedCart'
        required: true
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: webSharedCart
  /{baseSiteId}/users/{userId}/carts/{cartId}/shared/entries:
    post:
      tags:
      - Carts
      summary: Merge Shared Cart.
      description: Merge shared cart entries with customer's cart.
      operationId: mergeSharedCart
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      requestBody:
        description: request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MergeCartRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Cart'
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: request
  /{baseSiteId}/users/{userId}/carts/{cartId}/template:
    post:
      tags:
      - CtcShareCart
      summary: Create Customer Shared Cart.
      description: Link generation.
      operationId: Create Customer Shared Cart
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        201:
          description: Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/SharedCartTemplateLink'
            application/json:
              schema:
                $ref: '#/components/schemas/SharedCartTemplateLink'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/carts/{cartId}/vouchers:
    get:
      tags:
      - Carts
      summary: Get a list of vouchers applied to the cart.
      description: Returns a list of vouchers applied to the cart.
      operationId: getCartVouchers
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: Response configuration. This is the list of fields that should
          be returned in the response body.
        allowEmptyValue: false
        schema:
          type: string
          default: DEFAULT
          enum:
          - BASIC
          - DEFAULT
          - FULL
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/VoucherList'
            application/json:
              schema:
                $ref: '#/components/schemas/VoucherList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    post:
      tags:
      - Carts
      summary: Applies a voucher based on the voucherId defined for the cart.
      description: Applies a voucher based on the voucherId defined for the cart.
      operationId: doApplyCartVoucher
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      - name: voucherId
        in: query
        description: Voucher identifier (code)
        required: true
        allowEmptyValue: false
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/carts/{cartId}/vouchers/{voucherId}:
    delete:
      tags:
      - Carts
      summary: Deletes a voucher defined for the current cart.
      description: Deletes a voucher based on the voucherId defined for the current
        cart.
      operationId: removeCartVoucher
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      - name: voucherId
        in: path
        description: Voucher identifier (code)
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/consents:
    post:
      tags:
      - Consents
      summary: A user can give consent.
      operationId: doGiveConsent
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: consentTemplateId
        in: query
        description: Consent template ID.
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: consentTemplateVersion
        in: query
        description: Consent template version.
        required: true
        allowEmptyValue: false
        schema:
          type: integer
          format: int32
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ConsentTemplate'
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentTemplate'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/consents/{consentCode}:
    delete:
      tags:
      - Consents
      summary: Withdraw the user consent for a given consent code.
      description: If the user consent was given, the consent is withdrawn. If consent
        was already withdrawn then returns consent already withdrawn error. If there
        is no such consent then returns not found. If the current user is an anonymous
        user then returns access denied error.
      operationId: removeConsent
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: consentCode
        in: path
        description: Consent code.
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/consenttemplates:
    get:
      tags:
      - Consents
      summary: Fetch the list of consents
      description: If user has not given or withdrawn consent to any of the template,
        no given or withdraw date is returned.
      operationId: getConsentTemplates
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ConsentTemplateList'
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentTemplateList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/consenttemplates/{consentTemplateId}:
    get:
      tags:
      - Consents
      summary: Fetch the consent.
      description: If user has not given or withdrawn consent to the template, no
        given or withdraw date is returned.
      operationId: getConsentTemplate
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: consentTemplateId
        in: path
        description: Consent template id.
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ConsentTemplate'
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentTemplate'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/customercoupons:
    get:
      tags:
      - Customer Coupons
      summary: Gets all customer coupons of the current customer.
      description: Gets the customer coupon list of the current customer.
      operationId: getCustomerCouponsUsingGET
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: currentPage
        in: query
        description: The current result page requested.
        allowEmptyValue: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: needsTotal
        in: query
        description: The flag for indicating if total number of results is needed
          or not.
        allowEmptyValue: false
        schema:
          type: boolean
          default: true
          enum:
          - true
          - false
      - name: pageSize
        in: query
        description: The number of results returned per page.
        allowEmptyValue: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sorting method applied to the return results.
        allowEmptyValue: false
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CustomerCouponSearchResult'
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerCouponSearchResult'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/customercoupons/{couponCode}/claim:
    post:
      tags:
      - Customer Coupons
      summary: Claims a customer coupon.
      description: Claims a customer coupon by coupon code.
      operationId: doClaimCustomerCouponUsingPOST
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: couponCode
        in: path
        description: Coupon code
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        201:
          description: Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CustomerCoupon2Customer'
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerCoupon2Customer'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/customercoupons/{couponCode}/notification:
    post:
      tags:
      - Customer Coupons
      summary: Subscribes to a coupon notification.
      description: Make a subscription to a customer coupon to receive notifications
        when it will be in effect soon, or will expire soon.
      operationId: doSubscribeToCustomerCouponUsingPOST
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: couponCode
        in: path
        description: Coupon code
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        201:
          description: Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CustomerCouponNotification'
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerCouponNotification'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    delete:
      tags:
      - Customer Coupons
      summary: Unsubscribes from the coupon notification.
      description: Removes notification subscription from the specific customer coupon.
      operationId: doUnsubscribeFromCustomerCouponUsingDELETE
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: couponCode
        in: path
        description: Coupon code
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/customergroups:
    get:
      tags:
      - Users
      summary: Get all customer groups of a customer.
      description: Returns all customer groups of a customer.
      operationId: getUserCustomerGroups
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/UserGroupList'
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroupList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/lmsProfile:
    patch:
      tags:
      - Triangle Select
      summary: Update Customer LMS Profile ID
      description: Update Customer LMS Profile ID to handle the merging of loyalty
        cards scenario
      operationId: updateLmsProfileIdUsingPATCH
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: User identifier, currently authenticated user
        required: true
        schema:
          type: string
      requestBody:
        description: Update LMS Profile ID
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LmsProfileRequest'
        required: false
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: lmsProfileRequest
  /{baseSiteId}/users/{userId}/login:
    put:
      tags:
      - Users
      summary: Changes customer's login name.
      description: Changes a customer's login name. Requires the customer's current
        password.
      operationId: replaceUserLogin
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: newLogin
        in: query
        description: Customer's new login name. Customer login is case insensitive.
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: password
        in: query
        description: Customer's current password.
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/loginnotification:
    post:
      tags:
      - Login Notification
      summary: Notify about successful login.
      description: Publish notification event about successful login.
      operationId: doPublishSuccessfulLoginEvent
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        201:
          description: Created
          content: {}
        202:
          description: Accepted
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/notificationpreferences:
    get:
      tags:
      - Notification Preference
      summary: Gets all notification preferences of the current customer
      description: Returns the notification preferences of the current customer.
      operationId: getNotificationPreferencesUsingGET
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/notificationPreferenceList'
            application/json:
              schema:
                $ref: '#/components/schemas/notificationPreferenceList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    patch:
      tags:
      - Notification Preference
      summary: Updates the notification preferences of the current customer
      description: Updates the notification preference of the current customer.
      operationId: updateNotificationPreferencesUsingPATCH
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      requestBody:
        description: Notification preference list
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/BasicnotificationPreferenceList'
          application/json:
            schema:
              $ref: '#/components/schemas/BasicnotificationPreferenceList'
        required: true
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: notificationPreferences
  /{baseSiteId}/users/{userId}/notifications/sitemessages:
    get:
      tags:
      - Site Messages
      summary: Gets all site messages of current customer.
      description: Returns the site messages of current customer.
      operationId: siteMessagesUsingGET
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier.
        required: true
        schema:
          type: string
      - name: currentPage
        in: query
        description: The current result page requested.
        schema:
          type: string
          default: "0"
      - name: needsTotal
        in: query
        description: The flag for indicating if total number of results is needed
          or not.
        schema:
          type: string
          default: "true"
          enum:
          - "true"
          - "false"
      - name: pageSize
        in: query
        description: The number of results returned per page.
        schema:
          type: string
          default: "10"
      - name: sort
        in: query
        description: The sorting method applied to the return results.
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user.'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/siteMessageSearchResult'
            application/json:
              schema:
                $ref: '#/components/schemas/siteMessageSearchResult'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/orderReturns:
    get:
      tags:
      - Return Requests
      summary: Gets the user's return requests history
      description: Returns order return request data associated with a specified user
        for a specified base store.
      operationId: getReturnRequests
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: currentPage
        in: query
        description: The current result page requested.
        allowEmptyValue: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: pageSize
        in: query
        description: The number of results returned per page.
        allowEmptyValue: false
        schema:
          type: integer
          format: int32
          default: 20
      - name: sort
        in: query
        description: Sorting method applied to the return results.
        allowEmptyValue: false
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReturnRequestList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    post:
      tags:
      - Return Requests
      summary: Create an order return request.
      description: Creates an order return request.
      operationId: createReturnRequest
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      requestBody:
        description: Return request input list for the current order.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReturnRequestEntryInputList'
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReturnRequest'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: returnRequestEntryInputList
  /{baseSiteId}/users/{userId}/orderReturns/{code}/document:
    post:
      tags:
      - Orders
      summary: getReturnSlipAndLabel
      operationId: getReturnSlipAndLabelUsingPOST
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: code
        in: path
        description: Order GUID (Globally Unique Identifier) or order ID
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      requestBody:
        description: packageIds
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        200:
          description: OK
          content:
            application/pdf:
              schema:
                type: string
                format: byte
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: packageIds
  /{baseSiteId}/users/{userId}/orderReturns/{returnRequestCode}:
    get:
      tags:
      - Return Requests
      summary: Get the details of a return request.
      description: Returns specific order return request details based on a specific
        return request code. The response contains detailed order return request information.
      operationId: getReturnRequest
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: returnRequestCode
        in: path
        description: Order return request code
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReturnRequest'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    patch:
      tags:
      - Return Requests
      summary: Updates the order return request.
      description: Updates the order return request. Only cancellation of the request
        is supported by setting the attribute status to CANCELLING. Cancellation of
        the return request cannot be reverted
      operationId: updateReturnRequest
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: returnRequestCode
        in: path
        description: Order return request code
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      requestBody:
        description: Return request modification object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReturnRequestModification'
        required: true
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: returnRequestModification
  /{baseSiteId}/users/{userId}/orders:
    get:
      tags:
      - Orders
      summary: Get order history for user.
      description: Returns order history data for all orders placed by a specified
        user for a specified base store. The response can display the results across
        multiple pages, if required.
      operationId: getUserOrderHistory
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: currentPage
        in: query
        description: The current result page requested.
        allowEmptyValue: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: pageSize
        in: query
        description: The number of results returned per page.
        allowEmptyValue: false
        schema:
          type: integer
          format: int32
          default: 20
      - name: sort
        in: query
        description: Sorting method applied to the return results.
        allowEmptyValue: false
        schema:
          type: string
      - name: statuses
        in: query
        description: Filters only certain order statuses. For example, statuses=CANCELLED,CHECKED_VALID
          would only return orders with status CANCELLED or CHECKED_VALID.
        allowEmptyValue: false
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/OrderHistoryList'
            application/json:
              schema:
                $ref: '#/components/schemas/OrderHistoryList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    post:
      tags:
      - Orders
      summary: Place a order.
      description: Authorizes the cart and places the order. The response contains
        the new order data.
      operationId: placeOrder
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: query
        description: Cart code for logged in user, cart GUID for guest checkout
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: fraudSessionId
        in: query
        description: Fraud Session Id to be set by FED to call TMX
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: isNewCard
        in: query
        description: isNewCard
        required: true
        allowEmptyValue: false
        schema:
          type: boolean
          default: true
      - name: tsTermsAndConditions
        in: query
        description: Terms And Conditions flag for subscription order
        allowEmptyValue: false
        schema:
          type: boolean
          default: false
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        201:
          description: Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    head:
      tags:
      - Orders
      summary: Get total number of orders.
      description: In the response header, the "x-total-count" indicates the total
        number of orders placed by a specified user for a specified base store.
      operationId: countUserOrders
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: statuses
        in: query
        description: Filters only certain order statuses. For example, statuses=CANCELLED,CHECKED_VALID
          would only return orders with status CANCELLED or CHECKED_VALID.
        allowEmptyValue: false
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/orders/{code}:
    get:
      tags:
      - Orders
      summary: Get a order.
      description: Returns specific order details based on a specific order code.
        The response contains detailed order information.
      operationId: getUserOrders
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: code
        in: path
        description: Order GUID (Globally Unique Identifier) or order CODE
        required: true
        schema:
          type: string
      - name: emailId
        in: query
        description: Request query paramater to include the collector email.
        allowEmptyValue: false
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/orders/{code}/cancellation:
    post:
      tags:
      - Orders
      summary: Cancel an order.
      description: Cancels an order partially or completely
      operationId: doCancelOrder
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: code
        in: path
        description: Order code
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      requestBody:
        description: Cancellation request input list for the current order.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancellationRequestEntryInputList'
        required: true
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: cancellationRequestEntryInputList
  /{baseSiteId}/users/{userId}/orders/{code}/notification:
    post:
      tags:
      - Orders
      summary: Updates customer notifications for given order
      description: Updates order notifications
      operationId: updateOrderNotification
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: code
        in: path
        description: Order code
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      requestBody:
        description: Request body parameter that contains phone number and notification
          status map
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderSmsNotificationRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/OrderSmsNotificationResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/OrderSmsNotificationResponse'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: requestNotificationWsDTO
  /{baseSiteId}/users/{userId}/orders/{orderCode}/consignments/{consignmentCode}/tracking:
    get:
      tags:
      - Consignment Tracking
      summary: Gets consignment tracking information
      description: Returns details of consignment tracking information based on the
        order code and the consignment code.
      operationId: getConsignmentTrackingDataUsingGET
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: consignmentCode
        in: path
        description: consignment identifier
        required: true
        schema:
          type: string
      - name: orderCode
        in: path
        description: order identifier
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/consignmentTracking'
            application/json:
              schema:
                $ref: '#/components/schemas/consignmentTracking'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/password:
    put:
      tags:
      - Users
      summary: Changes customer's password
      description: Changes customer's password.
      operationId: replaceUserPassword
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: new
        in: query
        description: New password.
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: old
        in: query
        description: Old password. Required only for ROLE_CUSTOMERGROUP
        allowEmptyValue: false
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        201:
          description: Created
          content: {}
        202:
          description: Accepted
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/paymentdetails:
    get:
      tags:
      - Payment Details
      summary: Get customer's credit card payment details list.
      description: Return customer's credit card payment details list.
      operationId: getPaymentDetailsList
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: saved
        in: query
        description: Type of payment details.
        allowEmptyValue: false
        schema:
          type: boolean
          default: false
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/PaymentDetailsList'
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentDetailsList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/paymentdetails/{paymentDetailsId}:
    get:
      tags:
      - Payment Details
      summary: Get customer's credit card payment details.
      description: Returns a customer's credit card payment details for the specified
        paymentDetailsId.
      operationId: getPaymentDetails
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: paymentDetailsId
        in: path
        description: Payment details identifier.
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/PaymentDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentDetails'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    put:
      tags:
      - Payment Details
      summary: Updates existing customer's credit card payment info.
      description: Updates existing customer's credit card payment info based on the
        payment info ID. Attributes not given in request will be defined again (set
        to null or default).
      operationId: replacePaymentDetails
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: paymentDetailsId
        in: path
        description: Payment details identifier.
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      requestBody:
        description: Payment details object.
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/PaymentDetails'
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentDetails'
        required: true
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: paymentDetails
    delete:
      tags:
      - Payment Details
      summary: Deletes customer's credit card payment details.
      description: Deletes a customer's credit card payment details based on a specified
        paymentDetailsId.
      operationId: removePaymentDetails
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: paymentDetailsId
        in: path
        description: Payment details identifier.
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    patch:
      tags:
      - Payment Details
      summary: Updates existing customer's credit card payment details.
      description: Updates an existing customer's credit card payment details based
        on the specified paymentDetailsId. Only those attributes provided in the request
        will be updated.
      operationId: updatePaymentDetails
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: paymentDetailsId
        in: path
        description: Payment details identifier.
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      requestBody:
        description: Payment details object
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/PaymentDetails'
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentDetails'
        required: true
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: paymentDetails
  /{baseSiteId}/users/{userId}/productinterests:
    get:
      tags:
      - Product Interests
      summary: Gets product interests for a user.
      description: Gets product interests for a user.
      operationId: getProductInterestsUsingGET
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier.
        required: true
        schema:
          type: string
      - name: currentPage
        in: query
        description: The current result page requested.
        schema:
          type: string
          default: "0"
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: needsTotal
        in: query
        description: the flag for indicating if total number of results is needed
          or not
        schema:
          type: string
          default: "true"
          enum:
          - "true"
          - "false"
      - name: notificationType
        in: query
        description: Notification type
        allowEmptyValue: false
        schema:
          type: string
      - name: pageSize
        in: query
        description: The number of results returned per page.
        schema:
          type: string
          default: "20"
      - name: productCode
        in: query
        description: Product identifier
        allowEmptyValue: false
        schema:
          type: string
      - name: sort
        in: query
        description: Sorting method applied to the return results.
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/customerInterestsSearchPage'
            application/json:
              schema:
                $ref: '#/components/schemas/customerInterestsSearchPage'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    post:
      tags:
      - Product Interests
      summary: Sets product interests for a user.
      description: Sets product interests for a user.
      operationId: createProductInterestUsingPOST
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: notificationType
        in: query
        description: Notification type
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: productCode
        in: query
        description: Product identifier
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/productInterestRelation'
            application/json:
              schema:
                $ref: '#/components/schemas/productInterestRelation'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    delete:
      tags:
      - Product Interests
      summary: Removes product interests by product code and notification type
      description: Removes product interests by product code and notification type.
      operationId: removeProductInterestUsingDELETE
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: notificationType
        in: query
        description: Notification type
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: productCode
        in: query
        description: Product identifier
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/profile/add-update-card:
    post:
      tags:
      - UserAccount
      summary: Adds or edit card to profile in GIGYA
      description: Returns status P (Pass) or F (Fail)
      operationId: Add or Edit Card to Profile
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: User ID
        required: true
        schema:
          type: string
      requestBody:
        description: ' Request body contains hppToken used for Add/Edit card'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CtcProfileCardRequest'
        required: true
      responses:
        201:
          description: Created
          content: {}
        202:
          description: Accepted
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CtcProfileCardResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/CtcProfileCardResponse'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: requestWsDto
  /{baseSiteId}/users/{userId}/profile/init-card-update:
    post:
      tags:
      - CtcPayment
      summary: Initiates request to CTFS for Add or Edit Card to Profile, should contain
        cardReferenceNumber in request body for edit card flow.
      description: Returns hppToken to be used for creating or saving card in profile
        (Gigya)
      operationId: Initiates request to CTFS for Add or Edit Card to Profile
      parameters:
      - name: baseSiteId
        in: path
        description: Request Path parameter to include the Base Site Id.
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: User ID
        required: true
        schema:
          type: string
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitializePaymentRequest'
        required: false
      responses:
        201:
          description: Created
          content: {}
        202:
          description: Accepted
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/InitializePaymentResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/InitializePaymentResponse'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: request
  /{baseSiteId}/users/{userId}/saveForLater:
    get:
      tags:
      - saveforlater
      summary: Get all customer carts.
      description: Lists all customer carts.
      operationId: getCarts_1
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: currentPage
        in: query
        description: Optional pagination parameter in case of savedCartsOnly == true.
          Default value 0.
        allowEmptyValue: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: fields
        in: query
        description: Response configuration. This is the list of fields that should
          be returned in the response body.
        allowEmptyValue: false
        schema:
          type: string
          default: DEFAULT
          enum:
          - BASIC
          - DEFAULT
          - FULL
      - name: pageSize
        in: query
        description: Optional {@link PaginationData} parameter in case of savedCartsOnly
          == true. Default value 20.
        allowEmptyValue: false
        schema:
          type: integer
          format: int32
          default: 20
      - name: savedCartsOnly
        in: query
        description: Optional parameter. If the parameter is provided and its value
          is true, only saved carts are returned.
        allowEmptyValue: false
        schema:
          type: boolean
          default: false
      - name: sort
        in: query
        description: Optional sort criterion in case of savedCartsOnly == true. No
          default value.
        allowEmptyValue: false
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CartList'
            application/json:
              schema:
                $ref: '#/components/schemas/CartList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/saveForLater/{cartId}:
    delete:
      tags:
      - saveforlater
      summary: Deletes a cart with a given cart id.
      description: Deletes a cart with a given cart id.
      operationId: removeCart_1
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/saveForLater/{cartId}/addresses/delivery:
    put:
      tags:
      - saveforlater
      summary: Sets a delivery address for the cart.
      description: Sets a delivery address for the cart. The address country must
        be placed among the delivery countries of the current base store.
      operationId: replaceCartDeliveryAddress_1
      parameters:
      - name: addressId
        in: query
        description: Address identifier
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    post:
      tags:
      - saveforlater
      summary: Creates a delivery address for the cart.
      description: Creates an address and assigns it to the cart as the delivery address.
      operationId: createCartDeliveryAddress_1
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: Response configuration. This is the list of fields that should
          be returned in the response body.
        allowEmptyValue: false
        schema:
          type: string
          default: DEFAULT
          enum:
          - BASIC
          - DEFAULT
          - FULL
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          Request body parameter that contains details such as the customer's first name (firstName), the customer's last name (lastName), the customer's title (titleCode), the customer's phone (phone), the country (country.isocode), the first part of the address (line1), the second part of the address (line2), the town (town), the postal code (postalCode), and the region (region.isocode).

          The DTO is in XML or .json format.
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Address'
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
        required: true
      responses:
        201:
          description: Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Address'
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: address
    delete:
      tags:
      - saveforlater
      summary: Deletes the delivery address from the cart.
      description: Deletes the delivery address from the cart.
      operationId: removeCartDeliveryAddress_1
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/saveForLater/{cartId}/deliverymode:
    get:
      tags:
      - saveforlater
      summary: Get the delivery mode selected for the cart.
      description: Returns the delivery mode selected for the cart.
      operationId: getCartDeliveryMode_1
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: Response configuration. This is the list of fields that should
          be returned in the response body.
        allowEmptyValue: false
        schema:
          type: string
          default: DEFAULT
          enum:
          - BASIC
          - DEFAULT
          - FULL
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/DeliveryMode'
            application/json:
              schema:
                $ref: '#/components/schemas/DeliveryMode'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    put:
      tags:
      - saveforlater
      summary: Sets the delivery mode for a cart.
      description: Sets the delivery mode with a given identifier for the cart.
      operationId: replaceCartDeliveryMode_1
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: deliveryModeId
        in: query
        description: Delivery mode identifier (code)
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    delete:
      tags:
      - saveforlater
      summary: Deletes the delivery mode from the cart.
      description: Deletes the delivery mode from the cart.
      operationId: removeCartDeliveryMode_1
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/saveForLater/{cartId}/deliverymodes:
    get:
      tags:
      - saveforlater
      summary: Get all delivery modes for the current store and delivery address.
      description: Returns all delivery modes supported for the current base store
        and cart delivery address. A delivery address must be set for the cart, otherwise
        an empty list will be returned.
      operationId: getCartDeliveryModes_1
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: Response configuration. This is the list of fields that should
          be returned in the response body.
        allowEmptyValue: false
        schema:
          type: string
          default: DEFAULT
          enum:
          - BASIC
          - DEFAULT
          - FULL
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/DeliveryModeList'
            application/json:
              schema:
                $ref: '#/components/schemas/DeliveryModeList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/saveForLater/{cartId}/email:
    put:
      tags:
      - saveforlater
      summary: Assigns an email to the cart.
      description: Assigns an email to the cart. This step is required to make a guest
        checkout.
      operationId: replaceCartGuestUser_1
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: email
        in: query
        description: Email of the guest user. It will be used during the checkout
          process.
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/saveForLater/{cartId}/entries:
    get:
      tags:
      - saveforlater
      summary: Get cart entries.
      description: Returns cart entries.
      operationId: getCartEntries_1
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: Response configuration. This is the list of fields that should
          be returned in the response body.
        allowEmptyValue: false
        schema:
          type: string
          default: DEFAULT
          enum:
          - BASIC
          - DEFAULT
          - FULL
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/OrderEntryList'
            application/json:
              schema:
                $ref: '#/components/schemas/OrderEntryList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/saveForLater/{cartId}/entries/{entryNumber}:
    get:
      tags:
      - saveforlater
      summary: Get the details of the cart entries.
      description: Returns the details of the cart entries.
      operationId: getCartEntry_1
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: entryNumber
        in: path
        description: The entry number. Each entry in a cart has an entry number. Cart
          entries are numbered in ascending order, starting with zero (0).
        required: true
        schema:
          type: integer
          format: int64
      - name: fields
        in: query
        description: Response configuration. This is the list of fields that should
          be returned in the response body.
        allowEmptyValue: false
        schema:
          type: string
          default: DEFAULT
          enum:
          - BASIC
          - DEFAULT
          - FULL
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/OrderEntry'
            application/json:
              schema:
                $ref: '#/components/schemas/OrderEntry'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    put:
      tags:
      - saveforlater
      summary: Set quantity and store details of a cart entry.
      description: Updates the quantity of a single cart entry and the details of
        the store where the cart entry will be picked up. Attributes not provided
        in request will be defined again (set to null or default)
      operationId: replaceCartEntry_1
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: entryNumber
        in: path
        description: The entry number. Each entry in a cart has an entry number. Cart
          entries are numbered in ascending order, starting with zero (0).
        required: true
        schema:
          type: integer
          format: int64
      - name: fields
        in: query
        description: Response configuration. This is the list of fields that should
          be returned in the response body.
        allowEmptyValue: false
        schema:
          type: string
          default: DEFAULT
          enum:
          - BASIC
          - DEFAULT
          - FULL
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          Request body parameter that contains details such as the quantity of product (quantity), and the pickup store name (deliveryPointOfService.name)

          The DTO is in XML or .json format.
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/OrderEntry'
          application/json:
            schema:
              $ref: '#/components/schemas/OrderEntry'
        required: true
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CartModification'
            application/json:
              schema:
                $ref: '#/components/schemas/CartModification'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: entry
    patch:
      tags:
      - saveforlater
      summary: Update quantity and store details of a cart entry.
      description: Updates the quantity of a single cart entry and the details of
        the store where the cart entry will be picked up.
      operationId: updateCartEntry_1
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: entryNumber
        in: path
        description: The entry number. Each entry in a cart has an entry number. Cart
          entries are numbered in ascending order, starting with zero (0).
        required: true
        schema:
          type: integer
          format: int64
      - name: fields
        in: query
        description: Response configuration. This is the list of fields that should
          be returned in the response body.
        allowEmptyValue: false
        schema:
          type: string
          default: DEFAULT
          enum:
          - BASIC
          - DEFAULT
          - FULL
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          Request body parameter that contains details such as the quantity of product (quantity), and the pickup store name (deliveryPointOfService.name)

          The DTO is in XML or .json format.
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/OrderEntry'
          application/json:
            schema:
              $ref: '#/components/schemas/OrderEntry'
        required: true
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CartModification'
            application/json:
              schema:
                $ref: '#/components/schemas/CartModification'
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: entry
  /{baseSiteId}/users/{userId}/saveForLater/{cartId}/paymentdetails:
    put:
      tags:
      - saveforlater
      summary: Sets credit card payment details for the cart.
      description: Sets credit card payment details for the cart.
      operationId: replaceCartPaymentDetails_1
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: paymentDetailsId
        in: query
        description: Payment details identifier.
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/saveForLater/{cartId}/promotions:
    get:
      tags:
      - saveforlater
      summary: Get information about promotions applied on cart.
      description: Returns information about the promotions applied on the cart. Requests
        pertaining to promotions have been developed for the previous version of promotions
        and vouchers, and as a result, some of them are currently not compatible with
        the new promotions engine.
      operationId: getCartPromotions_1
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: Response configuration. This is the list of fields that should
          be returned in the response body.
        allowEmptyValue: false
        schema:
          type: string
          default: DEFAULT
          enum:
          - BASIC
          - DEFAULT
          - FULL
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/PromotionResultList'
            application/json:
              schema:
                $ref: '#/components/schemas/PromotionResultList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    post:
      tags:
      - saveforlater
      summary: Enables promotions based on the promotionsId of the cart.
      description: Enables a promotion for the order based on the promotionId defined
        for the cart. Requests pertaining to promotions have been developed for the
        previous version of promotions and vouchers, and as a result, some of them
        are currently not compatible with the new promotions engine.
      operationId: doApplyCartPromotion_1
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: promotionId
        in: query
        description: Promotion identifier (code)
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/saveForLater/{cartId}/promotions/{promotionId}:
    get:
      tags:
      - saveforlater
      summary: Get information about promotion applied on cart.
      description: Returns information about a promotion (with a specific promotionId),
        that has been applied on the cart. Requests pertaining to promotions have
        been developed for the previous version of promotions and vouchers, and as
        a result, some of them are currently not compatible with the new promotions
        engine.
      operationId: getCartPromotion_1
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: Response configuration. This is the list of fields that should
          be returned in the response body.
        allowEmptyValue: false
        schema:
          type: string
          default: DEFAULT
          enum:
          - BASIC
          - DEFAULT
          - FULL
      - name: promotionId
        in: path
        description: Promotion identifier (code)
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/PromotionResultList'
            application/json:
              schema:
                $ref: '#/components/schemas/PromotionResultList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    delete:
      tags:
      - saveforlater
      summary: Disables the promotion based on the promotionsId of the cart.
      description: Disables the promotion for the order based on the promotionId defined
        for the cart. Requests pertaining to promotions have been developed for the
        previous version of promotions and vouchers, and as a result, some of them
        are currently not compatible with the new promotions engine.
      operationId: removeCartPromotion_1
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: promotionId
        in: path
        description: Promotion identifier (code)
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/saveForLater/{cartId}/vouchers:
    get:
      tags:
      - saveforlater
      summary: Get a list of vouchers applied to the cart.
      description: Returns a list of vouchers applied to the cart.
      operationId: getCartVouchers_1
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: Response configuration. This is the list of fields that should
          be returned in the response body.
        allowEmptyValue: false
        schema:
          type: string
          default: DEFAULT
          enum:
          - BASIC
          - DEFAULT
          - FULL
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/VoucherList'
            application/json:
              schema:
                $ref: '#/components/schemas/VoucherList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    post:
      tags:
      - saveforlater
      summary: Applies a voucher based on the voucherId defined for the cart.
      description: Applies a voucher based on the voucherId defined for the cart.
      operationId: doApplyCartVoucher_1
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      - name: voucherId
        in: query
        description: Voucher identifier (code)
        required: true
        allowEmptyValue: false
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/saveForLater/{cartId}/vouchers/{voucherId}:
    delete:
      tags:
      - saveforlater
      summary: Deletes a voucher defined for the current cart.
      description: Deletes a voucher based on the voucherId defined for the current
        cart.
      operationId: removeCartVoucher_1
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      - name: voucherId
        in: path
        description: Voucher identifier (code)
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/saveForLater/{saveForLaterId}:
    get:
      tags:
      - saveforlater
      summary: Get a save for later with a given identifier.
      description: Returns the save for later with a given identifier.
      operationId: getSaveForLater
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: currentPage
        in: query
        description: Optional pagination parameter. Default value 0.
        allowEmptyValue: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: fields
        in: query
        description: Response configuration. This is the list of fields that should
          be returned in the response body.
        allowEmptyValue: false
        schema:
          type: string
          default: DEFAULT
          enum:
          - BASIC
          - DEFAULT
          - FULL
      - name: pageSize
        in: query
        description: Optional pagination parameter. Default value 20.
        allowEmptyValue: false
        schema:
          type: integer
          format: int32
          default: 20
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CtcSaveForLater'
            application/json:
              schema:
                $ref: '#/components/schemas/CtcSaveForLater'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/saveForLater/{saveForLaterId}/entries/remove:
    delete:
      tags:
      - saveforlater
      summary: Delete save for later entries with a given entry numbers.
      operationId: removeSaveForLaterEntries
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: cartId
        in: path
        description: 'Cart identifier: cart code for logged in user, cart guid for
          anonymous user, ''current'' for the last modified cart'
        required: true
        schema:
          type: string
      - name: currentPage
        in: query
        description: Optional pagination parameter. Default value 0.
        allowEmptyValue: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: fields
        in: query
        description: Response configuration. This is the list of fields that should
          be returned in the response body.
        allowEmptyValue: false
        schema:
          type: string
          default: DEFAULT
          enum:
          - BASIC
          - DEFAULT
          - FULL
      - name: pageSize
        in: query
        description: Optional pagination parameter. Default value 20.
        allowEmptyValue: false
        schema:
          type: integer
          format: int32
          default: 20
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      requestBody:
        description: Request body parameter that contains list of entry numbers to
          be deleted
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CtcCartEntryRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CtcSaveForLater'
            application/json:
              schema:
                $ref: '#/components/schemas/CtcSaveForLater'
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: ctcCartEntryRequest
  /{baseSiteId}/users/{userId}/sharedcarts/oneTimeCart:
    post:
      tags:
      - CtcSharedCartTemplate
      summary: Create one time cart
      description: Create one time cart from shared cart template.
      operationId: CreateOTC
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      requestBody:
        description: request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OTCRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Cart'
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: request
  /{baseSiteId}/users/{userId}/sharedcarts/template/{templateCode}:
    get:
      tags:
      - CtcSharedCartTemplate
      summary: Returns shared cart template details based on template code
      description: Returns share cart data
      operationId: getSharedCartDetails
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: templateCode
        in: path
        description: templateCode
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: 'User identifier or one of the literals : ''current'' for currently
          authenticated user, ''anonymous'' for anonymous user'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/SharedCartTemplate'
            application/json:
              schema:
                $ref: '#/components/schemas/SharedCartTemplate'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/subscription:
    get:
      tags:
      - Triangle Select
      summary: Get subscription information
      description: Get subscription information
      operationId: getSubscriptionInfoUsingGET
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: lmsProfileId
        in: query
        description: LMS Profile ID
        allowEmptyValue: false
        schema:
          type: string
      - name: userId
        in: path
        description: User identifier, currently authenticated user
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    put:
      tags:
      - Triangle Select
      summary: Update AutoRenewal
      description: Update subscription autoRenewal flag
      operationId: updateSubscriptionUsingPUT
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: User identifier, currently authenticated user
        required: true
        schema:
          type: string
      requestBody:
        description: Subscription renewal data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscripitonRenewalRequest'
        required: false
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: subscriptionRenewalRequest
  /{baseSiteId}/users/{userId}/subscription/refund:
    post:
      tags:
      - Triangle Select
      summary: Refund subscription
      description: Initiate refund of user's subscription
      operationId: refundSubscriptionUsingPOST
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: lmsProfileId
        in: query
        description: LMS Profile ID
        allowEmptyValue: false
        schema:
          type: string
      - name: userId
        in: path
        description: User identifier, currently authenticated user
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/wishlist:
    get:
      tags:
      - Wishlist
      summary: Get Wishlist
      description: Get wishlist
      operationId: getWishlist
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: DEFAULT
      - name: guid
        in: query
        description: Wishlist GUID (generally used for anonymous user only)
        allowEmptyValue: false
        schema:
          type: string
      - name: userId
        in: path
        description: User identifier should be anonymous for Anonymous User
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CtcWishlist2List'
            application/json:
              schema:
                $ref: '#/components/schemas/CtcWishlist2List'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/wishlist/mergeWishlist:
    put:
      tags:
      - Wishlist
      summary: MergeWishlist
      description: Merge wishlist
      operationId: mergeWishlist
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: guid
        in: query
        description: Wishlist GUID (generally used for anonymous user only)
        allowEmptyValue: false
        schema:
          type: string
      - name: userId
        in: path
        description: User identifier should be current for Authenticated User
        required: true
        schema:
          type: string
      responses:
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/wishlist/new:
    get:
      tags:
      - Wishlist
      summary: Get wishlist data
      description: Get wishlist data
      operationId: getWishlistData
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: User ID
        required: true
        schema:
          type: string
      - name: guid
        in: query
        description: Wishlist guid
        allowEmptyValue: false
        schema:
          type: string
      - name: storeName
        in: query
        description: Store identifier
        allowEmptyValue: false
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CtcWishlistDataList'
            application/json:
              schema:
                $ref: '#/components/schemas/CtcWishlistDataList'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/wishlist/product/{productId}:
    put:
      tags:
      - Wishlist
      summary: Add to Wishlist
      description: Add product to wishlist
      operationId: addToWishList
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: guid
        in: query
        description: Wishlist GUID (generally used for anonymous user only)
        allowEmptyValue: false
        schema:
          type: string
      - name: productId
        in: path
        description: Product identifier
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: User identifier should be anonymous for Anonymous User
        required: true
        schema:
          type: string
      responses:
        201:
          description: Created
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
    delete:
      tags:
      - Wishlist
      summary: Remove wishlist entry
      description: Remove entry from wishlist
      operationId: removeWishListEntry
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: guid
        in: query
        description: Wishlist GUID (generally used for anonymous user only)
        allowEmptyValue: false
        schema:
          type: string
      - name: productId
        in: path
        description: Product identifier
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: User identifier should be anonymous for Anonymous User
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/wishlist/productCodes:
    get:
      tags:
      - Wishlist
      summary: Get wishlist product codes
      description: Get wishlist product codes
      operationId: getWishlistProducts
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: User ID
        required: true
        schema:
          type: string
      - name: guid
        in: query
        description: Wishlist guid
        allowEmptyValue: false
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CtcWishlistProductsData'
            application/json:
              schema:
                $ref: '#/components/schemas/CtcWishlistProductsData'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/users/{userId}/wishlist/products/wishlistEntries:
    post:
      tags:
      - Wishlist
      summary: Add Products to Wishlist
      description: Add products to wishlist
      operationId: addProductsToWishList
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: guid
        in: query
        description: Wishlist GUID (generally used for anonymous user only)
        allowEmptyValue: false
        schema:
          type: string
      - name: isGrouped
        in: query
        description: isGrouped
        allowEmptyValue: false
        schema:
          type: boolean
          default: false
      - name: userId
        in: path
        description: User identifier should be anonymous for Anonymous User
        required: true
        schema:
          type: string
      requestBody:
        description: 'Request body parameter that contains list of entries with product
          codes and vehicle Info for automotive products '
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CtcWishlist2EntryList'
        required: true
      responses:
        201:
          description: Created
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: request
    delete:
      tags:
      - Wishlist
      summary: Remove multiple wishlist entries
      description: Remove multiple entries from wishlist
      operationId: removeWishListEntries
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: guid
        in: query
        description: Wishlist GUID (generally used for anonymous user only)
        allowEmptyValue: false
        schema:
          type: string
      - name: userId
        in: path
        description: User identifier should be anonymous for Anonymous User
        required: true
        schema:
          type: string
      requestBody:
        description: request
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CtcWishlist2EntryList'
        required: true
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
      x-codegen-request-body-name: request
  /{baseSiteId}/users/{userId}/wishlist/vehicle:
    get:
      tags:
      - Wishlist
      summary: Get wishlist product data
      description: Get wishlist product data
      operationId: getWishListProductsData
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: User ID
        required: true
        schema:
          type: string
      - name: guid
        in: query
        description: Wishlist guid
        allowEmptyValue: false
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CtcWishlistProductsData'
            application/json:
              schema:
                $ref: '#/components/schemas/CtcWishlistProductsData'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/version/ctc:
    get:
      tags:
      - ctc-release-version-controller
      summary: getCtcVersion
      operationId: getCtcVersionUsingGET
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CtcReleaseVersionData'
            application/json:
              schema:
                $ref: '#/components/schemas/CtcReleaseVersionData'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
  /{baseSiteId}/vouchers/{code}:
    get:
      tags:
      - Vouchers
      summary: Get a voucher based on code.
      description: Returns details of a single voucher that is specified by its voucher
        identification code.
      operationId: getVoucher
      parameters:
      - name: baseSiteId
        in: path
        description: Base site identifier
        required: true
        schema:
          type: string
      - name: code
        in: path
        description: Voucher identifier (code)
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: 'Response configuration. This is the list of fields that should
          be returned in the response body. Examples: BASIC, DEFAULT, FULL'
        schema:
          type: string
          default: BASIC
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Voucher'
            application/json:
              schema:
                $ref: '#/components/schemas/Voucher'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
      - oauth2_Password: []
      - oauth2_client_credentials: []
components:
  schemas:
    AddUserToGroup:
      title: AddUserToGroup
      type: object
      properties:
        groupId:
          type: string
        users:
          type: array
          items:
            type: string
    AddUserToGroupResponse:
      title: AddUserToGroupResponse
      type: object
      properties:
        status:
          type: string
        success:
          type: boolean
        userId:
          type: string
    Address:
      title: Address
      required:
      - firstName
      - lastName
      - line1
      - postalCode
      - titleCode
      - town
      type: object
      properties:
        cellphone:
          type: string
          description: Cellphone number
        companyName:
          type: string
          description: Company Name
        country:
          $ref: '#/components/schemas/Country'
        defaultAddress:
          type: boolean
          description: Boolean flag if address is default
        district:
          type: string
          description: District name
        email:
          type: string
          description: Email address
        fax:
          type: string
        firstName:
          type: string
          description: First name of the address person
        formattedAddress:
          type: string
          description: Boolean flag if address is formatted
        id:
          type: string
          description: Unique id value of the address which is optional while creating
            new address. While performing other address operations this value is the
            key
        lastName:
          type: string
          description: Last name of the address person
        line1:
          type: string
          description: First line of the address
        line2:
          type: string
          description: Second line of the address
        phone:
          type: string
          description: Phone number
        phone2:
          type: string
        postalCode:
          type: string
          description: Postal code of the address
        region:
          $ref: '#/components/schemas/Region'
        shippingAddress:
          type: boolean
          description: Boolean flag if address is for shipping
        title:
          type: string
          description: Title of the address person
        titleCode:
          type: string
          description: Code of the title
        town:
          type: string
          description: Town, field required
        visibleInAddressBook:
          type: boolean
          description: Boolean flag if address is visible in the Address Book
      description: Request body fields required and optional to operate on address
        data. The DTO is in XML or .json format
    AddressData:
      title: AddressData
      type: object
      properties:
        billingAddress:
          type: boolean
        cellphone:
          type: string
        companyName:
          type: string
        country:
          $ref: '#/components/schemas/CountryData'
        defaultAddress:
          type: boolean
        district:
          type: string
        email:
          type: string
        fax:
          type: string
        firstName:
          type: string
        formattedAddress:
          type: string
        id:
          type: string
        lastName:
          type: string
        line1:
          type: string
        line2:
          type: string
        phone:
          type: string
        phone2:
          type: string
        postalCode:
          type: string
        region:
          $ref: '#/components/schemas/RegionData'
        shippingAddress:
          type: boolean
        title:
          type: string
        titleCode:
          type: string
        town:
          type: string
        visibleInAddressBook:
          type: boolean
    AddressList:
      title: AddressList
      type: object
      properties:
        addresses:
          type: array
          description: List of addresses
          items:
            $ref: '#/components/schemas/Address'
      description: Representation of an Address list
    AddressValidation:
      title: AddressValidation
      type: object
      properties:
        decision:
          type: string
          description: Decision
        errors:
          $ref: '#/components/schemas/errorList'
        suggestedAddresses:
          type: array
          description: List of suggested addresses
          items:
            $ref: '#/components/schemas/Address'
      description: Representation of an Address Validation
    Annotation:
      title: Annotation
      type: object
    ApplicationContext:
      title: ApplicationContext
      type: object
      properties:
        applicationName:
          type: string
        autowireCapableBeanFactory:
          $ref: '#/components/schemas/AutowireCapableBeanFactory'
        beanDefinitionCount:
          type: integer
          format: int32
        beanDefinitionNames:
          type: array
          items:
            type: string
        classLoader:
          $ref: '#/components/schemas/ClassLoader'
        displayName:
          type: string
        environment:
          $ref: '#/components/schemas/Environment'
        id:
          type: string
        parent:
          $ref: '#/components/schemas/ApplicationContext'
        parentBeanFactory:
          $ref: '#/components/schemas/BeanFactory'
        startupDate:
          type: integer
          format: int64
    AutomotiveConsignment:
      title: AutomotiveConsignment
      type: object
      properties:
        cartEntries:
          type: array
          items:
            $ref: '#/components/schemas/SharedCartEntry'
        serviceCenterDocumentId:
          type: string
        vehicleContext:
          $ref: '#/components/schemas/VehicleContext'
    AutowireCapableBeanFactory:
      title: AutowireCapableBeanFactory
      type: object
    BaseOption:
      title: BaseOption
      type: object
      properties:
        options:
          type: array
          description: List of all variant options
          items:
            $ref: '#/components/schemas/VariantOption'
        selected:
          $ref: '#/components/schemas/VariantOption'
        variantType:
          type: string
          description: Variant type of base option
      description: Representation of a Base Ooption
    BaseProductImageData:
      title: BaseProductImageData
      type: object
      properties:
        altText:
          type: string
        angleOrCrop:
          type: string
        isListingThumbnailImage:
          type: boolean
        mediaType:
          type: string
        priority:
          type: integer
          format: int32
        url:
          type: string
        videoImageThumbnailUrl:
          type: string
        videoShortDescription:
          type: string
        videoTitle:
          type: string
        videoType:
          type: string
    BaseProductReferenceData:
      title: BaseProductReferenceData
      type: object
      properties:
        referenceType:
          type: string
    BaseProductVariantOptionData:
      title: BaseProductVariantOptionData
      type: object
      properties:
        canonicalUrl:
          type: string
        code:
          type: string
        corporateStatus:
          type: string
        features:
          type: array
          items:
            $ref: '#/components/schemas/ProductFeatureData'
        formattedCode:
          type: string
        images:
          type: array
          items:
            $ref: '#/components/schemas/VariantProductImageData'
        installationEligible:
          type: boolean
        isBulk:
          type: boolean
        maxOrderQuantity:
          type: integer
          format: int32
        productStatus:
          type: string
        repairOrderRequired:
          type: boolean
        url:
          type: string
    BaseSite:
      title: BaseSite
      type: object
      properties:
        channel:
          type: string
          description: Channel
        defaultLanguage:
          $ref: '#/components/schemas/Language'
        defaultPreviewCatalogId:
          type: string
          description: Default preview catalog id
        defaultPreviewCategoryCode:
          type: string
          description: Default preview category code
        defaultPreviewProductCode:
          type: string
          description: Default preview product code
        locale:
          type: string
          description: Locale data for Basesite
        name:
          type: string
          description: Name of Basesite
        stores:
          type: array
          description: List of Basestores
          items:
            $ref: '#/components/schemas/BaseStore'
        theme:
          type: string
          description: Theme of Basesite
        uid:
          type: string
          description: Unique identifier of Basesite
        urlEncodingAttributes:
          type: array
          description: List of url encoding attributes
          items:
            type: string
        urlPatterns:
          type: array
          description: List of url patterns
          items:
            type: string
      description: Representation of a Base Site
    BaseSiteList:
      title: BaseSiteList
      type: object
      properties:
        baseSites:
          type: array
          description: List of basesites
          items:
            $ref: '#/components/schemas/BaseSite'
      description: Representation of a Base Site List
    BaseStore:
      title: BaseStore
      type: object
      properties:
        createReturnProcessCode:
          type: string
          description: Create return process code
        currencies:
          type: array
          description: List of currencies
          items:
            $ref: '#/components/schemas/Currency'
        defaultCurrency:
          $ref: '#/components/schemas/Currency'
        defaultDeliveryOrigin:
          $ref: '#/components/schemas/PointOfService'
        defaultLanguage:
          $ref: '#/components/schemas/Language'
        deliveryCountries:
          type: array
          description: List of delivery countries
          items:
            $ref: '#/components/schemas/Country'
        deliveryModes:
          $ref: '#/components/schemas/DeliveryModeList'
        expressCheckoutEnabled:
          type: boolean
          description: Flag specifying whether the express checkout option is enabled
        externalTaxEnabled:
          type: boolean
          description: Flag defining is external tax is enabled
        languages:
          type: array
          description: List of languages
          items:
            $ref: '#/components/schemas/Language'
        maxRadiusForPosSearch:
          type: number
          description: Maximum radius for searching point of service
          format: double
        name:
          type: string
          description: Base store name
        paymentProvider:
          type: string
          description: Payment provider
        pointsOfService:
          type: array
          description: List of points of service
          items:
            $ref: '#/components/schemas/PointOfService'
        submitOrderProcessCode:
          type: string
          description: Submit order process code
      description: Representation of a Base Store
    BasicnotificationPreference:
      title: BasicnotificationPreference
      type: object
      properties:
        channel:
          type: string
          description: preference channel
          example: email, sms, site_message
        enabled:
          type: boolean
          description: if true, the channel is on; if false, the channel is off
      description: Basic notification preference
    BasicnotificationPreferenceList:
      title: BasicnotificationPreferenceList
      type: object
      properties:
        preferences:
          type: array
          description: Basic notification preferences
          items:
            $ref: '#/components/schemas/BasicnotificationPreference'
      description: Basic notification preference list
    BeanFactory:
      title: BeanFactory
      type: object
    BreadCrumbData:
      title: BreadCrumbData
      type: object
      properties:
        name:
          type: string
        url:
          type: string
    Breadcrumb:
      title: Breadcrumb
      type: object
      properties:
        name:
          type: string
        url:
          type: string
    CTMoneyDetails:
      title: CTMoneyDetails
      type: object
      properties:
        redeemCTAmount:
          type: number
          format: double
        redeemCTMoney:
          type: boolean
    CancellationRequestEntryInput:
      title: CancellationRequestEntryInput
      required:
      - orderEntryNumber
      - quantity
      type: object
      properties:
        orderEntryNumber:
          type: integer
          description: Order entry number of the cancelled product
          format: int32
          example: 1
        quantity:
          type: integer
          description: Quantity of the product which belongs to the order entry and
            is requested to be cancelled
          format: int64
          example: 5
      description: Representation of a cancellation request entry input for an order
    CancellationRequestEntryInputList:
      title: CancellationRequestEntryInputList
      required:
      - cancellationRequestEntryInputs
      type: object
      properties:
        cancellationReason:
          type: string
        cancellationRequestEntryInputs:
          type: array
          description: Cancellation request entry inputs which contain information
            about the order entries which are requested to be cancelled
          items:
            $ref: '#/components/schemas/CancellationRequestEntryInput'
        notes:
          type: string
      description: Representation of a cancellation request entry input list for an
        order
    CardType:
      title: CardType
      type: object
      properties:
        code:
          type: string
          description: Card type code
        name:
          type: string
          description: Card type name
      description: Representation of a Card Type
    CardTypeList:
      title: CardTypeList
      type: object
      properties:
        cardTypes:
          type: array
          description: List of card types
          items:
            $ref: '#/components/schemas/CardType'
      description: Representation of a Card Type List
    Cart:
      title: Cart
      type: object
      properties:
        appliedOrderPromotions:
          type: array
          description: List of applied order promotions
          items:
            $ref: '#/components/schemas/PromotionResult'
        appliedProductPromotions:
          type: array
          description: List of applied product promotions
          items:
            $ref: '#/components/schemas/PromotionResult'
        appliedVouchers:
          type: array
          description: List of applied vouchers
          items:
            $ref: '#/components/schemas/Voucher'
        availableDeliveryModes:
          type: array
          description: List of available delivery modes for banner and store
          items:
            $ref: '#/components/schemas/DeliveryMode'
        billingAddress:
          $ref: '#/components/schemas/AddressData'
        calculated:
          type: boolean
          description: Flag showing if order is calculated
        code:
          type: string
          description: Code number of order
        collectorEmail:
          type: string
        collectorName:
          type: string
        curbsideEligibility:
          type: boolean
          description: curbsideEligibility
        deliveryAddress:
          $ref: '#/components/schemas/Address'
        deliveryCost:
          $ref: '#/components/schemas/Price'
        deliveryItemsQuantity:
          type: integer
          description: Quantity of delivery items
          format: int64
        deliveryMode:
          $ref: '#/components/schemas/DeliveryMode'
        deliveryOrderGroups:
          type: array
          description: List of delivery order entries group
          items:
            $ref: '#/components/schemas/DeliveryOrderEntryGroup'
        description:
          type: string
          description: Description of the cart
        dropOffInstructions:
          type: string
        entries:
          type: array
          description: List of order entries
          items:
            $ref: '#/components/schemas/OrderEntry'
        entryGroups:
          type: array
          items:
            $ref: '#/components/schemas/EntryGroup'
        expirationTime:
          type: string
          description: Date of cart expiration time
          format: date-time
        feeMessages:
          type: array
          description: Fee Messages (eco fees, tire recycle fees and core charges)
          items:
            $ref: '#/components/schemas/CtcFeeMessage'
        guid:
          type: string
          description: Guest user id identifier
        handlingFee:
          type: number
          format: double
        hasProductsToShip:
          type: boolean
          description: Product available to Ship
        hasRORProduct:
          type: boolean
        hasStoreAutoServices:
          type: boolean
        isAppointmentRequested:
          type: boolean
        isLoyaltyRedemptionEnabled:
          type: boolean
        isSpecialOrder:
          type: boolean
          description: Is Special Order Indicator
        loyaltyCardNumber:
          type: string
        maxAllowableCTMoney:
          type: number
          format: double
        name:
          type: string
          description: Name of the cart
        net:
          type: boolean
          description: Flag stating iv value is net-value
        orderDiscounts:
          $ref: '#/components/schemas/Price'
        orderPickupInPerson:
          $ref: '#/components/schemas/CtcOrderPickupInPerson'
        orderThreshold:
          type: number
          format: double
        paymentInfo:
          $ref: '#/components/schemas/PaymentDetails'
        phoneNumber:
          type: string
        pickUpInstoreFee:
          type: number
          format: double
        pickupItemsQuantity:
          type: integer
          description: Quantity of pickup items
          format: int64
        pickupLocation:
          type: string
        pickupLocationType:
          type: string
        pickupMethod:
          type: string
        pickupOrderGroups:
          type: array
          description: List of pickup order entry group
          items:
            $ref: '#/components/schemas/PickupOrderEntryGroup'
        potentialCTMoney:
          type: number
          format: double
        potentialOrderPromotions:
          type: array
          description: List of potential order promotions for cart
          items:
            $ref: '#/components/schemas/PromotionResult'
        potentialProductPromotions:
          type: array
          description: List of potential product promotions for cart
          items:
            $ref: '#/components/schemas/PromotionResult'
        priceRebate:
          $ref: '#/components/schemas/ctcPrice'
        productDiscounts:
          $ref: '#/components/schemas/Price'
        redeemCTAmount:
          type: number
          format: double
        redeemCTMoney:
          type: boolean
        reservationData:
          $ref: '#/components/schemas/CtcReservationData'
        saveForLaterCode:
          type: string
        saveTime:
          type: string
          description: Date of saving cart
          format: date-time
        savedBy:
          $ref: '#/components/schemas/Principal'
        signatureRequired:
          type: boolean
        site:
          type: string
          description: Site
        store:
          type: string
          description: Store
        storeWhiteGloveFee:
          $ref: '#/components/schemas/CtcStoreWhiteGloveFeeData'
        subTotal:
          $ref: '#/components/schemas/Price'
        taxLines:
          type: array
          items:
            $ref: '#/components/schemas/CtcTax'
        totalDiscounts:
          $ref: '#/components/schemas/Price'
        totalEcoFees:
          type: number
          format: double
        totalItems:
          type: integer
          format: int32
        totalPrice:
          $ref: '#/components/schemas/Price'
        totalPriceWithTax:
          $ref: '#/components/schemas/Price'
        totalRebates:
          type: number
          format: double
        totalSavings:
          type: number
          format: double
        totalTax:
          $ref: '#/components/schemas/Price'
        totalUnitCount:
          type: integer
          description: Total unit count
          format: int32
        user:
          $ref: '#/components/schemas/Principal'
        vehicleIdentificationNumber:
          type: string
        whiteGloveServiceType:
          type: string
          description: white Glove Service Type
          enum:
          - CURBSIDE
          - IN_HOME_DELIVERY
          - IN_HOME_DELIVERY_PACKAGING_REMOVAL
      description: Representation of a Cart
    CartList:
      title: CartList
      type: object
      properties:
        carts:
          type: array
          description: List of carts
          items:
            $ref: '#/components/schemas/Cart'
      description: Representation of a Cart list
    CartModification:
      title: CartModification
      type: object
      properties:
        deliveryModeChanged:
          type: boolean
          description: Delivery mode changed
        entry:
          $ref: '#/components/schemas/OrderEntry'
        handlingFee:
          type: number
          format: double
        orderThreshold:
          type: number
          format: double
        quantity:
          type: integer
          description: Final quantity after cart modification
          format: int64
        quantityAdded:
          type: integer
          description: Quantity added with cart modification
          format: int64
        statusCode:
          type: string
          description: Status code of cart modification
        statusMessage:
          type: string
          description: Status message
      description: Representation of a Cart modification
    CartModificationList:
      title: CartModificationList
      type: object
      properties:
        cartModifications:
          type: array
          description: List of cart modifications
          items:
            $ref: '#/components/schemas/CartModification'
        guid:
          type: string
        isSpecialOrder:
          type: boolean
          description: Is Special Order Indicator
      description: Representation of a Cart modification list
    Catalog:
      title: Catalog
      type: object
      properties:
        catalogVersions:
          type: array
          description: List of versions of catalog
          items:
            $ref: '#/components/schemas/CatalogVersion'
        id:
          type: string
          description: Identifier of abstract catalog item
        image:
          $ref: '#/components/schemas/Image'
        lastModified:
          type: string
          description: Date of last modification
          format: date-time
        name:
          type: string
          description: Name of abstract catalog item
        url:
          type: string
          description: Url address of abstract catalog item
      description: Representation of an Catalog
    CatalogList:
      title: CatalogList
      type: object
      properties:
        catalogs:
          type: array
          description: List of catalog items
          items:
            $ref: '#/components/schemas/Catalog'
      description: Representation of a Catalog List
    CatalogVersion:
      title: CatalogVersion
      type: object
      properties:
        categories:
          type: array
          description: List of category hierarchies
          items:
            $ref: '#/components/schemas/CtcCategoryHierarchy'
        id:
          type: string
          description: Identifier of abstract catalog item
        image:
          $ref: '#/components/schemas/Image'
        lastModified:
          type: string
          description: Date of last modification
          format: date-time
        name:
          type: string
          description: Name of abstract catalog item
        url:
          type: string
          description: Url address of abstract catalog item
      description: Representation of a Catalog Version
    Category:
      title: Category
      type: object
      properties:
        code:
          type: string
          description: Code of the category
        image:
          $ref: '#/components/schemas/Image'
        lowStockThreshold:
          type: integer
          description: Low Stock Threshold
          format: int32
        name:
          type: string
          description: Name of the category
        url:
          type: string
          description: URL of the category
      description: Representation of a Category
    ClassLoader:
      title: ClassLoader
      type: object
      properties:
        definedPackages:
          type: array
          items:
            $ref: '#/components/schemas/Package'
        name:
          type: string
        parent:
          $ref: '#/components/schemas/ClassLoader'
        registeredAsParallelCapable:
          type: boolean
        unnamedModule:
          $ref: '#/components/schemas/Module'
    Classification:
      title: Classification
      type: object
      properties:
        code:
          type: string
          description: Code of the classification
        features:
          type: array
          description: List of features for given classification
          items:
            $ref: '#/components/schemas/Feature'
        name:
          type: string
          description: Name of the classification
      description: Representation of a Classification
    CompleteOrderConsignmentParameter:
      title: CompleteOrderConsignmentParameter
      type: object
      properties:
        baseCTMOTCEarned:
          type: string
        code:
          type: string
          description: 13 digits of order code
        cpp:
          type: string
        ctfsGlobalBonusCTMOTC:
          type: string
        dlrStlmBonusCTMOTC:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/CtcPosOrderItem'
        language:
          type: string
        lmsErrorMessage:
          type: string
        location:
          type: string
          description: 5 digits of location
        loyaltyNumber:
          type: string
        loyaltyStoreFlag:
          type: string
        operatorId:
          type: string
        pointsBalance:
          type: string
        pointsBase:
          type: string
        pointsBonus:
          type: string
        pointsCredit:
          type: string
        pointsTotal:
          type: string
        posTransactionId:
          type: string
        tenders:
          type: array
          items:
            $ref: '#/components/schemas/CtcPosTender'
        terminalId:
          type: string
          description: 4 digits of terminal ID
        timestamp:
          type: string
        totalStlmCTMOTC:
          type: string
        transactionTotal:
          type: string
        transactionTotalNationalTax:
          type: string
        transactionTotalProvincialTax:
          type: string
        transactionTotalTax:
          type: string
      description: Consignment parameter from VPOS to complete order.
    ConfigurationInfo:
      title: ConfigurationInfo
      type: object
      properties:
        configurationLabel:
          type: string
          description: Label of configuration info
        configurationValue:
          type: string
          description: Value of configuration info
        configuratorType:
          type: string
          description: Type of configuration info
        status:
          type: string
          description: Status of configuration info
      description: Representation of a Configuration Info
    Consent:
      title: Consent
      type: object
      properties:
        code:
          type: string
          description: Code of consent
        consentGivenDate:
          type: string
          description: Date of consenting
          format: date-time
        consentWithdrawnDate:
          type: string
          description: Consent withdrawn date
          format: date-time
      description: Representation of a Consent
    ConsentTemplate:
      title: ConsentTemplate
      type: object
      properties:
        currentConsent:
          $ref: '#/components/schemas/Consent'
        description:
          type: string
          description: Consent template description
        id:
          type: string
          description: Consent template identifier
        name:
          type: string
          description: Consent template name
        version:
          type: integer
          description: Consent template version
          format: int32
      description: Representation of a Consent Template
    ConsentTemplateList:
      title: ConsentTemplateList
      type: object
      properties:
        consentTemplates:
          type: array
          description: List of consent templates
          items:
            $ref: '#/components/schemas/ConsentTemplate'
      description: Representation of a Consent Template List
    Consignment:
      title: Consignment
      type: object
      properties:
        cancelReason:
          type: string
        cancelledBy:
          type: string
        cancelledFrom:
          type: string
        code:
          type: string
          description: Consignment code
        deliveryPointOfService:
          $ref: '#/components/schemas/PointOfService'
        description:
          type: string
        entries:
          type: array
          description: List of consignment entries
          items:
            $ref: '#/components/schemas/ConsignmentEntry'
        pickupCode:
          type: string
        pickupDeskLocation:
          type: string
        pickupLocationType:
          type: string
        previousStatus:
          type: string
        qrCodeUrl:
          type: string
        shipmentPackage:
          type: array
          items:
            $ref: '#/components/schemas/CtcShipmentPackage'
        shippingAddress:
          $ref: '#/components/schemas/Address'
        status:
          type: string
          description: Consignment status
        statusDate:
          type: string
          description: Consignment status date
          format: date-time
        statusDisplay:
          type: string
          description: Consignment status display
        totalPrice:
          type: number
          format: double
        totalTax:
          type: number
          format: double
        trackingID:
          type: string
          description: Consignment tracking identifier
      description: Representation of a Consignment
    ConsignmentEntry:
      title: ConsignmentEntry
      type: object
      properties:
        basePrice:
          type: number
          format: double
        code:
          type: string
        coreCharge:
          type: number
          format: double
        environmentalFeeEntriesTotal:
          type: number
          format: double
        etaMax:
          type: string
          format: date-time
        etaMin:
          type: string
          format: date-time
        orderEntry:
          $ref: '#/components/schemas/OrderEntry'
        quantity:
          type: integer
          description: Quantity value of Consignment entry
          format: int64
        repairOrderNumber:
          type: string
        shippedQuantity:
          type: integer
          description: Shipped quantity
          format: int64
        totalPrice:
          type: number
          format: double
      description: Representation of a Consignment Entry
    ConsignmentEntryExtendPickup:
      title: ConsignmentEntryExtendPickup
      type: object
      properties:
        code:
          type: string
        orderEntry:
          $ref: '#/components/schemas/OrderEntryExtendPickup'
    ConsignmentExtendPickup:
      title: ConsignmentExtendPickup
      type: object
      properties:
        code:
          type: string
        entries:
          type: array
          items:
            $ref: '#/components/schemas/ConsignmentEntryExtendPickup'
    Country:
      title: Country
      type: object
      properties:
        isocode:
          type: string
          description: Country code in iso format
        name:
          type: string
          description: Name of the country
      description: Response body fields which will be returned while fetching the
        list of countries. The DTO is in XML or .json format
    CountryData:
      title: CountryData
      type: object
      properties:
        isocode:
          type: string
        name:
          type: string
    CountryList:
      title: CountryList
      type: object
      properties:
        countries:
          type: array
          description: This is the list of Country fields that should be returned
            in the response body
          items:
            $ref: '#/components/schemas/Country'
      description: List of countries
    CtcAddressDetails:
      title: CtcAddressDetails
      type: object
      properties:
        addressLine1:
          type: string
        addressLine2:
          type: string
        city:
          type: string
        postalCode:
          type: string
        province:
          type: string
    CtcBaseProductDetails:
      title: CtcBaseProductDetails
      type: object
      properties:
        badges:
          type: array
          items:
            type: string
        breadCrumbData:
          type: array
          items:
            $ref: '#/components/schemas/BreadCrumbData'
        categoryCodes:
          type: array
          items:
            type: string
        code:
          type: string
        corporateStatus:
          type: string
        description:
          type: string
        featureBulletDescriptions:
          type: array
          items:
            type: string
        features:
          type: array
          items:
            $ref: '#/components/schemas/ProductFeatureData'
        fitmentTypeCode:
          type: string
        hotDealThreshold:
          type: number
          format: double
        hreflangLinkData:
          type: array
          items:
            $ref: '#/components/schemas/HreflangLinkData'
        installationEligible:
          type: boolean
        isServiceProduct:
          type: boolean
        limitedTimeThreshold:
          type: number
          format: double
        lowStockThreshold:
          type: integer
          format: int32
        medias:
          type: array
          items:
            $ref: '#/components/schemas/BaseProductImageData'
        name:
          type: string
        primaryCategoryPath:
          type: string
        primarySellingBanner:
          type: string
        productBrand:
          type: string
        productManualLinks:
          type: array
          items:
            type: string
        productReferences:
          type: array
          items:
            $ref: '#/components/schemas/BaseProductReferenceData'
        productWheelTypeCode:
          type: string
        rating:
          $ref: '#/components/schemas/CtcRatingData'
        tireRoadRatings:
          type: array
          items:
            $ref: '#/components/schemas/CtcTireRoadRatingData'
        variantMatrix:
          type: array
          items:
            $ref: '#/components/schemas/VariantMatrixData'
        variantOptions:
          type: array
          items:
            $ref: '#/components/schemas/BaseProductVariantOptionData'
        warrantyMessage:
          type: string
    CtcBaseProductListDetails:
      title: CtcBaseProductListDetails
      type: object
      properties:
        badges:
          type: array
          items:
            type: string
        code:
          type: string
        featureBullets:
          type: array
          items:
            $ref: '#/components/schemas/ProductFeatureBulletData'
        images:
          type: array
          items:
            $ref: '#/components/schemas/ProductListImageData'
        name:
          type: string
        productBrand:
          type: string
        rating:
          $ref: '#/components/schemas/CtcRatingData'
        specifications:
          type: array
          items:
            $ref: '#/components/schemas/ProductListSpecificationData'
        url:
          type: string
        variantOptions:
          type: array
          items:
            $ref: '#/components/schemas/ProductListVariantOptionData'
    CtcBaseProductListDto:
      title: CtcBaseProductListDto
      type: object
      properties:
        productsList:
          type: array
          items:
            $ref: '#/components/schemas/CtcBaseProductListDetails'
    CtcCancelReason:
      title: CtcCancelReason
      type: object
      properties:
        reasons:
          type: array
          items:
            type: string
    CtcCardDetails:
      title: CtcCardDetails
      type: object
      properties:
        expiryDate:
          type: string
        maskedPan:
          type: string
        referenceNumber:
          type: string
    CtcCartEntryRequest:
      title: CtcCartEntryRequest
      type: object
      properties:
        entryNumbers:
          type: array
          items:
            type: integer
            format: int32
    CtcCategoryHierarchy:
      title: CtcCategoryHierarchy
      type: object
      properties:
        breadcrumbData:
          type: array
          items:
            $ref: '#/components/schemas/Breadcrumb'
        canonicalURL:
          type: string
        categoryWheelType:
          type: string
          description: Category wheel type
        currentCategoryImage:
          $ref: '#/components/schemas/Image'
        description:
          type: string
          description: Ctc Category Description
        displayInNavigation:
          type: boolean
        fitmentRequired:
          type: boolean
          description: is Fitment required
        hreflangLinkData:
          type: array
          items:
            $ref: '#/components/schemas/HreflangLink'
        id:
          type: string
          description: Identifier of abstract catalog item
        image:
          $ref: '#/components/schemas/Image'
        isRelatedCategory:
          type: boolean
          description: is Related Category
        lastModified:
          type: string
          description: Date of last modification
          format: date-time
        metaRobot:
          type: string
        name:
          type: string
          description: Name of abstract catalog item
        noCrawl:
          type: boolean
        order:
          type: integer
          format: int32
        productListFormat:
          type: string
        seoCopyBlock:
          type: string
        seoDescription:
          type: string
        seoTitle:
          type: string
        subcategories:
          type: array
          description: List of subcategory hierarchies
          items:
            $ref: '#/components/schemas/CtcCategoryHierarchy'
        url:
          type: string
          description: Url address of abstract catalog item
      description: Representation of a CtcCategory Hierarchy
    CtcCustomerInfo:
      title: CtcCustomerInfo
      type: object
      properties:
        addressDetails:
          $ref: '#/components/schemas/CtcAddressDetails'
        cardDetails:
          $ref: '#/components/schemas/CtcCardDetails'
        ecommCustomerId:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        loyaltyDetails:
          $ref: '#/components/schemas/CtcLoyaltyDetails'
        phone:
          type: string
    CtcDeliveryAddressData:
      title: CtcDeliveryAddressData
      type: object
      properties:
        line1:
          type: string
        postalCode:
          type: string
    CtcDeliveryDateRange:
      title: CtcDeliveryDateRange
      type: object
      properties:
        endDate:
          type: string
          format: date-time
        startDate:
          type: string
          format: date-time
    CtcDeliveryModeData:
      title: CtcDeliveryModeData
      type: object
      properties:
        code:
          type: string
    CtcDropOffInstructions:
      title: CtcDropOffInstructions
      type: object
      properties:
        instructions:
          type: string
        signatureRequired:
          type: boolean
    CtcEdEligibility:
      title: CtcEdEligibility
      type: object
      properties:
        eligible:
          type: boolean
    CtcEtaDate:
      title: CtcEtaDate
      type: object
      properties:
        etaType:
          type: string
        etaValue:
          type: string
    CtcEtaDateMap:
      title: CtcEtaDateMap
      type: object
      properties:
        ctcEtaDates:
          type: array
          items:
            $ref: '#/components/schemas/CtcEtaDate'
    CtcFeeMessage:
      title: CtcFeeMessage
      type: object
      properties:
        categoryCode:
          type: string
        feeDisclaimerMessage:
          type: string
        feeTitle:
          type: string
        feeValue:
          type: string
        tooltipHeader:
          type: string
        tooltipMessage:
          type: string
        type:
          type: string
    CtcFeeMessageCatListRequest:
      title: CtcFeeMessageCatListRequest
      type: object
      properties:
        categoryCodes:
          type: array
          items:
            type: string
    CtcFeeMessageData:
      title: CtcFeeMessageData
      type: object
      properties:
        categoryCode:
          type: string
        feeDisclaimerMessage:
          type: string
        feeTitle:
          type: string
        feeValue:
          type: string
        tooltipHeader:
          type: string
        tooltipMessage:
          type: string
        type:
          type: string
    CtcFeeMessageList:
      title: CtcFeeMessageList
      type: object
      properties:
        feeMessages:
          type: array
          items:
            $ref: '#/components/schemas/CtcFeeMessage'
    CtcFeeMessageListData:
      title: CtcFeeMessageListData
      type: object
      properties:
        feeMessages:
          type: array
          items:
            $ref: '#/components/schemas/CtcFeeMessageData'
    CtcGenericPosOrder:
      title: CtcGenericPosOrder
      type: object
      properties:
        authorizationNumber:
          type: string
        code:
          type: string
        entryMode:
          type: string
        errorCode:
          type: string
        errorMessage:
          type: string
        isoResponseCode:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/GetDeliveryFeeItemDth'
        language:
          type: string
        location:
          type: string
        monerisResponseCode:
          type: string
        monerisSequenceNo:
          type: string
        monerisTerminalId:
          type: string
        operatorId:
          type: string
        terminalId:
          type: string
        timestamp:
          type: string
      description: Common response for POS getting order details call
    CtcGenericPosResult:
      title: CtcGenericPosResult
      type: object
      properties:
        code:
          type: string
        errorCode:
          type: string
        errorMessage:
          type: string
        language:
          type: string
        location:
          type: string
    CtcGlobalValues:
      title: CtcGlobalValues
      type: object
      properties:
        globalProperties:
          type: array
          items:
            $ref: '#/components/schemas/CtcPropertyValue'
    CtcLoyaltyDetails:
      title: CtcLoyaltyDetails
      type: object
      properties:
        loyaltyNumber:
          type: string
        loyaltyProgram:
          type: string
    CtcMegaNavCatalogVersionData:
      title: CtcMegaNavCatalogVersionData
      type: object
      properties:
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CtcMegaNavCategoryData'
        id:
          type: string
        name:
          type: string
        url:
          type: string
    CtcMegaNavCategoryData:
      title: CtcMegaNavCategoryData
      type: object
      properties:
        currentCategoryImage:
          $ref: '#/components/schemas/CtcMegaNavImageData'
        id:
          type: string
        name:
          type: string
        order:
          type: integer
          format: int32
        subcategories:
          type: array
          items:
            $ref: '#/components/schemas/CtcMegaNavCategoryData'
        url:
          type: string
    CtcMegaNavImageData:
      title: CtcMegaNavImageData
      type: object
      properties:
        url:
          type: string
    CtcMiniCartData:
      title: CtcMiniCartData
      type: object
      properties:
        deliveryAddress:
          $ref: '#/components/schemas/CtcDeliveryAddressData'
        entries:
          type: array
          items:
            $ref: '#/components/schemas/CtcMiniCartEntryData'
        guid:
          type: string
    CtcMiniCartEntryData:
      title: CtcMiniCartEntryData
      type: object
      properties:
        cartEntryReference:
          type: string
        ctcProduct:
          $ref: '#/components/schemas/CtcMiniCartProductData'
        deliveryMode:
          $ref: '#/components/schemas/CtcDeliveryModeData'
        entryNumber:
          type: integer
          format: int32
        isBulk:
          type: boolean
        quantity:
          type: integer
          format: int64
        vehicleInformation:
          $ref: '#/components/schemas/CtcVehicleInformationData'
    CtcMiniCartProductData:
      title: CtcMiniCartProductData
      type: object
      properties:
        code:
          type: string
        isServiceProduct:
          type: boolean
    CtcOrderHoldingConfigurationData:
      title: CtcOrderHoldingConfigurationData
      type: object
      properties:
        code:
          type: string
        current:
          type: boolean
        defaultConfiguration:
          type: boolean
        name:
          type: string
        type:
          type: string
    CtcOrderPickupInPerson:
      title: CtcOrderPickupInPerson
      type: object
      properties:
        emailAddress:
          type: string
        firstName:
          type: string
        lastName:
          type: string
    CtcOrderReturn:
      title: CtcOrderReturn
      type: object
      properties:
        requestCreatedDate:
          type: string
          format: date-time
        returnEntries:
          type: array
          items:
            $ref: '#/components/schemas/CtcOrderReturnEntry'
    CtcOrderReturnEntry:
      title: CtcOrderReturnEntry
      type: object
      properties:
        entryNumber:
          type: integer
          format: int32
        packageIds:
          type: array
          items:
            type: string
        quantity:
          type: integer
          format: int64
        totalPrice:
          $ref: '#/components/schemas/Price'
    CtcPickupLocationRequest:
      title: CtcPickupLocationRequest
      type: object
      properties:
        orderPickupInPerson:
          $ref: '#/components/schemas/CtcOrderPickupInPerson'
        pickupLocation:
          type: string
    CtcPosCompleteOrder:
      title: CtcPosCompleteOrder
      type: object
      properties:
        authorizationNumber:
          type: string
        code:
          type: string
        entryMode:
          type: string
        errorCode:
          type: string
        errorMessage:
          type: string
        language:
          type: string
        location:
          type: string
        monerisSequenceNo:
          type: string
        monerisTerminalId:
          type: string
        posTransactionId:
          type: string
        terminalId:
          type: string
        timestamp:
          type: string
      description: Response for POS completing order call
    CtcPosCompleteParameter:
      title: CtcPosCompleteParameter
      type: object
      properties:
        baseCTMOTCEarned:
          type: string
        code:
          type: string
          description: 13 digits of order code
        ctfsGlobalBonusCTMOTC:
          type: string
        dlrStlmBonusCTMOTC:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/CtcPosOrderItem'
        language:
          type: string
        lmsErrorMessage:
          type: string
        location:
          type: string
          description: 5 digits of location
        loyaltyNumber:
          type: string
        loyaltyStoreFlag:
          type: string
        operatorId:
          type: string
        pointsBalance:
          type: string
        pointsBase:
          type: string
        pointsBonus:
          type: string
        pointsCredit:
          type: string
        pointsTotal:
          type: string
        posTransactionId:
          type: string
        tenders:
          type: array
          items:
            $ref: '#/components/schemas/CtcPosTender'
        terminalId:
          type: string
          description: 4 digits of terminal ID
        timestamp:
          type: string
        totalStlmCTMOTC:
          type: string
        transactionTotal:
          type: string
        transactionTotalNationalTax:
          type: string
        transactionTotalProvincialTax:
          type: string
        transactionTotalTax:
          type: string
      description: Parameter from VPOS to complete order.
    CtcPosOrder:
      title: CtcPosOrder
      type: object
      properties:
        code:
          type: string
        ctmaFlag:
          type: string
        ecommOrderDate:
          type: string
        errorCode:
          type: string
        errorMessage:
          type: string
        items:
          type: array
          xml:
            name: items
            attribute: false
            wrapped: true
          items:
            $ref: '#/components/schemas/CtcPosOrderItem'
        language:
          type: string
        location:
          type: string
        loyaltyNumber:
          type: string
        orderPickupCode:
          type: string
        tenders:
          type: array
          xml:
            name: tenders
            attribute: false
            wrapped: true
          items:
            $ref: '#/components/schemas/CtcPosTender'
        transactionTotal:
          type: string
        transactionTotalTax:
          type: string
      description: Response for POS getting order details call
    CtcPosOrderAwareParameter:
      title: CtcPosOrderAwareParameter
      type: object
      properties:
        baseCTMOTCEarned:
          type: string
        cancelledIndicator:
          type: string
        code:
          type: string
          description: 13 digits of order code
        ctfsGlobalBonusCTMOTC:
          type: string
        dlrStlmBonusCTMOTC:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/CtcPosOrderItem'
        language:
          type: string
        lmsErrorMessage:
          type: string
        location:
          type: string
          description: 5 digits of location
        loyaltyNumber:
          type: string
        loyaltyStoreFlag:
          type: string
        originalPosTransactionId:
          type: string
        pointsBalance:
          type: string
        pointsBase:
          type: string
        pointsBonus:
          type: string
        pointsCredit:
          type: string
        pointsTotal:
          type: string
        posTransactionId:
          type: string
        refundedDTHItems:
          type: array
          items:
            $ref: '#/components/schemas/CtcPosOrderRefundedDTHItemData'
        terminalId:
          type: string
          description: 4 digits of terminal ID
        timestamp:
          type: string
        totalPromoBonusCTMOTC:
          type: string
        totalStlmCTMOTC:
          type: string
        transactionLoyaltyRefunded:
          type: string
        transactionTotal:
          type: string
        transactionTotalNationalTax:
          type: string
        transactionTotalProvincialTax:
          type: string
        transactionTotalTax:
          type: string
      description: Parameter from VPOS for order processing.
    CtcPosOrderEntry:
      title: CtcPosOrderEntry
      type: object
      properties:
        allowedQuantity:
          type: integer
          format: int32
        language:
          type: string
        location:
          type: string
        statusCode:
          type: string
        statusMessage:
          type: string
      description: Response for Order Line Status call
    CtcPosOrderItem:
      title: CtcPosOrderItem
      type: object
      properties:
        bnsOffrngCode:
          type: string
        dispositionResult:
          type: integer
          format: int32
        itemName:
          type: string
        itemNumber:
          type: string
        matched:
          type: boolean
        price:
          type: string
        productLine:
          type: boolean
        promoPrice:
          type: string
        quantity:
          type: string
        returnReason:
          type: integer
          format: int32
        returnType:
          type: integer
          format: int32
        totalPromoBnsCTMOTC:
          type: string
      description: Item response for POS getting order details call
    CtcPosOrderRefundedDTHItemData:
      title: CtcPosOrderRefundedDTHItemData
      type: object
      properties:
        itemNumber:
          type: string
        refundedDTHFee:
          type: string
    CtcPosTender:
      title: CtcPosTender
      type: object
      properties:
        authorizationNumber:
          type: string
        cardReferenceNumber:
          type: string
        eliteStatus:
          type: string
        entryMode:
          type: string
        financingPlanID:
          type: string
        financingPlanType:
          type: string
        financingReceiptMsgEN:
          type: string
        financingReceiptMsgFR:
          type: string
        isoResponseCode:
          type: string
        linkedToLoyaltyCard:
          type: string
        loyaltyCardNumber:
          type: string
        maskedAccountNumber:
          type: string
        monerisResponseCode:
          type: string
        monerisSequenceNumber:
          type: string
        monerisTerminalId:
          type: string
        tenderAmount:
          type: string
        tenderType:
          type: string
      description: Contains Tender information for POS
    CtcProductCategoryHierarchy:
      title: CtcProductCategoryHierarchy
      type: object
      properties:
        id:
          type: string
        lowStockThreshold:
          type: integer
          format: int32
        name:
          type: string
        subcategory:
          $ref: '#/components/schemas/CtcProductCategoryHierarchy'
    CtcProductKeyFeatureBullet:
      title: CtcProductKeyFeatureBullet
      type: object
      properties:
        description:
          type: string
    CtcProductShippingFee:
      title: CtcProductShippingFee
      type: object
      properties:
        shippingFee:
          $ref: '#/components/schemas/Price'
    CtcProductsRequest:
      title: CtcProductsRequest
      type: object
      properties:
        productCodes:
          type: array
          items:
            type: string
    CtcProfileCardRequest:
      title: CtcProfileCardRequest
      type: object
      properties:
        cardReferenceNumber:
          type: string
        hppToken:
          type: string
        newCard:
          type: boolean
    CtcProfileCardResponse:
      title: CtcProfileCardResponse
      type: object
      properties:
        message:
          type: string
        status:
          type: string
    CtcPropertyValue:
      title: CtcPropertyValue
      type: object
      properties:
        code:
          type: string
        value:
          type: string
    CtcRating:
      title: CtcRating
      type: object
      properties:
        averageRating:
          type: number
          format: double
        numberOfReviews:
          type: integer
          format: int32
    CtcRatingData:
      title: CtcRatingData
      type: object
      properties:
        averageRating:
          type: number
          format: double
        numberOfReviews:
          type: integer
          format: int32
    CtcRebate:
      title: CtcRebate
      type: object
      properties:
        endDate:
          type: string
        greyCopyMessage:
          type: string
        instant:
          type: string
        isPercentUsed:
          type: boolean
        iumap:
          type: string
        iumapDiscount:
          type: number
          format: double
        message:
          type: string
        nonIumapDiscount:
          type: number
          format: double
        pdfLink:
          type: string
        percentDiscountValue:
          type: number
          format: double
        postTaxRebateAmount:
          type: number
          format: double
        postTaxRebateIncluded:
          type: boolean
        preTaxRebateAmount:
          type: number
          format: double
        preTaxRebateIncluded:
          type: boolean
        priceAfterRebate:
          type: number
          format: double
        quantityPer:
          type: integer
          format: int32
        startDate:
          type: string
        tooltipHeader:
          type: string
        tooltipMessage:
          type: string
        value:
          type: number
          format: double
    CtcReleaseVersionData:
      title: CtcReleaseVersionData
      type: object
      properties:
        branch:
          type: string
        commit:
          type: string
        commit_date:
          type: string
        status:
          type: string
        version:
          type: string
    CtcReservationContainer:
      title: CtcReservationContainer
      type: object
      properties:
        availableQuantity:
          type: integer
          format: int32
        maxETA:
          type: integer
          format: int32
        minETA:
          type: integer
          format: int32
        reservedQuantity:
          type: integer
          format: int32
    CtcReservationData:
      title: CtcReservationData
      type: object
      properties:
        banner:
          type: string
        reservationEntries:
          type: array
          items:
            $ref: '#/components/schemas/CtcReservationResponseEntry'
        reservationId:
          type: string
        store:
          type: string
    CtcReservationIsOnlineIndicator:
      title: CtcReservationIsOnlineIndicator
      type: object
      properties:
        orderable:
          type: string
        sellable:
          type: string
    CtcReservationResponse:
      title: CtcReservationResponse
      type: object
      properties:
        cart:
          $ref: '#/components/schemas/Cart'
        reservation:
          $ref: '#/components/schemas/CtcReservationData'
    CtcReservationResponseEntry:
      title: CtcReservationResponseEntry
      type: object
      properties:
        atCorporate:
          $ref: '#/components/schemas/CtcReservationContainer'
        atStore:
          $ref: '#/components/schemas/CtcReservationContainer'
        cartEntryNumber:
          type: string
        isOnline:
          $ref: '#/components/schemas/CtcReservationIsOnlineIndicator'
        requestedQuantity:
          type: integer
          format: int32
        sku:
          type: string
    CtcSaveForLater:
      title: CtcSaveForLater
      type: object
      properties:
        code:
          type: string
        deliveryAddress:
          $ref: '#/components/schemas/Address'
        entries:
          type: array
          items:
            $ref: '#/components/schemas/OrderEntry'
        entryGroups:
          type: array
          items:
            $ref: '#/components/schemas/EntryGroup'
        pagination:
          $ref: '#/components/schemas/pagination'
    CtcShipmentPackage:
      title: CtcShipmentPackage
      type: object
      properties:
        externalPackageId:
          type: string
        height:
          type: string
        length:
          type: string
        packageId:
          type: string
        shipmentId:
          type: string
        trackingId:
          type: string
        trackingURL:
          type: string
        weight:
          type: string
    CtcSkuEtaDates:
      title: CtcSkuEtaDates
      type: object
      properties:
        ctcEtaDates:
          type: array
          items:
            $ref: '#/components/schemas/CtcEtaDate'
        product:
          type: string
        store:
          type: string
    CtcSkuMinMaxEta:
      title: CtcSkuMinMaxEta
      type: object
      properties:
        maxEta:
          type: integer
          format: int32
        minEta:
          type: integer
          format: int32
        product:
          type: string
        store:
          type: string
    CtcSleConfigurationData:
      title: CtcSleConfigurationData
      type: object
      properties:
        currentConfiguration:
          type: boolean
        defaultConfiguration:
          type: boolean
        description:
          type: string
        disclaimer:
          type: string
        dueTimes:
          type: string
        enabled:
          type: boolean
        key:
          type: string
        leadTime:
          type: integer
          format: int32
        name:
          type: string
        plannedConfiguration:
          type: boolean
        sleExtension:
          type: boolean
    CtcStoreWhiteGloveFeeData:
      title: CtcStoreWhiteGloveFeeData
      type: object
      properties:
        curbsideWhiteGloveFee:
          type: number
          format: double
        inHomeDeliveryPackagingRemovalWhiteGloveFee:
          type: number
          format: double
        inHomeDeliveryWhiteGloveFee:
          type: number
          format: double
    CtcStoreZone:
      title: CtcStoreZone
      type: object
      properties:
        bulkZoneId:
          type: string
        parcelZoneId:
          type: string
        storeDistance:
          type: integer
          format: int32
    CtcStoresMinMaxEtaRequest:
      title: CtcStoresMinMaxEtaRequest
      type: object
      properties:
        ctcSkuMinMaxEta:
          type: array
          items:
            $ref: '#/components/schemas/CtcSkuMinMaxEta'
    CtcStoresMinMaxEtaResponse:
      title: CtcStoresMinMaxEtaResponse
      type: object
      properties:
        ctcSkuEtaDates:
          type: array
          items:
            $ref: '#/components/schemas/CtcSkuEtaDates'
    CtcSyncReceiptState:
      title: CtcSyncReceiptState
      type: object
      properties:
        consignments:
          type: array
          items:
            type: string
        receiptType:
          type: string
          enum:
          - PURCHASE
          - REFUND
    CtcTax:
      title: CtcTax
      type: object
      properties:
        taxName:
          type: string
        taxValue:
          $ref: '#/components/schemas/CtcTaxPrice'
    CtcTaxPrice:
      title: CtcTaxPrice
      type: object
      properties:
        formattedValue:
          type: string
        value:
          type: number
    CtcThresholdValues:
      title: CtcThresholdValues
      type: object
      properties:
        hotDealThreshold:
          type: number
          format: double
        limitedTimeThreshold:
          type: number
          format: double
    CtcTireRoadRatingData:
      title: CtcTireRoadRatingData
      type: object
      properties:
        ratingId:
          type: string
        value:
          type: string
    CtcTriangleMasterCard:
      title: CtcTriangleMasterCard
      type: object
      properties:
        brbTransactionId:
          type: string
        customerInfo:
          $ref: '#/components/schemas/CtcCustomerInfo'
    CtcVariantCategoryData:
      title: CtcVariantCategoryData
      type: object
      properties:
        code:
          type: string
        name:
          type: string
    CtcVariantImageData:
      title: CtcVariantImageData
      type: object
      properties:
        angleOrCrop:
          type: string
        mediaType:
          type: string
        priority:
          type: integer
          format: int32
        url:
          type: string
    CtcVariantProductDetails:
      title: CtcVariantProductDetails
      type: object
      properties:
        code:
          type: string
        description:
          type: string
        featureBulletDescriptions:
          type: array
          items:
            type: string
        features:
          type: array
          items:
            $ref: '#/components/schemas/ProductFeatureData'
        formattedCode:
          type: string
        medias:
          type: array
          items:
            $ref: '#/components/schemas/CtcVariantImageData'
        name:
          type: string
        productBrand:
          type: string
        rating:
          $ref: '#/components/schemas/CtcRatingData'
        warrantyMessage:
          type: string
    CtcVariantProductListDetails:
      title: CtcVariantProductListDetails
      type: object
      properties:
        badges:
          type: array
          items:
            type: string
        code:
          type: string
        formattedCode:
          type: string
        images:
          type: array
          items:
            $ref: '#/components/schemas/ProductListImageData'
        name:
          type: string
        productBrand:
          type: string
        rating:
          $ref: '#/components/schemas/CtcRatingData'
        url:
          type: string
    CtcVariantProductListDto:
      title: CtcVariantProductListDto
      type: object
      properties:
        productsList:
          type: array
          items:
            $ref: '#/components/schemas/CtcVariantProductListDetails'
    CtcVariantValueCategoryData:
      title: CtcVariantValueCategoryData
      type: object
      properties:
        name:
          type: string
        variantId:
          type: string
    CtcVehicleInformation:
      title: CtcVehicleInformation
      type: object
      properties:
        baseVehicleId:
          type: string
        body:
          type: string
        boltPattern:
          type: string
        engineConfigId:
          type: string
        make:
          type: string
        model:
          type: string
        options:
          type: string
        type:
          type: string
          enum:
          - ATV_UTV
          - CAR_TRUCK
          - MOTORCYCLE
          - WATERCRAFT
          - SNOWMOBILE
        year:
          type: string
    CtcVehicleInformationData:
      title: CtcVehicleInformationData
      type: object
      properties:
        baseVehicleId:
          type: string
        body:
          type: string
        boltPattern:
          type: string
        engineConfigId:
          type: string
        make:
          type: string
        model:
          type: string
        options:
          type: string
        type:
          type: string
          enum:
          - ATV_UTV
          - CAR_TRUCK
          - MOTORCYCLE
          - WATERCRAFT
          - SNOWMOBILE
        year:
          type: string
    CtcVoidReturnOrderParameter:
      title: CtcVoidReturnOrderParameter
      type: object
      properties:
        code:
          type: string
          description: 13 digits of order code
        location:
          type: string
          description: 5 digits of location
        posTransactionId:
          type: string
        terminalId:
          type: string
          description: 4 digits of terminal ID
      description: Parameter from VPOS to make Void Return call
    CtcWishlist2:
      title: CtcWishlist2
      type: object
      properties:
        description:
          type: string
        entries:
          type: array
          items:
            $ref: '#/components/schemas/CtcWishlist2Entry'
        isDefault:
          type: boolean
        name:
          type: string
        uid:
          type: string
    CtcWishlist2Entry:
      title: CtcWishlist2Entry
      type: object
      properties:
        addedDate:
          type: string
        availableActions:
          $ref: '#/components/schemas/WishlistAvailableActions'
        brand:
          type: string
        corporateStatus:
          type: string
        medias:
          type: array
          items:
            $ref: '#/components/schemas/Image'
        name:
          type: string
        primaryCategoryPath:
          type: string
        productCode:
          type: string
        productStatus:
          type: string
        rating:
          type: number
          format: double
        url:
          type: string
        variantMatrix:
          type: array
          items:
            $ref: '#/components/schemas/VariantMatrixElement'
        vehicleInformation:
          $ref: '#/components/schemas/CtcVehicleInformation'
    CtcWishlist2EntryList:
      title: CtcWishlist2EntryList
      type: object
      properties:
        wishListEntries:
          type: array
          items:
            $ref: '#/components/schemas/CtcWishlist2EntryRequest'
    CtcWishlist2EntryRequest:
      title: CtcWishlist2EntryRequest
      type: object
      properties:
        product:
          $ref: '#/components/schemas/ctcProduct'
        vehicleInformation:
          $ref: '#/components/schemas/CtcVehicleInformation'
    CtcWishlist2List:
      title: CtcWishlist2List
      type: object
      properties:
        wishListData:
          type: array
          items:
            $ref: '#/components/schemas/CtcWishlist2'
    CtcWishlistData:
      title: CtcWishlistData
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/CtcWishlistEntryData'
    CtcWishlistDataList:
      title: CtcWishlistDataList
      type: object
      properties:
        wishLists:
          type: array
          items:
            $ref: '#/components/schemas/CtcWishlistData'
    CtcWishlistEntryAvailableActionData:
      title: CtcWishlistEntryAvailableActionData
      type: object
      properties:
        isAddToCartEnabled:
          type: boolean
    CtcWishlistEntryData:
      title: CtcWishlistEntryData
      type: object
      properties:
        availableActions:
          $ref: '#/components/schemas/CtcWishlistEntryAvailableActionData'
        brand:
          type: string
        categoryName:
          type: string
        corporateStatus:
          type: string
        divisionName:
          type: string
        feeMessages:
          type: array
          items:
            $ref: '#/components/schemas/CtcFeeMessageData'
        fineLineName:
          type: string
        isBulk:
          type: boolean
        lobName:
          type: string
        medias:
          type: array
          items:
            $ref: '#/components/schemas/ProductListImageData'
        name:
          type: string
        productCode:
          type: string
        rating:
          $ref: '#/components/schemas/CtcRatingData'
        subCategoryName:
          type: string
        vehicleInformation:
          $ref: '#/components/schemas/CtcVehicleInformationData'
    CtcWishlistProductData:
      title: CtcWishlistProductData
      type: object
      properties:
        code:
          type: string
        vehicleInformation:
          $ref: '#/components/schemas/CtcVehicleInformationData'
    CtcWishlistProductsData:
      title: CtcWishlistProductsData
      type: object
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/CtcWishlistProductData'
    Currency:
      title: Currency
      type: object
      properties:
        active:
          type: boolean
          description: Boolean flag whether currency is active
        isocode:
          type: string
          description: Code of the currency in iso format
        name:
          type: string
          description: Name of the currency
        symbol:
          type: string
          description: Symbol of the currency
      description: Representation of a Currency
    CurrencyList:
      title: CurrencyList
      type: object
      properties:
        currencies:
          type: array
          description: List of currencies
          items:
            $ref: '#/components/schemas/Currency'
      description: Representation of a Currency List
    CustomerCoupon:
      title: CustomerCoupon
      type: object
      properties:
        allProductsApplicable:
          type: boolean
          description: Indicates whether the coupon is applicable for all products
        couponId:
          type: string
          description: Coupon identifier
        description:
          type: string
          description: Description of the coupon
        endDate:
          type: string
          description: End date of the coupon
          format: date-time
        name:
          type: string
          description: Name of the coupon
        notificationOn:
          type: boolean
          description: Indicates if notification is enabled or disabled
        startDate:
          type: string
          description: Start date of the coupon
          format: date-time
        status:
          type: string
          description: Status of the coupon
          example: Effective
      description: Customer coupon
    CustomerCoupon2Customer:
      title: CustomerCoupon2Customer
      type: object
      properties:
        coupon:
          $ref: '#/components/schemas/CustomerCoupon'
        customer:
          $ref: '#/components/schemas/User'
      description: Customer coupon for customer
    CustomerCouponNotification:
      title: CustomerCouponNotification
      type: object
      properties:
        coupon:
          $ref: '#/components/schemas/CustomerCoupon'
        customer:
          $ref: '#/components/schemas/User'
        status:
          type: string
          description: Notification status
          example: EFFECTIVESENT
      description: Customer coupon notification
    CustomerCouponSearchResult:
      title: CustomerCouponSearchResult
      type: object
      properties:
        coupons:
          type: array
          description: List of coupon
          items:
            $ref: '#/components/schemas/CustomerCoupon'
        pagination:
          $ref: '#/components/schemas/pagination'
        sorts:
          type: array
          description: Sorting information
          items:
            $ref: '#/components/schemas/sort'
      description: Customer coupon search result
    DeliveryMode:
      title: DeliveryMode
      type: object
      properties:
        code:
          type: string
          description: Code of the delivery mode
        deliveryCost:
          $ref: '#/components/schemas/Price'
        description:
          type: string
          description: Description of the delivery mode
        isApplicable:
          type: boolean
          description: Defines if this delivery mode is applicable to cart
        name:
          type: string
          description: Name of the delivery mode
        rejectionReason:
          type: string
          description: Code of ineligibility reason (empty if cart is eligible)
          enum:
          - DISTANCE_EXCEEDED
          - WEIGHT_EXCEEDED
          - SIZE_EXCEEDED
          - PRODUCT_NOT_ELIGIBLE
          - TOGGLED_OFF
      description: Representation of a Delivery mode
    DeliveryModeList:
      title: DeliveryModeList
      type: object
      properties:
        deliveryModes:
          type: array
          description: List of delivery modes
          items:
            $ref: '#/components/schemas/DeliveryMode'
      description: Representation of a Delivery mode list
    DeliveryOrderEntryGroup:
      title: DeliveryOrderEntryGroup
      type: object
      properties:
        deliveryAddress:
          $ref: '#/components/schemas/Address'
        entries:
          type: array
          description: List of order entries
          items:
            $ref: '#/components/schemas/OrderEntry'
        quantity:
          type: integer
          description: Quantity of order entries in a group
          format: int64
        totalPriceWithTax:
          $ref: '#/components/schemas/Price'
      description: Representation of a Delivery Order Entry Group
    DocumentShareCartProductPrice:
      title: DocumentShareCartProductPrice
      type: object
      properties:
        coreCharge:
          type: number
          format: double
        environmentFees:
          type: array
          items:
            $ref: '#/components/schemas/EnvironmentFees'
        unitPrice:
          type: number
          format: double
    DocumentShareCartRequest:
      title: DocumentShareCartRequest
      type: object
      properties:
        automotiveConsignment:
          $ref: '#/components/schemas/AutomotiveConsignment'
        banner:
          type: string
        emails:
          type: array
          items:
            type: string
        language:
          type: string
        name:
          type: string
        phones:
          type: array
          items:
            type: string
        source:
          type: string
        store:
          type: string
    DocumentShareCartResponse:
      title: DocumentShareCartResponse
      type: object
      properties:
        sharedCartValidDuration:
          type: integer
          format: int32
    EntryGroup:
      title: EntryGroup
      type: object
      properties:
        children:
          type: array
          items:
            $ref: '#/components/schemas/EntryGroup'
        erroneous:
          type: boolean
        externalReferenceId:
          type: string
        groupNumber:
          type: integer
          format: int32
        groupType:
          type: string
        label:
          type: string
        priority:
          type: integer
          format: int32
    Environment:
      title: Environment
      type: object
      properties:
        activeProfiles:
          type: array
          items:
            type: string
        defaultProfiles:
          type: array
          items:
            type: string
    EnvironmentFees:
      title: EnvironmentFees
      type: object
      properties:
        price:
          type: number
          format: double
        sku:
          type: string
    ExtendPickupRequest:
      title: ExtendPickupRequest
      type: object
      properties:
        additionalDays:
          type: integer
          format: int32
    Facet:
      title: Facet
      type: object
      properties:
        category:
          type: boolean
          description: Flag stating if facet is category facet
        multiSelect:
          type: boolean
          description: Flag stating if facet is multiSelect
        name:
          type: string
          description: Name of the facet
        priority:
          type: integer
          description: Priority value of the facet
          format: int32
        topValues:
          type: array
          description: List of top facet values
          items:
            $ref: '#/components/schemas/FacetValue'
        values:
          type: array
          description: List of all facet values
          items:
            $ref: '#/components/schemas/FacetValue'
        visible:
          type: boolean
          description: Flag stating if facet is visible
      description: Representation of a Facet
    FacetValue:
      title: FacetValue
      type: object
      properties:
        count:
          type: integer
          description: Count of the facet value
          format: int64
        name:
          type: string
          description: Name of the facet value
        query:
          $ref: '#/components/schemas/SearchState'
        selected:
          type: boolean
          description: Flag stating if facet value is selected
      description: Representation of a Facet Value
    Feature:
      title: Feature
      type: object
      properties:
        code:
          type: string
          description: Code of the feature
        comparable:
          type: boolean
          description: Flag defining it feature is comparable
        description:
          type: string
          description: Description of the feature
        featureUnit:
          $ref: '#/components/schemas/FeatureUnit'
        featureValues:
          type: array
          description: List of feature values
          items:
            $ref: '#/components/schemas/FeatureValue'
        name:
          type: string
          description: Name of the feature
        position:
          type: integer
          format: int32
        range:
          type: boolean
          description: Range number of the reature
        type:
          type: string
          description: Type of the feature
        visibility:
          type: boolean
      description: Representation of a Feature
    FeatureUnit:
      title: FeatureUnit
      type: object
      properties:
        name:
          type: string
          description: Name of the feature unit
        symbol:
          type: string
          description: Symbol of the feature unit
        unitType:
          type: string
          description: Type of the feature unit
      description: Representation of a Feature Unit
    FeatureValue:
      title: FeatureValue
      type: object
      properties:
        value:
          type: string
          description: Value of the feature
      description: Representation of a Feature Value
    FeatureValueData:
      title: FeatureValueData
      type: object
      properties:
        value:
          type: string
    FutureStock:
      title: FutureStock
      type: object
      properties:
        date:
          type: string
          description: Date of future stock
          format: date-time
        formattedDate:
          type: string
          description: Date of future stock expressed in text value
        stock:
          $ref: '#/components/schemas/Stock'
      description: Representation of a Future Stock
    GeoPoint:
      title: GeoPoint
      type: object
      properties:
        latitude:
          type: number
          description: Geopoint latitude
          format: double
        longitude:
          type: number
          description: Geopoint longitude
          format: double
      description: Representation of a GeoPoint
    GetDeliveryFeeItemDth:
      title: GetDeliveryFeeItemDth
      type: object
      properties:
        itemNumber:
          type: string
        originalDTHFee:
          type: number
        returnedDTHFee:
          type: number
    GroupStatistic:
      title: GroupStatistic
      type: object
      properties:
        groupId:
          type: string
        groupName:
          type: string
        message:
          type: string
    HreflangLink:
      title: HreflangLink
      type: object
      properties:
        href:
          type: string
        hreflang:
          type: string
    HreflangLinkData:
      title: HreflangLinkData
      type: object
      properties:
        href:
          type: string
        hreflang:
          type: string
    Image:
      title: Image
      type: object
      properties:
        altText:
          type: string
          description: Tooltip content which is visible while image mouse hovering
        angleOrCrop:
          type: string
          description: defines whether image is an angle one or crop
        assetID:
          type: string
          description: Media object code
        assetName:
          type: string
          description: Asset Name
        assetType:
          type: string
          description: Asset Type
        code:
          type: string
          description: Media code
        damCreateDate:
          type: string
          description: DAM CreateDate
          format: date-time
        format:
          type: string
          description: Format of the image, can be zoom, product, thumbnail, store,
            cartIcon, etc.
        galleryIndex:
          type: integer
          description: Index of the image while displayed in gallery
          format: int32
        imageSpinIndicator:
          type: boolean
          description: Media Spin Indicator
        imageType:
          type: string
          description: Type of the image, can be PRIMARY or GALLERY
          enum:
          - PRIMARY
          - GALLERY
        isListingThumbnailImage:
          type: boolean
          description: Media ThumbnailList
        isPrimary:
          type: boolean
          description: Image isPrimary
        language:
          type: string
          description: language
        mediaType:
          type: string
          description: Media Type
        order:
          type: string
          description: Media Sequence
        packageView:
          type: string
          description: defines the package views
        productImageType:
          type: string
          description: product Image Type
        url:
          type: string
          description: URL address of the image
        videoImageThumbnailDAMPath:
          type: string
          description: Media Thumbnail DAM URL for Video
        videoImageThumbnailURL:
          type: string
          description: Thumbnail URL For Video
        videoPlatform:
          type: string
          description: Video hosting platform
        videoShortDescription:
          type: string
          description: Short description about the video
        videoTitle:
          type: string
          description: Tile of the video
        videoType:
          type: string
          description: Video Type
      description: Representation of an Image
    InitializePaymentRequest:
      title: InitializePaymentRequest
      type: object
      properties:
        agentId:
          type: string
        baseConsignmentID:
          type: string
        browserIPAddress:
          type: string
        cardExpiryDates:
          type: string
        cardReferenceNumber:
          type: string
        cardReferenceNumbers:
          type: string
        city:
          type: string
        country:
          type: string
        currencyCode:
          type: string
        disableGiftCards:
          type: string
        echoData:
          type: string
        financingFlag:
          type: string
        financingPlan:
          type: string
        financingPlanDescEN:
          type: string
        financingPlanDescFR:
          type: string
        financingPlanMinAmt:
          type: string
        financingPlanType:
          type: string
        firstName:
          type: string
        giftCardEligibleAmount:
          type: string
        guestCheckout:
          type: string
        hppToken:
          type: string
        language:
          type: string
        lastName:
          type: string
        localTransactionDate:
          type: string
        localTransactionTime:
          type: string
        loyaltyCardNumber:
          type: string
        loyaltyEligibleAmount:
          type: string
        loyaltyRedemptionAmount:
          type: string
        loyaltyTransactionId:
          type: string
        merchantId:
          type: string
        merchantKey:
          type: string
        orderNumber:
          type: string
        paymentOnAccountExpiryDate:
          type: string
        paymentOnAccountPan:
          type: string
        paymentType:
          type: string
        postalCode:
          type: string
        promptCvd:
          type: string
        province:
          type: string
        redirectCancel:
          type: string
        redirectError:
          type: string
        redirectSuccess:
          type: string
        requestId:
          type: string
        retrievalReferenceNumber:
          type: string
        semafoneEnabled:
          type: string
        shoppingCartType:
          $ref: '#/components/schemas/ShoppingCartType'
        storeNumber:
          type: string
        streetAddress:
          type: string
        streetAddress2:
          type: string
        structuredData:
          $ref: '#/components/schemas/StructuredData'
        transactionAmount:
          type: string
        transactionType:
          type: string
        version:
          type: integer
          format: int32
    InitializePaymentResponse:
      title: InitializePaymentResponse
      type: object
      properties:
        hppToken:
          type: string
        passFail:
          type: string
        paymentUrl:
          type: string
        requestId:
          type: string
        responseCodes:
          type: array
          items:
            type: integer
        validUntil:
          type: integer
          format: int64
    LabourSharedCartProduct:
      title: LabourSharedCartProduct
      type: object
      properties:
        productPrice:
          $ref: '#/components/schemas/SharedCartProductPrice'
        quantity:
          type: integer
          format: int64
        sku:
          type: string
    LabourSharedCartRequest:
      title: LabourSharedCartRequest
      type: object
      properties:
        author:
          type: string
        comment:
          type: string
        emails:
          type: array
          items:
            type: string
        language:
          type: string
        name:
          type: string
        phones:
          type: array
          items:
            type: string
        products:
          type: array
          items:
            $ref: '#/components/schemas/LabourSharedCartProduct'
        proposedRepairOrderNumber:
          type: string
        store:
          type: string
    Language:
      title: Language
      type: object
      properties:
        active:
          type: boolean
          description: true/false indicator when the language is active
        isocode:
          type: string
          description: iso code of the language
        name:
          type: string
          description: name of the language
        nativeName:
          type: string
          description: name the language in native form
      description: Representation of a Language
    LanguageList:
      title: LanguageList
      type: object
      properties:
        languages:
          type: array
          description: This is the list of Language fields that should be returned
            in the response body
          items:
            $ref: '#/components/schemas/Language'
      description: Lists all available languages (all languages used for a particular
        store). If the list of languages for a base store is empty, a list of all
        languages available in the system will be returned
    LineItemType:
      title: LineItemType
      type: object
      properties:
        description:
          type: string
        itemNumber:
          type: string
        name:
          type: string
        quantity:
          type: string
        taxAmount:
          type: string
        unitPrice:
          type: string
    LmsProfileRequest:
      title: LmsProfileRequest
      type: object
      properties:
        lmsProfileId:
          type: string
    MemberList:
      title: MemberList
      type: object
      properties:
        members:
          type: array
          description: List of member
          items:
            $ref: '#/components/schemas/Principal'
      description: Representation of a Member List
    MerchandiseSharedCartProduct:
      title: MerchandiseSharedCartProduct
      type: object
      properties:
        orderLineDTH:
          type: boolean
        productPrice:
          $ref: '#/components/schemas/SharedCartProductPrice'
        quantity:
          type: integer
          format: int64
        rebate:
          $ref: '#/components/schemas/CtcRebate'
        sku:
          type: string
        vehicleInformation:
          $ref: '#/components/schemas/SharedCartVehicleInformation'
    MerchandiseSharedCartRequest:
      title: MerchandiseSharedCartRequest
      type: object
      properties:
        author:
          type: string
        comment:
          type: string
        curbsidePickUp:
          type: boolean
        deliveryTypes:
          type: array
          items:
            type: string
        distanceToPostalCode:
          type: number
          format: double
        emails:
          type: array
          items:
            type: string
        isReplacementNeeded:
          type: boolean
        language:
          type: string
        name:
          type: string
        orderEntryId:
          type: string
        orderId:
          type: string
        phones:
          type: array
          items:
            type: string
        postalCode:
          type: string
        products:
          type: array
          items:
            $ref: '#/components/schemas/MerchandiseSharedCartProduct'
        store:
          type: string
        wgServiceType:
          type: string
    MergeCartRequest:
      title: MergeCartRequest
      type: object
      properties:
        code:
          type: string
        entryCodes:
          type: array
          items:
            type: string
    Module:
      title: Module
      type: object
      properties:
        annotations:
          type: array
          items:
            $ref: '#/components/schemas/Annotation'
        classLoader:
          $ref: '#/components/schemas/ClassLoader'
        declaredAnnotations:
          type: array
          items:
            $ref: '#/components/schemas/Annotation'
        descriptor:
          $ref: '#/components/schemas/ModuleDescriptor'
        layer:
          $ref: '#/components/schemas/ModuleLayer'
        name:
          type: string
        named:
          type: boolean
        packages:
          type: array
          items:
            type: string
    ModuleDescriptor:
      title: ModuleDescriptor
      type: object
      properties:
        automatic:
          type: boolean
        open:
          type: boolean
    ModuleLayer:
      title: ModuleLayer
      type: object
    OTCRequest:
      title: OTCRequest
      type: object
      properties:
        selectedEntries:
          type: array
          items:
            type: string
        templateCode:
          type: string
    OnlineOrderingData:
      title: OnlineOrderingData
      type: object
      properties:
        enabled:
          type: boolean
        managementAllowed:
          type: boolean
        pendingConfiguration:
          type: boolean
    OnlineOrderingRequest:
      title: OnlineOrderingRequest
      type: object
      properties:
        onlineOrderingEnabled:
          type: boolean
    OpeningSchedule:
      title: OpeningSchedule
      type: object
      properties:
        code:
          type: string
          description: Code of the opening schedule
        name:
          type: string
          description: Name of the opening schedule
        specialDayOpeningList:
          type: array
          description: List of special opening days
          items:
            $ref: '#/components/schemas/SpecialOpeningDay'
        weekDayOpeningList:
          type: array
          description: List of weekday opening days
          items:
            $ref: '#/components/schemas/WeekdayOpeningDay'
      description: Representation of an Opening schedule
    Order:
      title: Order
      type: object
      properties:
        appliedOrderPromotions:
          type: array
          description: List of applied order promotions
          items:
            $ref: '#/components/schemas/PromotionResult'
        appliedProductPromotions:
          type: array
          description: List of applied product promotions
          items:
            $ref: '#/components/schemas/PromotionResult'
        appliedVouchers:
          type: array
          description: List of applied vouchers
          items:
            $ref: '#/components/schemas/Voucher'
        calculated:
          type: boolean
          description: Flag showing if order is calculated
        cancellable:
          type: boolean
          description: Boolean flag showing if order is cancellable
          example: true
        code:
          type: string
          description: Code number of order
        collectorEmail:
          type: string
        collectorName:
          type: string
        consignments:
          type: array
          description: List of consignment
          items:
            $ref: '#/components/schemas/Consignment'
        created:
          type: string
          description: Date of order creation
          format: date-time
        deliveryAddress:
          $ref: '#/components/schemas/Address'
        deliveryCost:
          $ref: '#/components/schemas/Price'
        deliveryItemsQuantity:
          type: integer
          description: Quantity of delivery items
          format: int64
        deliveryMode:
          $ref: '#/components/schemas/DeliveryMode'
        deliveryOrderGroups:
          type: array
          description: List of delivery order entries group
          items:
            $ref: '#/components/schemas/DeliveryOrderEntryGroup'
        deliveryStatus:
          type: string
          description: Order delivery status
        deliveryStatusDisplay:
          type: string
          description: Order delivery status display
        dropOffInstructions:
          type: string
        entries:
          type: array
          description: List of order entries
          items:
            $ref: '#/components/schemas/OrderEntry'
        entryGroups:
          type: array
          items:
            $ref: '#/components/schemas/EntryGroup'
        fraudSessionId:
          type: string
          description: Fraud Session Id
        guestCustomer:
          type: boolean
          description: Flag showing if customer is Guest customer
        guid:
          type: string
          description: Guest user id identifier
        handlingFee:
          type: number
          format: double
        hasProductsToShip:
          type: boolean
          description: Product available to Ship
        hasRORProduct:
          type: boolean
        hasStoreAutoServices:
          type: boolean
        isAppointmentRequested:
          type: boolean
        loyaltyCardNumber:
          type: string
        net:
          type: boolean
          description: Flag stating iv value is net-value
        orderDiscounts:
          $ref: '#/components/schemas/Price'
        orderPickupInPerson:
          $ref: '#/components/schemas/CtcOrderPickupInPerson'
        orderThreshold:
          type: number
          format: double
        paymentAddress:
          $ref: '#/components/schemas/Address'
        paymentInfo:
          $ref: '#/components/schemas/PaymentDetails'
        phoneNumber:
          type: string
        pickUpInstoreFee:
          type: number
          format: double
        pickupItemsQuantity:
          type: integer
          description: Quantity of pickup items
          format: int64
        pickupLocationType:
          type: string
        pickupMethod:
          type: string
        pickupOrderGroups:
          type: array
          description: List of pickup order entry group
          items:
            $ref: '#/components/schemas/PickupOrderEntryGroup'
        potentialCTMoney:
          type: number
          format: double
        productDiscounts:
          $ref: '#/components/schemas/Price'
        redeemCTAmount:
          type: number
          format: double
        redeemCTMoney:
          type: boolean
        returnRequestedData:
          type: array
          description: Return requests related to order
          items:
            $ref: '#/components/schemas/CtcOrderReturn'
        returnable:
          type: boolean
          description: Boolean flag showing if order is returnable
          example: true
        signatureRequired:
          type: boolean
        site:
          type: string
          description: Site
        status:
          type: string
          description: Status of order
        statusDisplay:
          type: string
          description: Status display
        store:
          type: string
          description: Store
        storeWhiteGloveFee:
          $ref: '#/components/schemas/CtcStoreWhiteGloveFeeData'
        subTotal:
          $ref: '#/components/schemas/Price'
        taxLines:
          type: array
          items:
            $ref: '#/components/schemas/CtcTax'
        totalDiscounts:
          $ref: '#/components/schemas/Price'
        totalEcoFees:
          type: number
          format: double
        totalItems:
          type: integer
          format: int32
        totalPrice:
          $ref: '#/components/schemas/Price'
        totalPriceWithTax:
          $ref: '#/components/schemas/Price'
        totalRebates:
          type: number
          format: double
        totalSavings:
          type: number
          format: double
        totalTax:
          $ref: '#/components/schemas/Price'
        unconsignedEntries:
          type: array
          description: List of unconsigned order entries
          items:
            $ref: '#/components/schemas/OrderEntry'
        user:
          $ref: '#/components/schemas/Principal'
        vehicleIdentificationNumber:
          type: string
        whiteGloveServiceType:
          type: string
          description: white Glove Service Type
          enum:
          - CURBSIDE
          - IN_HOME_DELIVERY
          - IN_HOME_DELIVERY_PACKAGING_REMOVAL
      description: Representation of an Order
    OrderEntry:
      title: OrderEntry
      type: object
      properties:
        badges:
          type: array
          description: product badges
          items:
            type: string
        basePrice:
          $ref: '#/components/schemas/Price'
        cancellable:
          type: boolean
        cancellableQuantity:
          type: integer
          description: Quantity number of cancellable items in order entry
          format: int64
          example: 5
        cancelledItemsPrice:
          $ref: '#/components/schemas/Price'
        cartEntryReference:
          type: string
          description: In the case of services it holds the variant code of the ProductVariant
            that they are being purchased for.
        configurationInfos:
          type: array
          description: Configuration info of order entry
          items:
            $ref: '#/components/schemas/ConfigurationInfo'
        ctcPrice:
          $ref: '#/components/schemas/ctcPrice'
        ctcProduct:
          $ref: '#/components/schemas/ctcProduct'
        ctcStore:
          $ref: '#/components/schemas/ctcStore'
        deliveryMode:
          $ref: '#/components/schemas/DeliveryMode'
        deliveryPointOfService:
          $ref: '#/components/schemas/PointOfService'
        deliveryPostalCode:
          type: string
        discountValue:
          $ref: '#/components/schemas/Price'
        entryNumber:
          type: integer
          description: Entry number of the order entry
          format: int32
        environmentalFeeEntriesTotal:
          type: number
          description: Environmental Fee Entries Total values
          format: double
        etaMax:
          type: string
        etaMin:
          type: string
        feeMessages:
          type: array
          description: Fee Messages (eco fees, tire recycle fees and core charges)
          items:
            $ref: '#/components/schemas/CtcFeeMessage'
        installationEligible:
          type: boolean
          description: Installation Eligible
        isAutomotive:
          type: boolean
          description: Flag defines if the sku is Automotive part or non-automotive
            based on fitmentTypeCode is available.
        isAvailableInWishlist:
          type: boolean
        isBulk:
          type: boolean
          description: Is Bulk Identifier
        isEligibleForExpressDelivery:
          type: boolean
        isFittedAutomotive:
          type: boolean
          description: Flag defines if the sku is fitted automotive.
        isGrouped:
          type: boolean
          description: Flag defines if the sku is fitted automotive.
        isPackageItem:
          type: boolean
          description: is PackageItem for Auto Package Indicator
        packageId:
          type: string
          description: packageId unique for Auto Package
        product:
          $ref: '#/components/schemas/Product'
        productPrices:
          type: array
          description: product prices
          items:
            $ref: '#/components/schemas/ctcPrice'
        quantity:
          type: integer
          description: Quantity number of items in order entry
          format: int64
        repairOrderRequired:
          type: boolean
          description: Repair Order Required
        returnableQuantity:
          type: integer
          description: Quantity number of returnable items in order entry
          format: int64
          example: 5
        returnedItemsPrice:
          $ref: '#/components/schemas/Price'
        sources:
          type: array
          description: List for sources from which the entry is reserved
          items:
            $ref: '#/components/schemas/Source'
        staggeredGroup:
          type: string
          description: staggeredGroup contains ParentEntryGroup.groupNumber-ChildEntryGrroup.priority
            values
        status:
          type: string
          description: Entry Status
          enum:
          - LIVING
          - UNDER_REVIEW
          - DEAD
          - PRODUCT_ORDERED
          - IN_TRANSIT
          - ON_HOLD
          - CANCELLED
          - ON_ORDER
          - IN_STOCK
          - PRINTED
          - PACKED
          - READY_FOR_PICK_UP
          - CANCELLATION_PENDING
          - COMPLETED
          - PRE_AUTH_ACCEPTED
          - REFUNDED
          - POS_COMPLETED
          - READY_FOR_PACKAGING
          - SHIPPED
          - REFUND_PENDING
          - READY_FOR_STORAGE
          - HYPHEN
        statusSummaryList:
          type: array
          description: List of aggregated status information per entry, relevant if
            the entry is configurable and its configuration contains one or many issues
            in different severities. Note that configurators typically raise such
            issues only in case the parent document is changeable. In this case the
            issues (depending on their severity) need to be fixed before a checkout
            can be done. This means this segment can be present for a cart entry,
            for order entries it will always be empty
          items:
            $ref: '#/components/schemas/StatusSummary'
        storeZoneIds:
          $ref: '#/components/schemas/CtcStoreZone'
        totalPrice:
          $ref: '#/components/schemas/Price'
        unitPrice:
          $ref: '#/components/schemas/Price'
        updateable:
          type: boolean
          description: Flag defining if order entry item is updateable
        url:
          type: string
        vehicleInformation:
          $ref: '#/components/schemas/CtcVehicleInformation'
      description: Representation of an Order entry
    OrderEntryExtendPickup:
      title: OrderEntryExtendPickup
      type: object
      properties:
        entryNumber:
          type: integer
          format: int32
        expirationDate:
          type: string
          format: date-time
    OrderEntryList:
      title: OrderEntryList
      type: object
      properties:
        orderEntries:
          type: array
          description: List of order entries
          items:
            $ref: '#/components/schemas/OrderEntry'
      description: Representation of an Order entry list consumed
    OrderExtendPickupResponse:
      title: OrderExtendPickupResponse
      type: object
      properties:
        code:
          type: string
        consignments:
          type: array
          items:
            $ref: '#/components/schemas/ConsignmentExtendPickup'
    OrderForm:
      title: OrderForm
      type: object
      properties:
        code:
          type: string
        currency:
          $ref: '#/components/schemas/Currency'
        description:
          type: string
        entries:
          type: array
          items:
            $ref: '#/components/schemas/OrderFormEntry'
        user:
          $ref: '#/components/schemas/Principal'
    OrderFormEntry:
      title: OrderFormEntry
      type: object
      properties:
        quantity:
          type: integer
          format: int32
        sku:
          type: string
    OrderFormList:
      title: OrderFormList
      type: object
      properties:
        orderForms:
          type: array
          items:
            $ref: '#/components/schemas/OrderForm'
    OrderHistory:
      title: OrderHistory
      type: object
      properties:
        code:
          type: string
          description: Code of Order History
        guid:
          type: string
          description: Guest user identifier
        placed:
          type: string
          description: Date of placing order
          format: date-time
        status:
          type: string
          description: Status of Order History
        statusDisplay:
          type: string
          description: Status display
        total:
          $ref: '#/components/schemas/Price'
      description: Representation of an Order History
    OrderHistoryList:
      title: OrderHistoryList
      type: object
      properties:
        orders:
          type: array
          description: List of order history items
          items:
            $ref: '#/components/schemas/OrderHistory'
        pagination:
          $ref: '#/components/schemas/deprecatedPagination'
        sorts:
          type: array
          description: List of sorts
          items:
            $ref: '#/components/schemas/Sort'
      description: Representation of an Order History List
    OrderHoldingRequest:
      title: OrderHoldingRequest
      type: object
      properties:
        bulk:
          type: string
        parcel:
          type: string
    OrderSmsNotificationRequest:
      title: OrderSmsNotificationRequest
      type: object
      properties:
        phone:
          type: string
        smsNotificationStatus:
          type: object
          additionalProperties:
            type: boolean
    OrderSmsNotificationResponse:
      title: OrderSmsNotificationResponse
      type: object
      properties:
        orderCode:
          type: string
        phone:
          type: string
        smsNotificationStatus:
          type: object
          additionalProperties:
            type: boolean
    OrderStatusUpdateElement:
      title: OrderStatusUpdateElement
      type: object
      properties:
        baseSiteId:
          type: string
          description: BaseSite identifier
        code:
          type: string
          description: Code of update element of order status
        status:
          type: string
          description: Status of update element
      description: Representation of an Order Status Update Element
    OrderStatusUpdateElementList:
      title: OrderStatusUpdateElementList
      type: object
      properties:
        orderStatusUpdateElements:
          type: array
          description: List of order status update elements
          items:
            $ref: '#/components/schemas/OrderStatusUpdateElement'
      description: Representation of an Order Status Update Element List
    Package:
      title: Package
      type: object
      properties:
        annotations:
          type: array
          items:
            $ref: '#/components/schemas/Annotation'
        declaredAnnotations:
          type: array
          items:
            $ref: '#/components/schemas/Annotation'
        implementationTitle:
          type: string
        implementationVendor:
          type: string
        implementationVersion:
          type: string
        name:
          type: string
        sealed:
          type: boolean
        specificationTitle:
          type: string
        specificationVendor:
          type: string
        specificationVersion:
          type: string
    PaymentDetails:
      title: PaymentDetails
      type: object
      properties:
        accountHolderName:
          type: string
          description: Name of account holder
        billingAddress:
          $ref: '#/components/schemas/Address'
        cardNumber:
          type: string
          description: Payment card number
        cardReferenceNumber:
          type: string
        cardType:
          $ref: '#/components/schemas/CardType'
        defaultPayment:
          type: boolean
          description: Flag to mark if payment the default one
        eligibleForFinancing:
          type: boolean
        expiryMonth:
          type: string
          description: Month of expiration of payment
        expiryYear:
          type: string
          description: Year of expiration of payment
        financingPlanDesc:
          type: string
        financingPlanId:
          type: integer
          format: int32
        id:
          type: string
          description: Unique identifier of payment detail
        isDigitalCard:
          type: boolean
        issueNumber:
          type: string
          description: Issue number
        loyaltyCardNumber:
          type: string
        loyaltyEmail:
          type: string
        loyaltyPostalCode:
          type: string
        maskedCardNumber:
          type: string
        newCreditCard:
          type: boolean
        redeemCTAmount:
          type: number
          format: double
        redeemCTMoney:
          type: boolean
        saveToMyProfile:
          type: boolean
        saved:
          type: boolean
          description: Flag to mark if payment is saved one
        startMonth:
          type: string
          description: Start month from which payment is valid
        startYear:
          type: string
          description: Start year from which payment is valid
        subscriptionId:
          type: string
          description: Identifier of subscription
      description: Representation of a Payment Details
    PaymentDetailsList:
      title: PaymentDetailsList
      type: object
      properties:
        payments:
          type: array
          description: List of payment details
          items:
            $ref: '#/components/schemas/PaymentDetails'
      description: Representation of a Payment details list
    PaymentInfo:
      title: PaymentInfo
      type: object
      properties:
        cardReferenceNumber:
          type: string
        default:
          type: boolean
        maskedCardNumber:
          type: string
        renewalPaymentMethod:
          type: boolean
        type:
          type: string
        validToMonth:
          type: integer
          format: int32
        validToYear:
          type: integer
          format: int32
    PaymentMode:
      title: PaymentMode
      type: object
      properties:
        code:
          type: string
          description: Payment mode code
        description:
          type: string
          description: Payment mode description
        name:
          type: string
          description: Payment mode name
      description: Representation of a Payment Mode
    PaymentModeList:
      title: PaymentModeList
      type: object
      properties:
        paymentModes:
          type: array
          description: List of payment modes
          items:
            $ref: '#/components/schemas/PaymentMode'
      description: Representation of a Payment Mode List
    PaymentRequest:
      title: PaymentRequest
      type: object
      properties:
        mappingLabels:
          type: object
          additionalProperties:
            type: string
        parameters:
          type: object
          additionalProperties:
            type: string
        postUrl:
          type: string
    PickupOrderEntryGroup:
      title: PickupOrderEntryGroup
      type: object
      properties:
        deliveryPointOfService:
          $ref: '#/components/schemas/PointOfService'
        distance:
          type: number
          description: Distance calculated to pickup place
          format: double
        entries:
          type: array
          description: List of order entries
          items:
            $ref: '#/components/schemas/OrderEntry'
        quantity:
          type: integer
          description: Quantity of order entries in a group
          format: int64
        totalPriceWithTax:
          $ref: '#/components/schemas/Price'
      description: Representation of a Pickup Order Entry Group
    PointOfService:
      title: PointOfService
      type: object
      properties:
        address:
          $ref: '#/components/schemas/Address'
        description:
          type: string
          description: Description of the point of service
        displayName:
          type: string
          description: Display name of the point of service
        distanceKm:
          type: number
          description: Distance to the point of service as number value
          format: double
        features:
          type: object
          additionalProperties:
            type: string
          description: List of features for a given point of service
        formattedDistance:
          type: string
          description: Distance to the point of service as text value
        geoPoint:
          $ref: '#/components/schemas/GeoPoint'
        mapIcon:
          $ref: '#/components/schemas/Image'
        name:
          type: string
          description: Name of the point of service
        openingHours:
          $ref: '#/components/schemas/OpeningSchedule'
        storeContent:
          type: string
          description: Store content of given point of service
        storeImages:
          type: array
          description: Collection of images associated with a point of service
          items:
            $ref: '#/components/schemas/Image'
        url:
          type: string
          description: Url address of the point of service
      description: Representation of a Point of service
    PointOfServiceList:
      title: PointOfServiceList
      type: object
      properties:
        pointOfServices:
          type: array
          description: List of points of service
          items:
            $ref: '#/components/schemas/PointOfService'
      description: Representation of a Point of Service List
    PointOfServiceStock:
      title: PointOfServiceStock
      type: object
      properties:
        address:
          $ref: '#/components/schemas/Address'
        description:
          type: string
          description: Description of the point of service
        displayName:
          type: string
          description: Display name of the point of service
        distanceKm:
          type: number
          description: Distance to the point of service as number value
          format: double
        features:
          type: object
          additionalProperties:
            type: string
          description: List of features for a given point of service
        formattedDistance:
          type: string
          description: Distance to the point of service as text value
        geoPoint:
          $ref: '#/components/schemas/GeoPoint'
        mapIcon:
          $ref: '#/components/schemas/Image'
        name:
          type: string
          description: Name of the point of service
        openingHours:
          $ref: '#/components/schemas/OpeningSchedule'
        stockInfo:
          $ref: '#/components/schemas/Stock'
        storeContent:
          type: string
          description: Store content of given point of service
        storeImages:
          type: array
          description: Collection of images associated with a point of service
          items:
            $ref: '#/components/schemas/Image'
        url:
          type: string
          description: Url address of the point of service
      description: Representation of a Point Of Service Stock
    Price:
      title: Price
      type: object
      properties:
        currencyIso:
          type: string
          description: Currency iso format
        formattedValue:
          type: string
          description: Value of price formatted
        maxQuantity:
          type: integer
          description: Maximum quantity of the price value
          format: int64
        minQuantity:
          type: integer
          description: Minimum quantity of the price value
          format: int64
        priceType:
          type: string
          description: Type of the price
          enum:
          - BUY
          - FROM
        value:
          type: number
          description: Value of price in BigDecimal format
      description: Representation of a Price
    PriceRange:
      title: PriceRange
      type: object
      properties:
        maxPrice:
          $ref: '#/components/schemas/ctcPrice'
        minPrice:
          $ref: '#/components/schemas/ctcPrice'
      description: Representation of a Price Range
    PriceRangeList:
      title: PriceRangeList
      type: object
      properties:
        priceRange:
          $ref: '#/components/schemas/PriceRange'
        priceType:
          type: string
          description: Price Type
      description: Representation of a Price Range List
    Principal:
      title: Principal
      type: object
      properties:
        name:
          type: string
          description: Name of the user
        uid:
          type: string
          description: Unique user identifier
      description: Representation of a Principal webservice DTO used for defining
        User data types
    Product:
      title: Product
      type: object
      properties:
        availableForPickup:
          type: boolean
          description: Flag defining if product is available for pickup
        averageRating:
          type: number
          description: Rating number of average value
          format: double
        baseOptions:
          type: array
          description: List of base options related to the product
          items:
            $ref: '#/components/schemas/BaseOption'
        baseProduct:
          type: string
          description: Information about base product
        categories:
          type: array
          description: List of categories product belongs to
          items:
            $ref: '#/components/schemas/Category'
        classifications:
          type: array
          description: List of classifications related to the product
          items:
            $ref: '#/components/schemas/Classification'
        code:
          type: string
          description: Code of the product
        configurable:
          type: boolean
          description: Flag stating if product is configurable
        configuratorType:
          type: string
          description: Configurator type related to the product
        ctcPrice:
          $ref: '#/components/schemas/ctcPrice'
        description:
          type: string
          description: Description of the product
        futureStocks:
          type: array
          description: List of future stocks
          items:
            $ref: '#/components/schemas/FutureStock'
        images:
          type: array
          description: List of images linked to product
          items:
            $ref: '#/components/schemas/Image'
        manufacturer:
          type: string
          description: Data of product manufacturer
        maxOrderQuantity:
          type: integer
          description: Maximum quantity that can be ordered within a single cart
          format: int32
        multidimensional:
          type: boolean
          description: Flag stating if product is multidimentional
        name:
          type: string
          description: Name of the product
        numberOfReviews:
          type: integer
          description: Number of reviews associated with the product
          format: int32
        potentialPromotions:
          type: array
          description: List of potential promotions related to the product
          items:
            $ref: '#/components/schemas/Promotion'
        price:
          $ref: '#/components/schemas/Price'
        priceRange:
          $ref: '#/components/schemas/PriceRange'
        productBrand:
          type: string
          description: Brand of the Product
        productReferences:
          type: array
          description: List of product references
          items:
            $ref: '#/components/schemas/ProductReference'
        purchasable:
          type: boolean
          description: Flag defining if product is purchasable
        reviews:
          type: array
          description: List of reviews associated with the product
          items:
            $ref: '#/components/schemas/Review'
        stock:
          $ref: '#/components/schemas/Stock'
        summary:
          type: string
          description: Product summary
        tags:
          type: array
          description: Tags associated with the product
          items:
            type: string
        url:
          type: string
          description: Url address of the product
        variantMatrix:
          type: array
          description: List of variant matrixes associated with the product
          items:
            $ref: '#/components/schemas/VariantMatrixElement'
        variantOptions:
          type: array
          description: List of variant options related to the product
          items:
            $ref: '#/components/schemas/VariantOption'
        variantType:
          type: string
          description: Variant type of the product
        volumePrices:
          type: array
          description: List of volume prices
          items:
            $ref: '#/components/schemas/Price'
        volumePricesFlag:
          type: boolean
          description: Flag stating if volume price should be displayed
      description: Representation of a Product
    ProductExpressUpdateElement:
      title: ProductExpressUpdateElement
      type: object
      properties:
        catalogId:
          type: string
          description: Catalog identifier
        catalogVersion:
          type: string
          description: Catalog version
        code:
          type: string
          description: Code of product express update element
      description: Representation of a Product Express Update Element
    ProductExpressUpdateElementList:
      title: ProductExpressUpdateElementList
      type: object
      properties:
        productExpressUpdateElements:
          type: array
          description: List of product express update element
          items:
            $ref: '#/components/schemas/ProductExpressUpdateElement'
      description: Representation of a Product Express Update Element List
    ProductFeatureBulletData:
      title: ProductFeatureBulletData
      type: object
      properties:
        description:
          type: string
    ProductFeatureData:
      title: ProductFeatureData
      type: object
      properties:
        code:
          type: string
        name:
          type: string
        unitSymbol:
          type: string
        value:
          type: string
        visibility:
          type: boolean
    ProductList:
      title: ProductList
      type: object
      properties:
        catalog:
          type: string
          description: Catalog of product list
        currentPage:
          type: integer
          description: Number of current page
          format: int32
        products:
          type: array
          description: List of products
          items:
            $ref: '#/components/schemas/Product'
        totalPageCount:
          type: integer
          description: Total page count
          format: int32
        totalProductCount:
          type: integer
          description: Total product count
          format: int32
        version:
          type: string
          description: Version of product list
      description: Representation of a Product List
    ProductListFeatureData:
      title: ProductListFeatureData
      type: object
      properties:
        code:
          type: string
        featureValues:
          type: array
          items:
            $ref: '#/components/schemas/FeatureValueData'
        name:
          type: string
    ProductListImageData:
      title: ProductListImageData
      type: object
      properties:
        altText:
          type: string
        angleOrCrop:
          type: string
        code:
          type: string
        isListingThumbnailImage:
          type: boolean
        mediaType:
          type: string
        priority:
          type: integer
          format: int32
        url:
          type: string
    ProductListSpecificationData:
      title: ProductListSpecificationData
      type: object
      properties:
        features:
          type: array
          items:
            $ref: '#/components/schemas/ProductListFeatureData'
    ProductListVariantOptionData:
      title: ProductListVariantOptionData
      type: object
      properties:
        code:
          type: string
        formattedCode:
          type: string
        images:
          type: array
          items:
            $ref: '#/components/schemas/ProductListImageData'
        specifications:
          type: array
          items:
            $ref: '#/components/schemas/ProductListSpecificationData'
    ProductReference:
      title: ProductReference
      type: object
      properties:
        description:
          type: string
          description: Reference description
        preselected:
          type: boolean
          description: Flag stating if product reference is preselected
        quantity:
          type: integer
          description: Reference quantity
          format: int32
        referenceType:
          type: string
          description: Reference type
        target:
          $ref: '#/components/schemas/Product'
      description: Representation of a Product Reference
    ProductReferenceList:
      title: ProductReferenceList
      type: object
      properties:
        references:
          type: array
          description: List of product references
          items:
            $ref: '#/components/schemas/ProductReference'
      description: Representation of a Product Reference List
    ProductSearchPage:
      title: ProductSearchPage
      type: object
      properties:
        breadcrumbs:
          type: array
          description: List of breadcrumbs info
          items:
            $ref: '#/components/schemas/Breadcrumb'
        categoryCode:
          type: string
          description: Code of category
        currentQuery:
          $ref: '#/components/schemas/SearchState'
        facets:
          type: array
          description: List of facets
          items:
            $ref: '#/components/schemas/Facet'
        freeTextSearch:
          type: string
          description: Free text search
        keywordRedirectUrl:
          type: string
          description: Redirect url address keyword
        pagination:
          $ref: '#/components/schemas/deprecatedPagination'
        products:
          type: array
          description: List of products
          items:
            $ref: '#/components/schemas/Product'
        sorts:
          type: array
          description: List of sorts
          items:
            $ref: '#/components/schemas/Sort'
        spellingSuggestion:
          $ref: '#/components/schemas/SpellingSuggestion'
      description: Representation of a Product Search Page
    Promotion:
      title: Promotion
      type: object
      properties:
        code:
          type: string
          description: Code of the promotion
        couldFireMessages:
          type: array
          description: Message about promotion which is displayed when planning potential
            promotion. This field has higher priority over promotion description
          items:
            type: string
        description:
          type: string
          description: Description of the promotion
        enabled:
          type: boolean
          description: Boolean flag if promotion is enabled
        endDate:
          type: string
          description: Last date of validity of the promotion
          format: date-time
        firedMessages:
          type: array
          description: Message fired while the promotion is active. This is info how
            much you will get when applying the promotion
          items:
            type: string
        priority:
          type: integer
          description: Priority index as numeric value of the promotion. Higher number
            means higher priority
          format: int32
        productBanner:
          $ref: '#/components/schemas/Image'
        promotionGroup:
          type: string
          description: Group of the promotion
        promotionType:
          type: string
          description: Type of the promotion
        restrictions:
          type: array
          description: List of promotion restrictions
          items:
            $ref: '#/components/schemas/PromotionRestriction'
        startDate:
          type: string
          description: The initial date of the promotion
          format: date-time
        title:
          type: string
          description: Promotion title
      description: Representation of a Promotion
    PromotionList:
      title: PromotionList
      type: object
      properties:
        promotions:
          type: array
          description: List of promotions
          items:
            $ref: '#/components/schemas/Promotion'
      description: Representation of a Promotion list
    PromotionOrderEntryConsumed:
      title: PromotionOrderEntryConsumed
      type: object
      properties:
        adjustedUnitPrice:
          type: number
          description: Adjusted unit price for promotion order entry
          format: double
        code:
          type: string
          description: Order entry code
        orderEntryNumber:
          type: integer
          description: Order entry number
          format: int32
        quantity:
          type: integer
          description: Quantity of promotion order entry
          format: int64
      description: Representation of a Promotion order entry consumed
    PromotionRestriction:
      title: PromotionRestriction
      type: object
      properties:
        description:
          type: string
          description: Description of the promotion restriction
        restrictionType:
          type: string
          description: Type of the promotion restriction
      description: Representation of a Promotion Restriction
    PromotionResult:
      title: PromotionResult
      type: object
      properties:
        consumedEntries:
          type: array
          description: List of promotion order entries consumed
          items:
            $ref: '#/components/schemas/PromotionOrderEntryConsumed'
        description:
          type: string
          description: Description of promotion result
        promotion:
          $ref: '#/components/schemas/Promotion'
      description: Representation of a Promotion result
    PromotionResultList:
      title: PromotionResultList
      type: object
      properties:
        promotions:
          type: array
          description: List of promotion results
          items:
            $ref: '#/components/schemas/PromotionResult'
      description: Representation of a Promotion result list
    RedirectView:
      title: RedirectView
      type: object
      properties:
        applicationContext:
          $ref: '#/components/schemas/ApplicationContext'
        attributesMap:
          type: object
          properties: {}
        beanName:
          type: string
        contentType:
          type: string
        exposePathVariables:
          type: boolean
        hosts:
          type: array
          items:
            type: string
        propagateQueryProperties:
          type: boolean
        redirectView:
          type: boolean
        requestContextAttribute:
          type: string
        staticAttributes:
          type: object
          properties: {}
        url:
          type: string
    Region:
      title: Region
      type: object
      properties:
        countryIso:
          type: string
          description: Country code in iso format
        isocode:
          type: string
          description: Country and Region code in iso format
        isocodeShort:
          type: string
          description: Region code in short iso form
        name:
          type: string
          description: Name of the region
      description: Response body fields which will be returned while fetching the
        list of country's regions.
    RegionData:
      title: RegionData
      type: object
      properties:
        countryIso:
          type: string
        isocode:
          type: string
        isocodeShort:
          type: string
        name:
          type: string
    RegionList:
      title: RegionList
      type: object
      properties:
        regions:
          type: array
          description: This is the list of Region fields that should be returned in
            the response body
          items:
            $ref: '#/components/schemas/Region'
      description: List of Regions
    RemoveUserFromGroup:
      title: RemoveUserFromGroup
      type: object
      properties:
        groups:
          type: array
          items:
            type: string
        userId:
          type: string
    RemoveUserFromGroupResponse:
      title: RemoveUserFromGroupResponse
      type: object
      properties:
        groupStatistic:
          type: array
          items:
            $ref: '#/components/schemas/GroupStatistic'
        userId:
          type: string
    ResetPassword:
      title: ResetPassword
      required:
      - newPassword
      - token
      type: object
      properties:
        newPassword:
          type: string
          description: new password string which is required to complete process of
            resetting password
        token:
          type: string
          description: token value which will be generated as unique string that will
            be sent with email to allow user for completing reset-password operation
      description: Representation of a Reset Password
    ReturnRequest:
      title: ReturnRequest
      type: object
      properties:
        cancellable:
          type: boolean
          description: Boolean flag for whether the return request is cancellable
          example: true
        code:
          type: string
          description: Return request code
          example: "00000001"
        creationTime:
          type: string
          description: Date of the return request creation
          format: date-time
        deliveryCost:
          $ref: '#/components/schemas/Price'
        order:
          $ref: '#/components/schemas/Order'
        refundDeliveryCost:
          type: boolean
          description: Boolean flag for whether there is a delivery cost for refund
          example: false
        returnEntries:
          type: array
          description: Entries of the return request which contains information about
            the returned product
          items:
            $ref: '#/components/schemas/ReturnRequestEntry'
        returnLabelDownloadUrl:
          type: string
          description: URL of the return label
        rma:
          type: string
          description: Return merchandise authorization number
          example: "00000001"
        status:
          type: string
          description: Status of return request
        subTotal:
          $ref: '#/components/schemas/Price'
        totalPrice:
          $ref: '#/components/schemas/Price'
      description: Representation of a return request for an order
    ReturnRequestEntry:
      title: ReturnRequestEntry
      type: object
      properties:
        expectedQuantity:
          type: integer
          description: Quantity which is expected to be returned for this return request
            entry
          format: int64
          example: 5
        orderEntry:
          $ref: '#/components/schemas/OrderEntry'
        refundAmount:
          $ref: '#/components/schemas/Price'
      description: Representation of a return request entry which contains information
        about the returned product
    ReturnRequestEntryInput:
      title: ReturnRequestEntryInput
      required:
      - orderEntryNumber
      - quantity
      type: object
      properties:
        orderEntryNumber:
          type: integer
          description: Order entry number of the returned product
          format: int32
          example: 1
        quantity:
          type: integer
          description: Quantity of the product which belongs to the order entry and
            is requested to be returned
          format: int64
          example: 5
      description: Representation of a return request entry input for an order
    ReturnRequestEntryInputList:
      title: ReturnRequestEntryInputList
      required:
      - orderCode
      - returnRequestEntryInputs
      type: object
      properties:
        orderCode:
          type: string
          description: Code of the order which return request is related to
          example: "00000001"
        returnRequestEntryInputs:
          type: array
          description: Return request entry inputs which contain information about
            the order entries which are requested to be returned
          items:
            $ref: '#/components/schemas/ReturnRequestEntryInput'
      description: Representation of a return request entry input list for an order
    ReturnRequestList:
      title: ReturnRequestList
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/deprecatedPagination'
        returnRequests:
          type: array
          description: List of order return requests
          items:
            $ref: '#/components/schemas/ReturnRequest'
        sorts:
          type: array
          description: List of sorts
          items:
            $ref: '#/components/schemas/Sort'
      description: Representation of an Order Return Request List
    ReturnRequestModification:
      title: ReturnRequestModification
      type: object
      properties:
        status:
          type: string
          description: Status of the return request
          enum:
          - CANCELLING
      description: Representation of modifications for a return request
    Review:
      title: Review
      type: object
      properties:
        alias:
          type: string
          description: Alias name for the review
        comment:
          type: string
          description: Review comment
        date:
          type: string
          description: Date of the review
          format: date-time
        headline:
          type: string
          description: Review headline
        id:
          type: string
          description: Identifier of review
        principal:
          $ref: '#/components/schemas/User'
        rating:
          type: number
          description: Review rating value
          format: double
      description: Representation of a Review
    ReviewList:
      title: ReviewList
      type: object
      properties:
        reviews:
          type: array
          description: List of reviews
          items:
            $ref: '#/components/schemas/Review'
      description: Representation of a Review List
    SaveCartResult:
      title: SaveCartResult
      type: object
      properties:
        savedCartData:
          $ref: '#/components/schemas/Cart'
      description: Representation of a Save Cart Result
    SearchQuery:
      title: SearchQuery
      type: object
      properties:
        value:
          type: string
          description: Value of search query
      description: Representation of a Search Query
    SearchState:
      title: SearchState
      type: object
      properties:
        query:
          $ref: '#/components/schemas/SearchQuery'
        url:
          type: string
          description: Url address of search state
      description: Representation of a Search State
    SharedCartEntry:
      title: SharedCartEntry
      type: object
      properties:
        productPrice:
          $ref: '#/components/schemas/DocumentShareCartProductPrice'
        quantity:
          type: integer
          format: int64
        serviceCenterDocumentEntryId:
          type: string
        sku:
          type: string
    SharedCartEntryResponse:
      title: SharedCartEntryResponse
      type: object
      properties:
        adjustedPrice:
          type: number
          format: double
        code:
          type: string
        deliveryPointOfService:
          type: string
        entryNumber:
          type: integer
          format: int32
        fees:
          type: number
          format: double
        isHomeService:
          type: boolean
        isOrderLineDTH:
          type: boolean
        partSelectorId:
          type: string
        priceType:
          type: string
        productName:
          type: string
        productNumber:
          type: string
        promoPrice:
          type: number
          format: double
        quantity:
          type: integer
          format: int32
        rebate:
          $ref: '#/components/schemas/CtcRebate'
        skuEligibleForDelivery:
          type: boolean
        sourceType:
          type: string
        totalPrice:
          type: number
          format: double
        unitPrice:
          type: number
          format: double
    SharedCartEntryTemplate:
      title: SharedCartEntryTemplate
      type: object
      properties:
        entryCode:
          type: string
        imageLinks:
          type: array
          items:
            type: string
        productName:
          type: string
        productNo:
          type: string
        promoPrice:
          $ref: '#/components/schemas/Price'
        quantity:
          type: integer
          format: int64
        sku:
          type: string
        skuDeliveryMode:
          type: string
          enum:
          - PAY_AND_PICKUP
          - DELIVERY_TO_HOME
        unitPrice:
          $ref: '#/components/schemas/Price'
    SharedCartProductPrice:
      title: SharedCartProductPrice
      type: object
      properties:
        adjustedPrice:
          type: number
          format: double
        priceType:
          type: string
        promoPrice:
          type: number
          format: double
        unitPrice:
          type: number
          format: double
    SharedCartResponse:
      title: SharedCartResponse
      type: object
      properties:
        cartId:
          type: string
        deliveryFee:
          type: number
          format: double
        deliveryTypes:
          type: array
          items:
            type: string
        distanceToPostalCode:
          type: number
          format: double
        entries:
          type: array
          items:
            $ref: '#/components/schemas/SharedCartEntryResponse'
        gst:
          type: number
          format: double
        hst:
          type: number
          format: double
        isCurbSidePickup:
          type: boolean
        partSelectors:
          type: array
          items:
            $ref: '#/components/schemas/SharedCartVehicleInformation'
        postalCode:
          type: string
        pst:
          type: number
          format: double
        qst:
          type: number
          format: double
        storeNumber:
          type: string
        subtotal:
          type: number
          format: double
        total:
          type: number
          format: double
        totalTax:
          type: number
          format: double
        wgServiceType:
          type: string
    SharedCartTemplate:
      title: SharedCartTemplate
      type: object
      properties:
        code:
          type: string
        entries:
          type: array
          items:
            $ref: '#/components/schemas/SharedCartEntryTemplate'
        isLabourSharedCart:
          type: boolean
        salesChannel:
          type: string
        storeInfo:
          $ref: '#/components/schemas/StoreInfo'
    SharedCartTemplateLink:
      title: SharedCartTemplateLink
      type: object
      properties:
        link:
          type: string
    SharedCartVehicleInformation:
      title: SharedCartVehicleInformation
      type: object
      properties:
        baseVehicleId:
          type: string
        body:
          type: string
        boltPattern:
          type: string
        engineConfigId:
          type: string
        id:
          type: string
        make:
          type: string
        model:
          type: string
        options:
          type: string
        orderEntryCode:
          type: string
        type:
          type: string
        vehicleId:
          type: string
        year:
          type: string
    ShoppingCartType:
      title: ShoppingCartType
      type: object
      properties:
        lineItems:
          type: array
          items:
            $ref: '#/components/schemas/LineItemType'
        shippingAmount:
          type: string
        totalTaxAmount:
          type: string
    Signifi:
      title: Signifi
      type: object
      properties:
        lockerPin:
          type: string
        lockerRole:
          type: string
    SleRequest:
      title: SleRequest
      type: object
      properties:
        sleConfigurationName:
          type: string
    Sort:
      title: Sort
      type: object
      properties:
        code:
          type: string
          description: Code of Sort
        name:
          type: string
          description: Name of Sort
        selected:
          type: boolean
          description: Flag stating when Sort is selected
      description: Representation a Sort option
    Source:
      title: Source
      type: object
      properties:
        etaMax:
          type: string
        etaMin:
          type: string
        quantity:
          type: integer
          format: int32
        sourceType:
          type: string
    SpecialOpeningDay:
      title: SpecialOpeningDay
      type: object
      properties:
        closed:
          type: boolean
          description: Flag stating if special opening day is closed
        closingTime:
          $ref: '#/components/schemas/Time'
        comment:
          type: string
          description: Comment field
        date:
          type: string
          description: Date of special opening day
          format: date-time
        formattedDate:
          type: string
          description: Text representation of the date of special opening day
        name:
          type: string
          description: Name of the special opening day event
        openingTime:
          $ref: '#/components/schemas/Time'
      description: Representation of a special opening day
    SpellingSuggestion:
      title: SpellingSuggestion
      type: object
      properties:
        query:
          type: string
          description: Query for spelling suggestion
        suggestion:
          type: string
          description: Spelling suggestion
      description: Representation of a Spell Checker Suggestion
    StatusSummary:
      title: StatusSummary
      type: object
      properties:
        numberOfIssues:
          type: integer
          description: Number of issues per status
          format: int32
          example: 3
        status:
          type: string
          description: Status or severity indicator, can be one of ERROR, WARNING,
            INFO or SUCCESS
          example: ERROR
      description: Representation of a status summary, an aggregated view on issues
        for a specific status or severity. These issues are attached to configurations
        of products or order entries
    Stock:
      title: Stock
      type: object
      properties:
        isValueRounded:
          type: boolean
          description: Indicate whether Stock level value is rounded
        stockLevel:
          type: integer
          description: Stock level expressed as number
          format: int64
        stockLevelStatus:
          type: string
          description: Status of stock level
      description: Representation of a Stock
    StoreCount:
      title: StoreCount
      type: object
      properties:
        count:
          type: integer
          description: Count
          format: int32
        isoCode:
          type: string
          description: Iso code of store
        name:
          type: string
          description: Name of store count
        storeCountDataList:
          type: array
          description: List of store counts
          items:
            $ref: '#/components/schemas/StoreCount'
        type:
          type: string
          description: Type of store count
      description: Representation of a Store Count
    StoreCountList:
      title: StoreCountList
      type: object
      properties:
        countriesAndRegionsStoreCount:
          type: array
          description: List of store counts
          items:
            $ref: '#/components/schemas/StoreCount'
      description: Representation of a Store Count List
    StoreFinderSearchPage:
      title: StoreFinderSearchPage
      type: object
      properties:
        boundEastLongitude:
          type: number
          description: Bound east longitude
          format: double
        boundNorthLatitude:
          type: number
          description: Bound north latitude
          format: double
        boundSouthLatitude:
          type: number
          description: Bound south latitude
          format: double
        boundWestLongitude:
          type: number
          description: Bound west longitude
          format: double
        ctcStores:
          type: array
          description: List of stores
          items:
            $ref: '#/components/schemas/ctcStore'
        locationText:
          type: string
          description: Location text
        pagination:
          $ref: '#/components/schemas/deprecatedPagination'
        sorts:
          type: array
          description: List of sortings
          items:
            $ref: '#/components/schemas/Sort'
        sourceLatitude:
          type: number
          description: Source latitude
          format: double
        sourceLongitude:
          type: number
          description: Source longitude
          format: double
        stores:
          type: array
          description: List of stores
          items:
            $ref: '#/components/schemas/PointOfService'
      description: Representation of a Store finder search page
    StoreFinderStockSearchPage:
      title: StoreFinderStockSearchPage
      type: object
      properties:
        boundEastLongitude:
          type: number
          description: Bound to east longitude
          format: double
        boundNorthLatitude:
          type: number
          description: Bound to north latitude
          format: double
        boundSouthLatitude:
          type: number
          description: Bound to south latitude
          format: double
        boundWestLongitude:
          type: number
          description: Bound to west longitude
          format: double
        locationText:
          type: string
          description: Location text
        pagination:
          $ref: '#/components/schemas/deprecatedPagination'
        product:
          $ref: '#/components/schemas/Product'
        sorts:
          type: array
          description: List of sorts
          items:
            $ref: '#/components/schemas/Sort'
        sourceLatitude:
          type: number
          description: Source latitude
          format: double
        sourceLongitude:
          type: number
          description: Source longitude
          format: double
        stores:
          type: array
          description: List of stores
          items:
            $ref: '#/components/schemas/PointOfServiceStock'
      description: Representation of a Store Finder Stock Search Page
    StoreFlexibilityConfigData:
      title: StoreFlexibilityConfigData
      type: object
      properties:
        dataType:
          type: string
        enabled:
          type: boolean
        isCurrent:
          type: boolean
        isDefault:
          type: boolean
        isPlanned:
          type: boolean
        value:
          type: number
          format: double
    StoreFlexibilityConfigRequest:
      title: StoreFlexibilityConfigRequest
      type: object
      properties:
        type:
          type: string
          enum:
          - SLE
          - ONLINE_ORDERING
          - FEE
          - THRESHOLD
          - PICK_UP_CHANNEL
        value:
          type: string
    StoreFlexibilityConfigResponse:
      title: StoreFlexibilityConfigResponse
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/StoreFlexibilityConfigData'
    StoreInfo:
      title: StoreInfo
      type: object
      properties:
        storeName:
          type: string
        storeNumber:
          type: string
    StoreLocatorFilter:
      title: StoreLocatorFilter
      type: object
      properties:
        displayName:
          type: string
        displayPosition:
          type: integer
          format: int32
        filterType:
          type: string
    StoreLocatorFilterList:
      title: StoreLocatorFilterList
      type: object
      properties:
        ctcStores:
          type: array
          items:
            $ref: '#/components/schemas/StoreLocatorFilter'
    StoreServiceData:
      title: StoreServiceData
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        name:
          type: string
        onSite:
          type: boolean
        storeServiceType:
          $ref: '#/components/schemas/StoreServiceType'
    StoreServiceType:
      title: StoreServiceType
      type: object
      properties:
        baseSite:
          type: string
        baseStoreFilter:
          type: boolean
        code:
          type: string
        displayName:
          type: string
        displayPosition:
          type: integer
          format: int32
        filterType:
          type: string
        locatorFilter:
          type: boolean
        name:
          type: string
    StructuredData:
      title: StructuredData
      type: object
      properties:
        entry:
          type: array
          items:
            $ref: '#/components/schemas/StructuredDataEntry'
    StructuredDataEntry:
      title: StructuredDataEntry
      type: object
      properties:
        data:
          type: string
        name:
          type: string
    SubscripitonRenewalRequest:
      title: SubscripitonRenewalRequest
      type: object
      properties:
        autoRenewal:
          type: boolean
        lmsProfileId:
          type: string
        renewalPaymentMethod:
          type: string
    SubscriptionResponse:
      title: SubscriptionResponse
      type: object
      properties:
        autoRenewal:
          type: boolean
        paymentInfos:
          type: array
          items:
            $ref: '#/components/schemas/PaymentInfo'
        refundAmount:
          type: number
          format: double
        renewalDate:
          type: string
        showRenewalSettings:
          type: boolean
        status:
          type: string
    Suggestion:
      title: Suggestion
      type: object
      properties:
        value:
          type: string
          description: Suggestion value
      description: Representation of a Suggestion
    SuggestionList:
      title: SuggestionList
      type: object
      properties:
        suggestions:
          type: array
          description: List of suggestions
          items:
            $ref: '#/components/schemas/Suggestion'
      description: Representation of a Suggestion List
    Time:
      title: Time
      type: object
      properties:
        formattedHour:
          type: string
          description: Formatted hour
        hour:
          maximum: 127
          minimum: -128
          type: integer
          description: Hour part of the time data
          format: int32
        minute:
          maximum: 127
          minimum: -128
          type: integer
          description: Minute part of the time data
          format: int32
      description: Representation of a Time
    Title:
      title: Title
      type: object
      properties:
        code:
          type: string
          description: Title code
        name:
          type: string
          description: Title name
      description: Representation of a Title
    TitleList:
      title: TitleList
      type: object
      properties:
        titles:
          type: array
          description: List of titles
          items:
            $ref: '#/components/schemas/Title'
      description: Representation of a Title List
    User:
      title: User
      type: object
      properties:
        currency:
          $ref: '#/components/schemas/Currency'
        customerId:
          type: string
          description: Customer identifier
        deactivationDate:
          type: string
          description: Deactivation date
          format: date-time
        defaultAddress:
          $ref: '#/components/schemas/Address'
        displayUid:
          type: string
          description: User identifier
        firstName:
          type: string
          description: User first name
        language:
          $ref: '#/components/schemas/Language'
        lastName:
          type: string
          description: User last name
        name:
          type: string
          description: Name of the user
        title:
          type: string
          description: User title
        titleCode:
          type: string
          description: User title code
        uid:
          type: string
          description: Unique user identifier
      description: Representation of an User
    UserGroup:
      title: UserGroup
      type: object
      properties:
        members:
          type: array
          description: List of members
          items:
            $ref: '#/components/schemas/Principal'
        membersCount:
          type: integer
          description: Number of members
          format: int32
        name:
          type: string
          description: Name of the user
        subGroups:
          type: array
          description: List of subgroups
          items:
            $ref: '#/components/schemas/UserGroup'
        uid:
          type: string
          description: Unique user identifier
      description: Representation of an User Group
    UserGroupList:
      title: UserGroupList
      type: object
      properties:
        currentPage:
          type: integer
          description: Current page
          format: int32
        numberOfPages:
          type: integer
          description: Number of pages
          format: int32
        pageSize:
          type: integer
          description: Page size
          format: int32
        totalNumber:
          type: integer
          description: Total number
          format: int32
        userGroups:
          type: array
          description: List of user groups
          items:
            $ref: '#/components/schemas/UserGroup'
      description: Representation of an User Group List
    UserSignUp:
      title: UserSignUp
      required:
      - firstName
      - lastName
      - password
      - uid
      type: object
      properties:
        firstName:
          type: string
          description: first name of the user
        lastName:
          type: string
          description: last name of the user
        password:
          type: string
          description: user password
        titleCode:
          type: string
        uid:
          type: string
          description: user id, unique string required to create new user. It can
            be email
      description: Representation of an UserSignUp. Consists of fields required to
        register new customer
    VariantCategory:
      title: VariantCategory
      type: object
      properties:
        code:
          type: string
          description: Variant category code
        hasImage:
          type: boolean
          description: Flag if varian category has image assigned
        name:
          type: string
          description: Variant category name
        priority:
          type: integer
          description: Priority number of variant category
          format: int32
      description: Representation of a Variant Category
    VariantMatrixData:
      title: VariantMatrixData
      type: object
      properties:
        parentVariantCategory:
          $ref: '#/components/schemas/CtcVariantCategoryData'
        productCode:
          type: string
        variantValueCategory:
          $ref: '#/components/schemas/CtcVariantValueCategoryData'
    VariantMatrixElement:
      title: VariantMatrixElement
      type: object
      properties:
        displayName:
          type: string
          description: The display name of the variant value category
        elements:
          type: array
          description: List of elements with the type of variant matrix element
          items:
            $ref: '#/components/schemas/VariantMatrixElement'
        images:
          type: array
          description: The images of the product
          items:
            $ref: '#/components/schemas/Image'
        isLeaf:
          type: boolean
        parentVariantCategory:
          $ref: '#/components/schemas/VariantCategory'
        variantOption:
          $ref: '#/components/schemas/VariantOption'
        variantValueCategory:
          $ref: '#/components/schemas/VariantValueCategory'
      description: Representation of a Variant Matrix Element
    VariantOption:
      title: VariantOption
      type: object
      properties:
        canonicalURL:
          type: string
          description: canonical URL
        checkDigit:
          type: string
          description: CheckDigit of the Product
        code:
          type: string
          description: Code of the variant option
        corporateStatus:
          type: string
          description: Corporate Status
        ctcPrice:
          $ref: '#/components/schemas/ctcPrice'
        feeMessages:
          type: array
          description: Fee Messages (eco fees, tire recycle fees and core charges)
          items:
            $ref: '#/components/schemas/CtcFeeMessage'
        fitmentTypeCode:
          type: string
        formattedCode:
          type: string
          description: Formatted code with check digit
        images:
          type: array
          description: The images of the product
          items:
            $ref: '#/components/schemas/Image'
        installationEligible:
          type: boolean
          description: Installation Eligible
        isBestSeller:
          type: boolean
          description: Product is bestseller
        isBulk:
          type: boolean
          description: Is Bulk Identifier
        isExclusive:
          type: boolean
          description: Product is exclusive
        isLimitedPDP:
          type: boolean
        isOnlineOnly:
          type: boolean
          description: Product is online only
        isPerfectGiftBadge:
          type: boolean
          description: Product is perfect gift
        isTestedForLife:
          type: boolean
          description: Product is tested for life
        isVehicleRequired:
          type: boolean
        loyaltyEndDate:
          type: string
          description: Product loyalty end date
          format: date-time
        loyaltyOfferRule:
          type: string
          description: Product loyalty offer rule
        loyaltyStartDate:
          type: string
          description: Product loyalty start date
          format: date-time
        maxOrderQuantity:
          type: integer
          format: int32
        priceData:
          $ref: '#/components/schemas/Price'
        productManualLink:
          type: array
          description: ManualLinks of the product
          items:
            type: string
        productReferences:
          type: array
          description: List of product references
          items:
            $ref: '#/components/schemas/ProductReference'
        productStatus:
          type: string
          description: Product Status
        repairOrderRequired:
          type: boolean
          description: Repair Order Required
        specifications:
          type: array
          description: List of specifications related to the product
          items:
            $ref: '#/components/schemas/Classification'
        stock:
          $ref: '#/components/schemas/Stock'
        url:
          type: string
          description: Url address of the variant option
        variantOptionQualifiers:
          type: array
          description: List of variant option qualifiers
          items:
            $ref: '#/components/schemas/VariantOptionQualifier'
        variantProductPrices:
          type: array
          items:
            $ref: '#/components/schemas/ctcPrice'
      description: Representation of a Variant Option
    VariantOptionQualifier:
      title: VariantOptionQualifier
      type: object
      properties:
        image:
          $ref: '#/components/schemas/Image'
        name:
          type: string
          description: Name of variant option qualifier
        qualifier:
          type: string
          description: Qualifier
        value:
          type: string
          description: Value of variant option qualifier
      description: Representation of a Variant Option Qualifier
    VariantProductImageData:
      title: VariantProductImageData
      type: object
      properties:
        mediaType:
          type: string
        priority:
          type: integer
          format: int32
        url:
          type: string
        videoImageThumbnailUrl:
          type: string
        videoShortDescription:
          type: string
        videoTitle:
          type: string
        videoType:
          type: string
    VariantValueCategory:
      title: VariantValueCategory
      type: object
      properties:
        displayName:
          type: string
          description: displayName of the variant value category
        name:
          type: string
          description: Name of the variant value category
        sequence:
          type: integer
          description: Sequence number of variant value category
          format: int32
        superCategories:
          type: array
          description: Parent category of variant value category
          items:
            $ref: '#/components/schemas/VariantCategory'
        variantId:
          type: string
          description: The variantId of the variant value category
      description: Representation of a Variant Value Category
    VehicleContext:
      title: VehicleContext
      type: object
      properties:
        engine:
          type: string
        make:
          type: string
        model:
          type: string
        year:
          type: string
    Voucher:
      title: Voucher
      type: object
      properties:
        appliedValue:
          $ref: '#/components/schemas/Price'
        code:
          type: string
          description: 'The identifier of the Voucher. This is the first part of voucher
            code which holds first 3 letters, like: 123'
        currency:
          $ref: '#/components/schemas/Currency'
        description:
          type: string
          description: Description of the voucher
        freeShipping:
          type: boolean
          description: Specifies if the order this voucher is applied to is shipped
            for free (true) or not (false). Defaults to false.
        name:
          type: string
          description: Name of the voucher
        value:
          type: number
          description: 'Value of the voucher. Example of such value is: 15.0d'
          format: double
        valueFormatted:
          type: string
          description: Formatted value of the voucher
        valueString:
          type: string
          description: 'The value of the voucher to display. Example: 15.0%'
        voucherCode:
          type: string
          description: 'Voucher code, is the holder for keeping specific occasional
            voucher related to business usage. It can be generated and looks like:
            123-H8BC-Y3D5-34AL'
      description: Representation of a Voucher
    VoucherList:
      title: VoucherList
      type: object
      properties:
        vouchers:
          type: array
          description: List of vouchers
          items:
            $ref: '#/components/schemas/Voucher'
      description: Representation of a Voucher List
    Warranty:
      title: Warranty
      type: object
      properties:
        additionalWarrantyMessage:
          type: string
        warrantyMessage:
          type: string
        warrantyType:
          type: string
    WebSharedCart:
      title: WebSharedCart
      type: object
      properties:
        emails:
          type: array
          items:
            type: string
        isSendToCostar:
          type: boolean
        phones:
          type: array
          items:
            type: string
        sender:
          type: string
    WeekdayOpeningDay:
      title: WeekdayOpeningDay
      type: object
      properties:
        closed:
          type: boolean
          description: Flag stating if weekday opening day is closed
        closingTime:
          $ref: '#/components/schemas/Time'
        openingTime:
          $ref: '#/components/schemas/Time'
        storeArea:
          type: string
          description: Identify type of area for this day opening info
        storeHourPeriod:
          type: string
          description: Identify store working hour period type details
        weekDay:
          type: string
          description: Text representation of week day opening day
      description: Representation of a Weekday Opening Day
    WishlistAvailableActions:
      title: WishlistAvailableActions
      type: object
      properties:
        isAddToCartEnabled:
          type: boolean
    carrier:
      title: carrier
      type: object
      properties:
        code:
          type: string
          description: Carrier code
        name:
          type: string
          description: Carrier name
      description: Carrier
    consignmentTracking:
      title: consignmentTracking
      type: object
      properties:
        carrierDetails:
          $ref: '#/components/schemas/carrier'
        statusDisplay:
          type: string
          description: Consignment status
          example: inTransit
        targetArrivalDate:
          type: string
          description: Target arrival date
          format: date-time
        trackingEvents:
          type: array
          description: Logistics tracking information
          items:
            $ref: '#/components/schemas/consignmentTrackingEvent'
        trackingID:
          type: string
          description: Tracking identifier
        trackingUrl:
          type: string
          description: The tracking url provided by the carrier
      description: Consignment tracking data
    consignmentTrackingEvent:
      title: consignmentTrackingEvent
      type: object
      properties:
        detail:
          type: string
          description: Tracking detail
        eventDate:
          type: string
          description: Date of tracking event
          format: date-time
        location:
          type: string
          description: Consignment location
        referenceCode:
          type: string
          description: Logistics status
      description: Consignment tracking event
    conversation:
      title: conversation
      type: object
      properties:
        agent:
          $ref: '#/components/schemas/Principal'
        closeDate:
          type: string
          description: close date
          format: date-time
        createDate:
          type: string
          description: create date
          format: date-time
        customer:
          $ref: '#/components/schemas/Principal'
        id:
          type: string
          description: conversation identifier
        latestMessage:
          $ref: '#/components/schemas/conversationMessage'
        status:
          type: string
          description: conversation status
      description: Conversation
    conversationList:
      title: conversationList
      type: object
      properties:
        conversations:
          type: array
          description: conversation data
          items:
            $ref: '#/components/schemas/conversation'
      description: Conversation list
    conversationMessage:
      title: conversationMessage
      type: object
      properties:
        content:
          type: string
          description: message content
        sender:
          $ref: '#/components/schemas/Principal'
        sentTime:
          type: string
          description: sent time
          format: date-time
      description: Conversation message
    conversationMessageList:
      title: conversationMessageList
      type: object
      properties:
        conversationId:
          type: string
          description: conversation identifier
        messages:
          type: array
          description: the messages list of this conversation
          items:
            $ref: '#/components/schemas/conversationMessage'
      description: Conversation message list
    ctcPrice:
      title: ctcPrice
      type: object
      properties:
        baseCoreCharges:
          type: number
          description: baseCoreCharges should be applied.
          format: double
        baseEcoFees:
          type: number
          description: baseEcoFees should be applied.
          format: double
        ctcPriceType:
          type: string
          description: Ctc Price Type
        ctcRebate:
          $ref: '#/components/schemas/CtcRebate'
        currencyIso:
          type: string
          description: Currency iso format
        currentUnitPrice:
          type: number
          format: double
        ecoFees:
          type: number
          description: ecoFees should be applied.
          format: double
        formattedValue:
          type: string
          description: Value of price formatted
        isIncludeInPriceRange:
          type: boolean
          description: Include In Price Range
        maxQuantity:
          type: integer
          description: Maximum quantity of the price value
          format: int64
        minQuantity:
          type: integer
          description: Minimum quantity of the price value
          format: int64
        originalPrice:
          type: number
          format: double
        priceType:
          type: string
          description: Type of the price
          enum:
          - BUY
          - FROM
        promoMessage:
          type: string
          description: Promotional Message
        saveStory:
          type: string
          description: Price Message
        totalEcoFees:
          type: number
          description: totalEcoFees should be applied.
          format: double
        value:
          type: number
          description: Value of price in BigDecimal format
      description: Representation of a Price
    ctcProduct:
      title: ctcProduct
      type: object
      properties:
        availableForPickup:
          type: boolean
          description: Flag defining if product is available for pickup
        averageRating:
          type: number
          description: Rating number of average value
          format: double
        badges:
          type: array
          description: product badges
          items:
            type: string
        baseProduct:
          type: string
          description: Information about base product
        breadcrumbData:
          type: array
          items:
            $ref: '#/components/schemas/Breadcrumb'
        canonicalURL:
          type: string
          description: canonical URL
        categories:
          type: array
          description: List of categories product belongs to
          items:
            $ref: '#/components/schemas/Category'
        categoryName:
          type: string
          description: Business Category
        classifications:
          type: array
          description: List of classifications related to the product
          items:
            $ref: '#/components/schemas/Classification'
        code:
          type: string
          description: Code of the product
        configurable:
          type: boolean
          description: Flag stating if product is configurable
        configuratorType:
          type: string
          description: Configurator type related to the product
        corporateStatus:
          type: string
          description: Product Corporate Status
        ctcPrice:
          $ref: '#/components/schemas/ctcPrice'
        description:
          type: string
          description: Description of the product
        divisionName:
          type: string
          description: Division
        dwoEndDate:
          type: string
          description: DWO End date
          format: date-time
        featureBullets:
          type: array
          description: Feature Bullets of the Product
          items:
            $ref: '#/components/schemas/CtcProductKeyFeatureBullet'
        feeMessages:
          type: array
          description: Fee Messages (eco fees, tire recycle fees and core charges)
          items:
            $ref: '#/components/schemas/CtcFeeMessage'
        fineLineName:
          type: string
          description: FineLine
        fitmentTypeCode:
          type: string
          description: FitmentTypeCode with possible values (UNIVERSAL_FIT_01,DIRECT_FIT_02,VEH_COND_FIT_03,PROD_VEH_COND_FIT_04,PART_COND_FIT_05)
        formattedCode:
          type: string
          description: formatted product code with check digit
        futureStocks:
          type: array
          description: List of future stocks
          items:
            $ref: '#/components/schemas/FutureStock'
        goodBetterBestRanking:
          type: string
          description: Product Ranking
        hotDealThreshold:
          type: number
          description: Hot deal Threshold
          format: double
        hreflangLinkData:
          type: array
          description: Product URL for SEO
          items:
            $ref: '#/components/schemas/HreflangLink'
        images:
          type: array
          description: List of images linked to product
          items:
            $ref: '#/components/schemas/Image'
        installationEligible:
          type: boolean
          description: Installation Eligible
        isBestSeller:
          type: boolean
          description: Product is bestseller
        isBulk:
          type: boolean
          description: Is Bulk Identifier
        isEligibleForExpressDelivery:
          type: boolean
          description: Product is eligible for Express delivery
        isExclusive:
          type: boolean
          description: Product is exclusive
        isLimitedPDP:
          type: boolean
          description: Indicator to check whether product is limited to PDP
        isOnlineOnly:
          type: boolean
          description: Product is online only
        isPerfectGiftBadge:
          type: boolean
          description: Product is perfect gift
        isServiceProduct:
          type: boolean
          description: Service Product Indicator
        isTestedForLife:
          type: boolean
          description: Product is tested for life
        isVehicleRequired:
          type: boolean
          description: Indicator to check whether product needs vehicle information
        limitedTimeThreshold:
          type: number
          description: Limited Time Threshold
          format: double
        lobname:
          type: string
        lowStockThreshold:
          type: integer
          description: Low Stock Threshold
          format: int32
        loyaltyEndDate:
          type: string
          description: Product loyalty end date
          format: date-time
        loyaltyOfferRule:
          type: string
          description: Product loyalty offer rule
        loyaltyStartDate:
          type: string
          description: Product loyalty start date
          format: date-time
        manufacturer:
          type: string
          description: Data of product manufacturer
        maxOrderQuantity:
          type: integer
          description: Maximum quantity that can be ordered within a single cart
          format: int32
        medias:
          type: array
          description: media Product
          items:
            $ref: '#/components/schemas/Image'
        metaRobot:
          type: string
          description: Meta Robot tags
        multidimensional:
          type: boolean
          description: Flag stating if product is multidimentional
        name:
          type: string
          description: Name of the product
        numberOfReviews:
          type: integer
          description: Number of reviews associated with the product
          format: int32
        potentialPromotions:
          type: array
          description: List of potential promotions related to the product
          items:
            $ref: '#/components/schemas/Promotion'
        price:
          $ref: '#/components/schemas/Price'
        priceRange:
          $ref: '#/components/schemas/PriceRange'
        priceRanges:
          type: array
          description: Price ranges assigned to the product
          items:
            $ref: '#/components/schemas/PriceRangeList'
        primaryCategoryPath:
          type: string
          description: Primary Category of the Product
        primarySellingBanner:
          type: string
          description: primary selling banner
        productBrand:
          type: string
          description: Brand of the Product
        productManualLink:
          type: array
          description: ManualLinks of the product
          items:
            type: string
        productPrices:
          type: array
          description: product prices
          items:
            $ref: '#/components/schemas/ctcPrice'
        productStatus:
          type: string
          description: Product Status
        productWheelTypeCode:
          type: string
          description: Automobile Product type
        purchasable:
          type: boolean
          description: Flag defining if product is purchasable
        rating:
          $ref: '#/components/schemas/CtcRating'
        repairOrderRequired:
          type: boolean
          description: Repair Order Required
        reviews:
          type: array
          description: List of reviews associated with the product
          items:
            $ref: '#/components/schemas/Review'
        serviceInstallationMessage:
          type: string
          description: Service Installation Message of the Product
        sizeGuide:
          type: array
          description: Size Guide of Product
          items:
            $ref: '#/components/schemas/Image'
        specifications:
          type: array
          description: List of specifications related to the product
          items:
            $ref: '#/components/schemas/Classification'
        status:
          type: string
          description: Product Status with possible values (ACTIVE,PERM,INACTIVE,PURGE,ARCHIVE,CLEARANCE1,CLEARANCE2,DISCONTINUED,WRITTEN_OFF)
        stock:
          $ref: '#/components/schemas/Stock'
        subCategoryName:
          type: string
          description: Business sub category
        summary:
          type: string
          description: Product summary
        tags:
          type: array
          description: Tags associated with the product
          items:
            type: string
        tireRoadRatings:
          type: array
          description: List of tireRoadRatings associated to a product
          items:
            $ref: '#/components/schemas/CtcTireRoadRatingData'
        url:
          type: string
          description: Url address of the product
        variantType:
          type: string
          description: Variant type of the product
        volumePrices:
          type: array
          description: List of volume prices
          items:
            $ref: '#/components/schemas/Price'
        volumePricesFlag:
          type: boolean
          description: Flag stating if volume price should be displayed
        warranty:
          $ref: '#/components/schemas/Warranty'
      description: Representation of a Product
    ctcStore:
      title: ctcStore
      type: object
      properties:
        address:
          $ref: '#/components/schemas/Address'
        applyDayLightSavings:
          type: boolean
        baseStoreId:
          type: string
        curbsideEligibility:
          type: boolean
        deliveryEligibility:
          type: boolean
        deliverySupportedType:
          type: array
          items:
            type: string
        description:
          type: string
          description: Description of the point of service
        displayName:
          type: string
          description: Display name of the point of service
        distanceKm:
          type: number
          description: Distance to the point of service as number value
          format: double
        estimatedDeliveryDateEnabled:
          type: boolean
        expressDelivery:
          type: boolean
        features:
          type: object
          additionalProperties:
            type: string
          description: List of features for a given point of service
        fee:
          type: number
          format: double
        formattedDistance:
          type: string
          description: Distance to the point of service as text value
        freeStorePickup:
          type: boolean
        geoPoint:
          $ref: '#/components/schemas/GeoPoint'
        hreflangLinkData:
          type: array
          description: Product URL for SEO
          items:
            $ref: '#/components/schemas/HreflangLink'
        inStorePickUp:
          type: boolean
        isAOAFlowEnabled:
          type: boolean
        isStoreOpen:
          type: boolean
        mapIcon:
          $ref: '#/components/schemas/Image'
        metaRobot:
          type: string
        name:
          type: string
          description: Name of the point of service
        onlineOrdering:
          type: boolean
        openingHours:
          $ref: '#/components/schemas/OpeningSchedule'
        seoDescription:
          type: string
        seoTag:
          type: string
        seoTitle:
          type: string
        shipToHome:
          type: boolean
        sleConfigurationName:
          type: string
        storeContent:
          type: string
          description: Store content of given point of service
        storeImages:
          type: array
          description: Collection of images associated with a point of service
          items:
            $ref: '#/components/schemas/Image'
        storeServices:
          type: array
          items:
            $ref: '#/components/schemas/StoreServiceData'
        threshold:
          type: number
          format: double
        timezone:
          type: number
          format: double
        url:
          type: string
          description: Url address of the point of service
      description: Contains Store information
    ctcStoreList:
      title: ctcStoreList
      type: object
      properties:
        ctcStores:
          type: array
          description: ctcStore List Details
          items:
            $ref: '#/components/schemas/ctcStore'
      description: Representation of a ctcStore List
    customerInterestsSearchPage:
      title: customerInterestsSearchPage
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/pagination'
        results:
          type: array
          description: List of product interest relation
          items:
            $ref: '#/components/schemas/productInterestRelation'
        sorts:
          type: array
          description: Sorting information
          items:
            $ref: '#/components/schemas/sort'
      description: Customer interests search page
    deprecatedPagination:
      title: deprecatedPagination
      type: object
      properties:
        currentPage:
          type: integer
          description: The current page number. The first page is number zero (0),
            the second page is number one (1), and so on
          format: int32
        pageSize:
          type: integer
          description: The number of results per page. A page may have less results
            if there are less than a full page of results, only on the last page in
            the results
          format: int32
        sort:
          type: string
          description: The selected sort code
        totalPages:
          type: integer
          description: The total number of pages. This is the number of pages, each
            of pageSize, required to display the totalResults.
          format: int32
        totalResults:
          type: integer
          description: The total number of matched results across all pages
          format: int64
      description: Representation of a search results pagination
    error:
      title: error
      type: object
      properties:
        errorCode:
          type: string
          description: Error code
        message:
          type: string
          description: Descriptive, human readable error message.
        reason:
          type: string
          description: Additional classification specific for each error type e.g.
            'noStock'.
        subject:
          type: string
          description: Identifier of the related object e.g. '1'.
        subjectType:
          type: string
          description: Type of the object related to the error e.g. 'entry'.
        type:
          type: string
          description: Type of the error e.g. 'LowStockError'.
      description: Error message
    errorList:
      title: errorList
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/error'
      description: List of errors
    notificationPreference:
      title: notificationPreference
      type: object
      properties:
        channel:
          type: string
          description: preference channel
          example: email, sms, site_message
        enabled:
          type: boolean
          description: if true, the channel is on; if false, the channel is off
        value:
          type: string
          description: the corresponding value of current channel, for example, for
            SMS it should be a mobile number; for email it should be an email address
        visible:
          type: boolean
          description: if true, the channel is visible; if false, the channel is invisible
      description: Notification preference
    notificationPreferenceList:
      title: notificationPreferenceList
      type: object
      properties:
        preferences:
          type: array
          description: notification preferences
          items:
            $ref: '#/components/schemas/notificationPreference'
      description: Notification preference list
    pagination:
      title: pagination
      type: object
      properties:
        count:
          type: integer
          description: Number of elements on this page
          format: int32
        hasNext:
          type: boolean
          description: Indicates if there is next page
        hasPrevious:
          type: boolean
          description: Indicates if there is previous page
        page:
          type: integer
          description: Current page number
          format: int32
        totalCount:
          type: integer
          description: Total number of elements
          format: int64
        totalPages:
          type: integer
          description: Total number of pages
          format: int32
      description: Pagination info
    productInterestEntry:
      title: productInterestEntry
      type: object
      properties:
        dateAdded:
          type: string
          description: Added date of product interest
          format: date-time
        expirationDate:
          type: string
          description: Expiration date of product interest
          format: date-time
        interestType:
          type: string
          description: Product interest type
      description: Product interest entry
    productInterestRelation:
      title: productInterestRelation
      type: object
      properties:
        product:
          $ref: '#/components/schemas/Product'
        productInterestEntry:
          type: array
          description: List of product interest entry
          items:
            $ref: '#/components/schemas/productInterestEntry'
      description: Product interest relation
    siteMessage:
      title: siteMessage
      type: object
      properties:
        body:
          type: string
          description: message body
        notificationType:
          type: string
          description: notification type used for this message
          enum:
          - BACK_IN_STOCK
          - COUPON_EFFECTIVE
          - NOTIFICATION
          - COUPON_EXPIRE
        sentDate:
          type: string
          description: sent date
          format: date-time
        subject:
          type: string
          description: message subject
        uid:
          type: string
          description: message uid
      description: Site message
    siteMessageSearchResult:
      title: siteMessageSearchResult
      type: object
      properties:
        messages:
          type: array
          description: site messages
          items:
            $ref: '#/components/schemas/siteMessage'
        pagination:
          $ref: '#/components/schemas/pagination'
        sorts:
          type: array
          description: sorting information
          items:
            $ref: '#/components/schemas/sort'
      description: Site message search result
    sort:
      title: sort
      type: object
      properties:
        asc:
          type: boolean
        code:
          type: string
      description: Sort option
  securitySchemes:
    oauth2_Password:
      type: oauth2
      flows:
        password:
          tokenUrl: /authorizationserver/oauth/token
          scopes:
            basic: ""
    oauth2_client_credentials:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: /authorizationserver/oauth/token
          scopes:
            extended: ""
x-sap-api-type: REST
x-sap-shortText: Enables you to manage all of the common commerce functionality.
x-sap-stateInfo:
  state: Active
x-servers:
- templates:
    url:
      description: SAP Commerce Cloud server URL where the application is deployed.
  description: Commerce Webservices v2 REST API endpoint
  url: https://{url}/rest/v2
